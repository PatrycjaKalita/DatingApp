{"version":3,"sources":["../src/schemes.ts"],"names":["getSchemesForIosAsync","projectRoot","configPath","IOSConfig","Paths","getInfoPlistPath","rawPlist","fs","readFileSync","plistObject","plist","parse","sortLongest","Scheme","getSchemesFromPlist","getSchemesForAndroidAsync","AndroidConfig","getAndroidManifestAsync","manifest","Manifest","readAndroidManifestAsync","getSchemesFromManifest","intersecting","a","b","c","d","length","filter","value","includes","getDevClientSchemeAsync","hasIos","hasAndroid","Promise","all","ios","android","getManagedDevClientSchemeAsync","matching","Log","warn","log","chalk","cyan","dim","AbortCommandError","exp","skipSDKVersionRequirement","getDefaultScheme","require","scheme","error","newLine","obj","sort"],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport { AndroidConfig, IOSConfig } from '@expo/config-plugins';\nimport plist from '@expo/plist';\nimport fs from 'fs';\nimport resolveFrom from 'resolve-from';\n\nimport { AbortCommandError } from './CommandError';\nimport {\n  hasRequiredAndroidFilesAsync,\n  hasRequiredIOSFilesAsync,\n} from './commands/eject/clearNativeFolder';\nimport Log from './log';\n\nexport async function getSchemesForIosAsync(projectRoot: string) {\n  try {\n    const configPath = IOSConfig.Paths.getInfoPlistPath(projectRoot);\n    const rawPlist = fs.readFileSync(configPath, 'utf8');\n    const plistObject = plist.parse(rawPlist);\n    return sortLongest(IOSConfig.Scheme.getSchemesFromPlist(plistObject));\n  } catch {\n    // No ios folder or some other error\n    return [];\n  }\n}\n\nexport async function getSchemesForAndroidAsync(projectRoot: string) {\n  try {\n    const configPath = await AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n    const manifest = await AndroidConfig.Manifest.readAndroidManifestAsync(configPath);\n    return sortLongest(await AndroidConfig.Scheme.getSchemesFromManifest(manifest));\n  } catch {\n    // No android folder or some other error\n    return [];\n  }\n}\n\nfunction intersecting<T>(a: T[], b: T[]): T[] {\n  const [c, d] = a.length > b.length ? [a, b] : [b, a];\n  return c.filter(value => d.includes(value));\n}\n\nexport async function getDevClientSchemeAsync(projectRoot: string): Promise<string> {\n  const [hasIos, hasAndroid] = await Promise.all([\n    hasRequiredIOSFilesAsync(projectRoot),\n    hasRequiredAndroidFilesAsync(projectRoot),\n  ]);\n\n  const [ios, android] = await Promise.all([\n    getSchemesForIosAsync(projectRoot),\n    getSchemesForAndroidAsync(projectRoot),\n  ]);\n\n  // Allow managed projects\n  if (!hasIos && !hasAndroid) {\n    return getManagedDevClientSchemeAsync(projectRoot);\n  }\n\n  let matching: string;\n  // Allow for only one native project to exist.\n  if (!hasIos) {\n    matching = android[0];\n  } else if (!hasAndroid) {\n    matching = ios[0];\n  } else {\n    [matching] = intersecting(ios, android);\n  }\n\n  if (!matching) {\n    Log.warn(\n      '\\nDev Client: No common URI schemes could be found for the native iOS and Android projects, this is required for opening the project\\n'\n    );\n    Log.log(\n      `Add a common scheme with ${Log.chalk.cyan(\n        'npx uri-scheme add my-scheme'\n      )} or provide a scheme with the ${Log.chalk.cyan('--scheme')} flag\\n`\n    );\n    Log.log(\n      Log.chalk.dim(\n        `You can see all of the existing schemes for your native projects by running ${Log.chalk.cyan(\n          'npx uri-scheme list'\n        )}\\n`\n      )\n    );\n\n    // No log error\n    throw new AbortCommandError();\n  }\n  return matching;\n}\n\nasync function getManagedDevClientSchemeAsync(projectRoot: string): Promise<string> {\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n  try {\n    const getDefaultScheme = require(resolveFrom(projectRoot, 'expo-dev-client/getDefaultScheme'));\n    const scheme = getDefaultScheme(exp);\n    return scheme;\n  } catch (error) {\n    Log.warn(\n      '\\nDev Client: Unable to get the default URI scheme for the project. Please make sure the expo-dev-client package is installed.'\n    );\n    Log.error(error);\n    Log.newLine();\n    throw new AbortCommandError();\n  }\n}\n\n// sort longest to ensure uniqueness.\n// this might be undesirable as it causes the QR code to be longer.\nfunction sortLongest(obj: string[]): string[] {\n  return obj.sort((a, b) => b.length - a.length);\n}\n"],"file":"schemes.js"}