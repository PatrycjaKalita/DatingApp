{"version":3,"sources":["../../../../src/commands/run/ios/runIos.ts"],"names":["isMac","process","platform","actionAsync","projectRoot","options","promptToClearMalformedNativeProjectsAsync","exp","skipSDKVersionRequirement","track","Log","warn","chalk","cyan","fs","existsSync","path","join","install","platforms","props","isSimulator","IOSDeploy","assertInstalledAsync","buildOutput","XcodeBuild","buildAsync","binaryPath","getAppBinaryPath","shouldStartBundler","metroPort","port","bundleIdentifier","getBundleIdentifierForBinaryAsync","logPrettyItem","bold","device","name","SimControl","installAsync","udid","dir","openInSimulatorAsync","installOnDeviceAsync","bundle","appDeltaDirectory","getAppDeltaDirectory","deviceName","nested","dim","UnifiedAnalytics","logEvent","status","StatusEventEmitter","once","flush","builtInfoPlistPath","CFBundleIdentifier","Simulator","streamLogsAsync","schemes","length","scheme","debug","result","openProjectAsync","devClient","skipNativeLogs","success","CommandError","error","openBundleIdAsync","ensureSimulatorAppRunningAsync","activateSimulatorWindowAsync","stderr"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport * as path from 'path';\nimport { SimControl, Simulator, UnifiedAnalytics } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport StatusEventEmitter from '../../../StatusEventEmitter';\nimport getDevClientProperties from '../../../analytics/getDevClientProperties';\nimport Log from '../../../log';\nimport { getSchemesForIosAsync } from '../../../schemes';\nimport { promptToClearMalformedNativeProjectsAsync } from '../../eject/clearNativeFolder';\nimport { EjectAsyncOptions, prebuildAsync } from '../../eject/prebuildAsync';\nimport { installCustomExitHook } from '../../start/installExitHooks';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { parseBinaryPlistAsync } from '../utils/binaryPlist';\nimport { isDevMenuInstalled } from '../utils/isDevMenuInstalled';\nimport * as IOSDeploy from './IOSDeploy';\nimport maybePromptToSyncPodsAsync from './Podfile';\nimport * as XcodeBuild from './XcodeBuild';\nimport { Options, resolveOptionsAsync } from './resolveOptionsAsync';\nimport { startBundlerAsync } from './startBundlerAsync';\n\nconst isMac = process.platform === 'darwin';\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  // If the user has an empty ios folder then the project won't build, this can happen when they delete the prebuild files in git.\n  // Check to ensure most of the core files are in place, and prompt to remove the folder if they aren't.\n  await profileMethod(promptToClearMalformedNativeProjectsAsync)(projectRoot, ['ios']);\n\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  track(projectRoot, exp);\n\n  if (!isMac) {\n    // TODO: Prompt to use EAS?\n\n    Log.warn(\n      `iOS apps can only be built on macOS devices. Use ${chalk.cyan`eas build -p ios`} to build in the cloud.`\n    );\n    return;\n  }\n\n  // If the project doesn't have native code, prebuild it...\n  if (!fs.existsSync(path.join(projectRoot, 'ios'))) {\n    await prebuildAsync(projectRoot, {\n      install: true,\n      platforms: ['ios'],\n    } as EjectAsyncOptions);\n  } else {\n    await maybePromptToSyncPodsAsync(projectRoot);\n    // TODO: Ensure the pods are in sync -- https://github.com/expo/expo/pull/11593\n  }\n\n  const props = await resolveOptionsAsync(projectRoot, options);\n  if (!props.isSimulator) {\n    // Assert as early as possible\n    await IOSDeploy.assertInstalledAsync();\n  }\n\n  const buildOutput = await profileMethod(XcodeBuild.buildAsync, 'XcodeBuild.buildAsync')(props);\n\n  const binaryPath = await profileMethod(\n    XcodeBuild.getAppBinaryPath,\n    'XcodeBuild.getAppBinaryPath'\n  )(buildOutput);\n\n  if (props.shouldStartBundler) {\n    await startBundlerAsync(projectRoot, {\n      metroPort: props.port,\n    });\n  }\n  const bundleIdentifier = await profileMethod(getBundleIdentifierForBinaryAsync)(binaryPath);\n\n  if (props.isSimulator) {\n    XcodeBuild.logPrettyItem(`${chalk.bold`Installing`} on ${props.device.name}`);\n    await SimControl.installAsync({ udid: props.device.udid, dir: binaryPath });\n\n    await openInSimulatorAsync({\n      projectRoot,\n      bundleIdentifier,\n      device: props.device,\n      shouldStartBundler: props.shouldStartBundler,\n    });\n  } else {\n    await IOSDeploy.installOnDeviceAsync({\n      bundle: binaryPath,\n      appDeltaDirectory: IOSDeploy.getAppDeltaDirectory(bundleIdentifier),\n      udid: props.device.udid,\n      deviceName: props.device.name,\n    });\n  }\n\n  if (props.shouldStartBundler) {\n    Log.nested(`\\nLogs for your project will appear below. ${chalk.dim(`Press Ctrl+C to exit.`)}`);\n  }\n}\n\nfunction track(projectRoot: string, exp: ExpoConfig) {\n  UnifiedAnalytics.logEvent('dev client run command', {\n    status: 'started',\n    platform: 'ios',\n    ...getDevClientProperties(projectRoot, exp),\n  });\n  StatusEventEmitter.once('bundleBuildFinish', () => {\n    // Send the 'bundle ready' event once the JS has been built.\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'bundle ready',\n      platform: 'ios',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  });\n  StatusEventEmitter.once('deviceLogReceive', () => {\n    // Send the 'ready' event once the app is running in a device.\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'ready',\n      platform: 'ios',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  });\n  installCustomExitHook(() => {\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'finished',\n      platform: 'ios',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n    UnifiedAnalytics.flush();\n  });\n}\n\nasync function getBundleIdentifierForBinaryAsync(binaryPath: string): Promise<string> {\n  const builtInfoPlistPath = path.join(binaryPath, 'Info.plist');\n  const { CFBundleIdentifier } = await parseBinaryPlistAsync(builtInfoPlistPath);\n  return CFBundleIdentifier;\n}\n\nasync function openInSimulatorAsync({\n  projectRoot,\n  bundleIdentifier,\n  device,\n  shouldStartBundler,\n}: {\n  projectRoot: string;\n  bundleIdentifier: string;\n  device: XcodeBuild.BuildProps['device'];\n  shouldStartBundler?: boolean;\n}) {\n  XcodeBuild.logPrettyItem(\n    `${chalk.bold`Opening`} on ${device.name} ${chalk.dim(`(${bundleIdentifier})`)}`\n  );\n\n  if (shouldStartBundler) {\n    await Simulator.streamLogsAsync({\n      udid: device.udid,\n      bundleIdentifier,\n    });\n  }\n\n  const schemes = await getSchemesForIosAsync(projectRoot);\n\n  if (\n    // If the dev-menu is installed, then deep link directly into the app so the user never sees the switcher screen.\n    isDevMenuInstalled(projectRoot) &&\n    // Ensure the app can handle custom URI schemes before attempting to deep link.\n    // This can happen when someone manually removes all URI schemes from the native app.\n    schemes.length\n  ) {\n    // TODO: set to ensure TerminalUI uses this same scheme.\n    const scheme = schemes[0];\n\n    Log.debug(`Deep linking into simulator: ${device.udid}, using scheme: ${scheme}`);\n\n    const result = await Simulator.openProjectAsync({\n      projectRoot,\n      udid: device.udid,\n      devClient: true,\n      scheme,\n      // We always setup native logs before launching to ensure we catch any fatal errors.\n      skipNativeLogs: true,\n    });\n    if (!result.success) {\n      // TODO: Maybe fallback on using the bundle identifier.\n      throw new CommandError(result.error);\n    }\n  } else {\n    Log.debug('Opening app in simulator via bundle identifier: ' + device.udid);\n    const result = await SimControl.openBundleIdAsync({\n      udid: device.udid,\n      bundleIdentifier,\n    });\n    if (result.status === 0) {\n      await Simulator.ensureSimulatorAppRunningAsync({ udid: device.udid });\n      await Simulator.activateSimulatorWindowAsync();\n    } else {\n      throw new CommandError(\n        `Failed to launch the app on simulator ${device.name} (${device.udid}). Error in \"osascript\" command: ${result.stderr}`\n      );\n    }\n  }\n}\n"],"file":"runIos.js"}