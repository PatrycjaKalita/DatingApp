{"version":3,"sources":["../../../../src/commands/run/ios/XcodeBuild.ts"],"names":["logPrettyItem","message","Log","log","chalk","whiteBright","getProjectBuildSettings","xcodeProject","configuration","sdkName","scheme","args","isWorkspace","name","debug","join","stdout","stdio","JSON","parse","error","warn","match","dim","getAppBinaryPath","buildOutput","CONFIGURATION_BUILD_DIR","extractEnvVariableFromBuild","sort","a","b","length","UNLOCALIZED_RESOURCES_FOLDER_PATH","binaryPath","path","getEscapedPath","filePath","fs","existsSync","unescapedPath","split","Error","variableName","reg","RegExp","matched","matchAll","CommandError","map","value","filter","Boolean","getProcessOptions","packager","shouldSkipInitialBundling","terminal","port","SKIP_BUNDLING","undefined","env","process","RCT_TERMINAL","RCT_METRO_PORT","toString","RCT_NO_LAUNCH_PACKAGER","buildAsync","projectRoot","device","isSimulator","udid","developmentTeamId","push","bold","formatter","ExpoRunFormatter","create","isDebug","Promise","resolve","reject","buildProcess","errorOutput","on","data","stringData","lines","pipe","line","stderr","Buffer","code","AbortCommandError","getBuildSummary","logFilePath","writeBuildLogs","wasErrorPresented","errors","errorTitle","underline","output","mdFilePath","getErrorLogFilePath","writeFileSync","filename","folder","ensureDirSync"],"mappings":"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","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport { ExpoRunFormatter } from '@expo/xcpretty';\nimport chalk from 'chalk';\nimport { spawn, SpawnOptionsWithoutStdio } from 'child_process';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport { SimControl } from 'xdl';\n\nimport CommandError, { AbortCommandError } from '../../../CommandError';\nimport Log from '../../../log';\nimport { ensureDeviceIsCodeSignedForDeploymentAsync } from './developmentCodeSigning';\nimport { ProjectInfo, XcodeConfiguration } from './resolveOptionsAsync';\n\nexport type BuildProps = {\n  projectRoot: string;\n  isSimulator: boolean;\n  xcodeProject: ProjectInfo;\n  device: Pick<SimControl.XCTraceDevice, 'name' | 'udid'>;\n  configuration: XcodeConfiguration;\n  shouldSkipInitialBundling: boolean;\n  shouldStartBundler: boolean;\n  terminal?: string;\n  port: number;\n  scheme: string;\n};\n\ntype XcodeSDKName = 'iphoneos' | 'iphonesimulator';\n\nexport function logPrettyItem(message: string) {\n  Log.log(`${chalk.whiteBright`\\u203A`} ${message}`);\n}\n\nexport async function getProjectBuildSettings(\n  xcodeProject: ProjectInfo,\n  configuration: XcodeConfiguration,\n  sdkName: XcodeSDKName,\n  scheme: string\n) {\n  const args = [\n    xcodeProject.isWorkspace ? '-workspace' : '-project',\n    xcodeProject.name,\n    '-scheme',\n    scheme,\n    '-sdk',\n    sdkName,\n    // getPlatformName(buildOutput),\n    '-configuration',\n    configuration,\n    '-showBuildSettings',\n    '-json',\n  ];\n  Log.debug(`  xcodebuild ${args.join(' ')}`);\n  const { stdout } = await spawnAsync('xcodebuild', args, { stdio: 'pipe' });\n  try {\n    return JSON.parse(stdout);\n  } catch (error) {\n    // This can fail if the xcodebuild command throws a simulator error:\n    // 2021-01-24 14:22:43.802 xcodebuild[73087:14664906]  DVTAssertions: Warning in /Library/Caches/com.apple.xbs/Sources/DVTiOSFrameworks/DVTiOSFrameworks-17705/DTDeviceKitBase/DTDKRemoteDeviceData.m:371\n    Log.warn(error.message);\n    if (error.message.match(/in JSON at position/)) {\n      Log.log(chalk.dim(stdout));\n    }\n    return {};\n  }\n}\n\n/**\n *\n * @returns '/Users/evanbacon/Library/Developer/Xcode/DerivedData/myapp-gpgjqjodrxtervaufttwnsgimhrx/Build/Products/Debug-iphonesimulator/myapp.app'\n */\nexport function getAppBinaryPath(buildOutput: string) {\n  // Matches what's used in \"Bundle React Native code and images\" script.\n  // Requires that `-hideShellScriptEnvironment` is not included in the build command (extra logs).\n\n  // Like `\\=/Users/evanbacon/Library/Developer/Xcode/DerivedData/Exponent-anpuosnglkxokahjhfszejloqfvo/Build/Products/Debug-iphonesimulator`\n  const CONFIGURATION_BUILD_DIR = extractEnvVariableFromBuild(\n    buildOutput,\n    'CONFIGURATION_BUILD_DIR'\n  ).sort(\n    // Longer name means more suffixes, we want the shortest possible one to be first.\n    // Massive projects (like Expo Go) can sometimes print multiple different sets of environment variables.\n    // This can become an issue with some\n    (a, b) => a.length - b.length\n  );\n  // Like `Exponent.app`\n  const UNLOCALIZED_RESOURCES_FOLDER_PATH = extractEnvVariableFromBuild(\n    buildOutput,\n    'UNLOCALIZED_RESOURCES_FOLDER_PATH'\n  );\n\n  const binaryPath = path.join(\n    // Use the shortest defined env variable (usually there's just one).\n    CONFIGURATION_BUILD_DIR[0],\n    // Use the last defined env variable.\n    UNLOCALIZED_RESOURCES_FOLDER_PATH[UNLOCALIZED_RESOURCES_FOLDER_PATH.length - 1]\n  );\n\n  // If the app has a space in the name it'll fail because it isn't escaped properly by Xcode.\n  return getEscapedPath(binaryPath);\n}\n\nexport function getEscapedPath(filePath: string): string {\n  if (fs.existsSync(filePath)) {\n    return filePath;\n  }\n  const unescapedPath = filePath.split(/\\\\ /).join(' ');\n  if (fs.existsSync(unescapedPath)) {\n    return unescapedPath;\n  }\n  throw new Error(\n    `Unexpected: Generated app at path \"${filePath}\" cannot be read, the app cannot be installed. Please report this and build onto a simulator.`\n  );\n}\n\nfunction extractEnvVariableFromBuild(buildOutput: string, variableName: string) {\n  // Xcode can sometimes escape `=` with a backslash or put the value in quotes\n  const reg = new RegExp(`export ${variableName}\\\\\\\\?=(.*)$`, 'mg');\n  const matched = [...buildOutput.matchAll(reg)];\n\n  if (!matched || !matched.length) {\n    throw new CommandError(\n      `Malformed xcodebuild results: \"${variableName}\" variable was not generated in build output. Please report this issue and run your project with Xcode instead.`\n    );\n  }\n  return matched.map(value => value[1]).filter(Boolean) as string[];\n}\n\nfunction getProcessOptions({\n  packager,\n  shouldSkipInitialBundling,\n  terminal,\n  port,\n}: {\n  packager: boolean;\n  shouldSkipInitialBundling?: boolean;\n  terminal: string | undefined;\n  port: number;\n}): SpawnOptionsWithoutStdio {\n  const SKIP_BUNDLING = shouldSkipInitialBundling ? '1' : undefined;\n  if (packager) {\n    return {\n      env: {\n        ...process.env,\n        RCT_TERMINAL: terminal,\n        SKIP_BUNDLING,\n        RCT_METRO_PORT: port.toString(),\n      },\n    };\n  }\n\n  return {\n    env: {\n      ...process.env,\n      RCT_TERMINAL: terminal,\n      SKIP_BUNDLING,\n      // Always skip launching the packager from a build script.\n      // The script is used for people building their project directly from Xcode.\n      // This essentially means \"› Running script 'Start Packager'\" does nothing.\n      RCT_NO_LAUNCH_PACKAGER: 'true',\n      // FORCE_BUNDLING: '0'\n    },\n  };\n}\n\nexport async function buildAsync({\n  projectRoot,\n  xcodeProject,\n  device,\n  configuration,\n  isSimulator,\n  scheme,\n  shouldSkipInitialBundling,\n  terminal,\n  port,\n}: BuildProps): Promise<string> {\n  const args = [\n    xcodeProject.isWorkspace ? '-workspace' : '-project',\n    xcodeProject.name,\n    '-configuration',\n    configuration,\n    '-scheme',\n    scheme,\n    '-destination',\n    `id=${device.udid}`,\n  ];\n\n  if (!isSimulator) {\n    const developmentTeamId = await ensureDeviceIsCodeSignedForDeploymentAsync(projectRoot);\n    if (developmentTeamId) {\n      args.push(\n        `DEVELOPMENT_TEAM=${developmentTeamId}`,\n        '-allowProvisioningUpdates',\n        '-allowProvisioningDeviceRegistration'\n      );\n    }\n  }\n\n  logPrettyItem(chalk.bold`Planning build`);\n  Log.debug(`  xcodebuild ${args.join(' ')}`);\n  const formatter = ExpoRunFormatter.create(projectRoot, {\n    xcodeProject,\n    isDebug: Log.isDebug,\n  });\n\n  return new Promise(async (resolve, reject) => {\n    const buildProcess = spawn(\n      'xcodebuild',\n      args,\n      getProcessOptions({ packager: false, shouldSkipInitialBundling, terminal, port })\n    );\n    let buildOutput = '';\n    let errorOutput = '';\n\n    buildProcess.stdout.on('data', (data: Buffer) => {\n      const stringData = data.toString();\n      buildOutput += stringData;\n\n      const lines = formatter.pipe(stringData);\n      for (const line of lines) {\n        Log.log(line);\n      }\n    });\n\n    buildProcess.stderr.on('data', (data: Buffer) => {\n      const stringData = data instanceof Buffer ? data.toString() : data;\n      errorOutput += stringData;\n    });\n\n    buildProcess.on('close', (code: number) => {\n      Log.debug(`Exited with code: ${code}`);\n\n      if (\n        // User cancelled with ctrl-c\n        code === null ||\n        // Build interrupted\n        code === 75\n      ) {\n        reject(new AbortCommandError());\n        return;\n      }\n\n      Log.log(formatter.getBuildSummary());\n      const logFilePath = writeBuildLogs(projectRoot, buildOutput, errorOutput);\n\n      if (code !== 0) {\n        // Determine if the logger found any errors;\n        const wasErrorPresented = !!formatter.errors.length;\n\n        const errorTitle = `Failed to build iOS project. \"xcodebuild\" exited with error code ${code}.`;\n\n        if (wasErrorPresented) {\n          // This has a flaw, if the user is missing a file, and there is a script error, only the missing file error will be shown.\n          // They will only see the script error if they fix the missing file and rerun.\n          // The flaw can be fixed by catching script errors in the custom logger.\n          reject(new CommandError(errorTitle));\n          return;\n        }\n\n        // Show all the log info because often times the error is coming from a shell script,\n        // that invoked a node script, that started metro, which threw an error.\n        reject(\n          new CommandError(\n            `${errorTitle}\\nTo view more error logs, try building the app with Xcode directly, by opening ${xcodeProject.name}.\\n\\n` +\n              buildOutput +\n              '\\n\\n' +\n              errorOutput +\n              `Build logs written to ${chalk.underline(logFilePath)}`\n          )\n        );\n        return;\n      }\n      resolve(buildOutput);\n    });\n  });\n}\n\nfunction writeBuildLogs(projectRoot: string, buildOutput: string, errorOutput: string) {\n  const output =\n    '# Build output\\n\\n```log\\n' +\n    buildOutput +\n    '\\n```\\n\\n# Error output\\n\\n```log\\n' +\n    errorOutput +\n    '\\n```\\n';\n  const [mdFilePath, logFilePath] = getErrorLogFilePath(projectRoot);\n\n  fs.writeFileSync(mdFilePath, output);\n  fs.writeFileSync(logFilePath, buildOutput);\n  return mdFilePath;\n}\n\nfunction getErrorLogFilePath(projectRoot: string): [string, string] {\n  const filename = 'xcodebuild.md';\n  const folder = path.join(projectRoot, '.expo');\n  fs.ensureDirSync(folder);\n  return [path.join(folder, filename), path.join(folder, 'xcodebuild-output.log')];\n}\n"],"file":"XcodeBuild.js"}