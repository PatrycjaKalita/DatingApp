{"version":3,"sources":["../../../../src/commands/run/ios/resolveDeviceAsync.ts"],"names":["getBuildDestinationsAsync","osType","devices","SimControl","listDevicesAsync","filter","device","deviceType","simulators","Simulator","sortDefaultDeviceToBeginningAsync","listSimulatorDevicesAsync","resolveDeviceAsync","ensureXcodeCommandLineToolsInstalledAsync","CommandError","simulator","ensureSimulatorOpenAsync","Log","debug","name","udid","spinner","chalk","cyan","start","catch","stop","value","type","limit","message","choices","map","item","isConnected","isActive","state","symbol","format","bold","text","title","osVersion","dim","suggest","input","regex","RegExp","choice","test","log","find","isSimulator","startsWith","searchValue","toLowerCase","resolved"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { SimControl, Simulator } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport prompt from '../../../prompts';\nimport { ora } from '../../../utils/ora';\nimport { profileMethod } from '../../utils/profileMethod';\n\nasync function getBuildDestinationsAsync({ osType }: { osType?: string } = {}) {\n  const devices = (\n    await profileMethod(SimControl.listDevicesAsync, 'SimControl.listDevicesAsync')()\n  ).filter(device => {\n    return device.deviceType === 'device';\n  });\n\n  const simulators = await Simulator.sortDefaultDeviceToBeginningAsync(\n    await profileMethod(SimControl.listSimulatorDevicesAsync)(),\n    osType\n  );\n\n  return [...devices, ...simulators];\n}\n\nexport async function resolveDeviceAsync(\n  device?: string | boolean,\n  { osType }: { osType?: string } = {}\n): Promise<SimControl.SimulatorDevice | SimControl.XCTraceDevice> {\n  if (!(await profileMethod(Simulator.ensureXcodeCommandLineToolsInstalledAsync)())) {\n    throw new CommandError('Unable to verify Xcode and Simulator installation.');\n  }\n\n  if (!device) {\n    const simulator = await profileMethod(\n      Simulator.ensureSimulatorOpenAsync,\n      'Simulator.ensureSimulatorOpenAsync'\n    )({ osType });\n    Log.debug(`Resolved default (${osType}) device:`, simulator.name, simulator.udid);\n    return simulator;\n  }\n\n  const spinner = ora(\n    `🔍 Finding ${device === true ? 'devices' : `device ${chalk.cyan(device)}`}`\n  ).start();\n  let devices: (SimControl.SimulatorDevice | SimControl.XCTraceDevice)[] = await profileMethod(\n    getBuildDestinationsAsync\n  )({ osType }).catch(() => []);\n\n  spinner.stop();\n\n  if (device === true) {\n    // If osType is defined, then filter out ineligible simulators.\n    // Only do this inside of the device selection so users who pass the entire device udid can attempt to select any simulator (even if it's invalid).\n    if (osType) {\n      devices = devices.filter(device => {\n        // connected device\n        if (!('osType' in device)) {\n          return true;\n        }\n        return device.osType === osType;\n      });\n    }\n\n    // --device with no props after\n    const { value } = await prompt({\n      type: 'autocomplete',\n      name: 'value',\n      limit: 11,\n      message: 'Select a simulator',\n      choices: devices.map(item => {\n        const isConnected = 'deviceType' in item && item.deviceType === 'device';\n        const isActive = 'state' in item && item.state === 'Booted';\n        const symbol = isConnected ? '🔌 ' : '';\n        const format = isActive ? chalk.bold : (text: string) => text;\n        return {\n          title: `${symbol}${format(item.name)}${\n            item.osVersion ? chalk.dim(` (${item.osVersion})`) : ''\n          }`,\n          value: item.udid,\n        };\n      }),\n      suggest: (input: any, choices: any) => {\n        const regex = new RegExp(input, 'i');\n        return choices.filter((choice: any) => regex.test(choice.title));\n      },\n    });\n    Log.log(chalk.dim`\\u203A Using --device ${value}`);\n    const device = devices.find(device => device.udid === value)!;\n    const isSimulator =\n      !('deviceType' in device) ||\n      device.deviceType.startsWith('com.apple.CoreSimulator.SimDeviceType.');\n    if (isSimulator) {\n      return await Simulator.ensureSimulatorOpenAsync({ udid: device.udid });\n    }\n    return device;\n  }\n  const searchValue = device.toLowerCase();\n  const resolved = devices.find(device => {\n    return device.udid.toLowerCase() === searchValue || device.name.toLowerCase() === searchValue;\n  });\n\n  if (!resolved) {\n    throw new CommandError(`No device UDID or name matching \"${device}\"`);\n  }\n\n  const isSimulator =\n    !('deviceType' in resolved) ||\n    resolved.deviceType.startsWith('com.apple.CoreSimulator.SimDeviceType.');\n  if (isSimulator) {\n    return await Simulator.ensureSimulatorOpenAsync({ udid: resolved.udid });\n  }\n\n  return resolved;\n}\n"],"file":"resolveDeviceAsync.js"}