{"version":3,"sources":["../../../../src/commands/run/android/runAndroid.ts"],"names":["resolveAndroidProjectPathAsync","projectRoot","AndroidConfig","Paths","getProjectPathOrThrowAsync","install","platforms","attemptToGetApplicationIdFromGradleAsync","applicationIdFromGradle","Package","getApplicationIdAsync","Log","debug","resolveOptionsAsync","options","variant","CommandError","device","filePath","getAndroidManifestAsync","androidManifest","Manifest","readAndroidManifestAsync","activity","getRunnableActivity","mainActivity","$","packageName","manifest","package","port","bundler","defaultPort","reuseExistingPort","toLowerCase","apkDirectory","Android","getAPKDirectory","apkVariantDirectory","path","join","launchActivity","variantFolder","appName","actionAsync","promptToClearMalformedNativeProjectsAsync","exp","skipSDKVersionRequirement","track","androidProjectPath","props","log","metroPort","apkFile","getInstallApkNameAsync","binaryPath","installOnDeviceAsync","schemes","length","scheme","name","result","openProjectAsync","devClient","success","error","message","startAdbReverseAsync","openAppAsync","nested","chalk","dim","UnifiedAnalytics","logEvent","status","platform","StatusEventEmitter","once","flush","availableCPUs","getDeviceABIsAsync","push","DeviceABI","universal","availableCPU","apkName","fs","existsSync"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { AndroidConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport { Android, UnifiedAnalytics } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport StatusEventEmitter from '../../../StatusEventEmitter';\nimport getDevClientProperties from '../../../analytics/getDevClientProperties';\nimport Log from '../../../log';\nimport { getSchemesForAndroidAsync } from '../../../schemes';\nimport { promptToClearMalformedNativeProjectsAsync } from '../../eject/clearNativeFolder';\nimport { prebuildAsync } from '../../eject/prebuildAsync';\nimport { installCustomExitHook } from '../../start/installExitHooks';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { startBundlerAsync } from '../ios/startBundlerAsync';\nimport { isDevMenuInstalled } from '../utils/isDevMenuInstalled';\nimport { resolvePortAsync } from '../utils/resolvePortAsync';\nimport { resolveDeviceAsync } from './resolveDeviceAsync';\nimport { spawnGradleAsync } from './spawnGradleAsync';\n\ntype Options = {\n  variant: string;\n  device?: boolean | string;\n  port?: number;\n  bundler?: boolean;\n};\n\nexport type AndroidRunOptions = Omit<Options, 'device'> & {\n  apkVariantDirectory: string;\n  packageName: string;\n  mainActivity: string;\n  launchActivity: string;\n  device: Android.Device;\n  variantFolder: string;\n  appName: string;\n};\n\nasync function resolveAndroidProjectPathAsync(projectRoot: string): Promise<string> {\n  try {\n    return await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n  } catch {\n    // If the project doesn't have native code, prebuild it...\n    await prebuildAsync(projectRoot, {\n      install: true,\n      platforms: ['android'],\n    });\n    return await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n  }\n}\n\nasync function attemptToGetApplicationIdFromGradleAsync(projectRoot: string) {\n  try {\n    const applicationIdFromGradle = await AndroidConfig.Package.getApplicationIdAsync(projectRoot);\n    if (applicationIdFromGradle) {\n      Log.debug('Found Application ID in Gradle: ' + applicationIdFromGradle);\n      return applicationIdFromGradle;\n    }\n  } catch {}\n  return null;\n}\n\nasync function resolveOptionsAsync(\n  projectRoot: string,\n  options: Options\n): Promise<AndroidRunOptions> {\n  if (typeof options.variant !== 'string') {\n    throw new CommandError('--variant must be a string');\n  }\n  const device = await resolveDeviceAsync(options.device);\n  if (!device) {\n    throw new CommandError('Cannot resolve an Android device');\n  }\n\n  const filePath = await AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(filePath);\n\n  // Assert MainActivity defined.\n  const activity = await AndroidConfig.Manifest.getRunnableActivity(androidManifest);\n  if (!activity) {\n    throw new CommandError(`${filePath} is missing a runnable activity element.`);\n  }\n  // Often this is \".MainActivity\"\n  const mainActivity = activity.$['android:name'];\n  const packageName =\n    // Try to get the application identifier from the gradle before checking the package name in the manifest.\n    (await attemptToGetApplicationIdFromGradleAsync(projectRoot)) ??\n    androidManifest.manifest.$.package;\n\n  if (!packageName) {\n    throw new CommandError(`Could not find package name in AndroidManifest.xml at \"${filePath}\"`);\n  }\n\n  let port = options.bundler\n    ? await resolvePortAsync(projectRoot, { defaultPort: options.port, reuseExistingPort: true })\n    : null;\n  options.bundler = !!port;\n  if (!port) {\n    // Skip bundling if the port is null\n    // any random number\n    port = 8081;\n  }\n\n  const variant = options.variant.toLowerCase();\n  const apkDirectory = Android.getAPKDirectory(projectRoot);\n  const apkVariantDirectory = path.join(apkDirectory, variant);\n\n  return {\n    ...options,\n    port,\n    device,\n    mainActivity,\n    launchActivity: `${packageName}/${mainActivity}`,\n    packageName,\n    apkVariantDirectory,\n    variantFolder: variant,\n    appName: 'app',\n  };\n}\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  // If the user has an empty android folder then the project won't build, this can happen when they delete the prebuild files in git.\n  // Check to ensure most of the core files are in place, and prompt to remove the folder if they aren't.\n  await profileMethod(promptToClearMalformedNativeProjectsAsync)(projectRoot, ['android']);\n\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  track(projectRoot, exp);\n\n  const androidProjectPath = await resolveAndroidProjectPathAsync(projectRoot);\n\n  const props = await resolveOptionsAsync(projectRoot, options);\n\n  Log.log('\\u203A Building app...');\n\n  await spawnGradleAsync({ androidProjectPath, variant: options.variant });\n\n  if (props.bundler) {\n    await startBundlerAsync(projectRoot, {\n      metroPort: props.port,\n    });\n  }\n\n  const apkFile = await getInstallApkNameAsync(props.device, props);\n  Log.debug(`\\u203A Installing: ${apkFile}`);\n\n  const binaryPath = path.join(props.apkVariantDirectory, apkFile);\n  await Android.installOnDeviceAsync(props.device, { binaryPath });\n\n  const schemes = await getSchemesForAndroidAsync(projectRoot);\n\n  if (\n    // If the dev-menu is installed, then deep link directly into the app so the user never sees the switcher screen.\n    isDevMenuInstalled(projectRoot) &&\n    // Ensure the app can handle custom URI schemes before attempting to deep link.\n    // This can happen when someone manually removes all URI schemes from the native app.\n    schemes.length\n  ) {\n    // TODO: set to ensure TerminalUI uses this same scheme.\n    const scheme = schemes[0];\n    Log.debug(`Deep linking into device: ${props.device.name}, using scheme: ${scheme}`);\n    const result = await Android.openProjectAsync({\n      projectRoot,\n      device: props.device,\n      devClient: true,\n      scheme,\n    });\n    if (!result.success) {\n      // TODO: Maybe fallback on using the package name.\n      throw new CommandError(\n        typeof result.error === 'string' ? result.error : result.error.message\n      );\n    }\n  } else {\n    Log.debug(\n      `Opening app on device via package name: ${props.device.name}. Launch: ${props.launchActivity}`\n    );\n    // For now, just open the app with a matching package name\n    await Android.startAdbReverseAsync(projectRoot);\n    await Android.openAppAsync(props.device, {\n      launchActivity: props.launchActivity,\n    });\n  }\n\n  if (props.bundler) {\n    // TODO: unify logs\n    Log.nested(`\\nLogs for your project will appear below. ${chalk.dim(`Press Ctrl+C to exit.`)}`);\n  }\n}\n\nfunction track(projectRoot: string, exp: ExpoConfig) {\n  UnifiedAnalytics.logEvent('dev client run command', {\n    status: 'started',\n    platform: 'android',\n    ...getDevClientProperties(projectRoot, exp),\n  });\n  StatusEventEmitter.once('bundleBuildFinish', () => {\n    // Send the 'bundle ready' event once the JS has been built.\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'bundle ready',\n      platform: 'android',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  });\n  StatusEventEmitter.once('deviceLogReceive', () => {\n    // Send the 'ready' event once the app is running in a device.\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'ready',\n      platform: 'android',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  });\n  installCustomExitHook(() => {\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'finished',\n      platform: 'android',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n    UnifiedAnalytics.flush();\n  });\n}\n\nasync function getInstallApkNameAsync(\n  device: Android.Device,\n  {\n    appName,\n    variantFolder,\n    apkVariantDirectory,\n  }: Pick<AndroidRunOptions, 'appName' | 'variantFolder' | 'apkVariantDirectory'>\n) {\n  const availableCPUs = await Android.getDeviceABIsAsync(device);\n  availableCPUs.push(Android.DeviceABI.universal);\n\n  Log.debug('Supported ABIs: ' + availableCPUs.join(', '));\n  Log.debug('Searching for APK: ' + apkVariantDirectory);\n\n  // Check for cpu specific builds first\n  for (const availableCPU of availableCPUs) {\n    const apkName = `${appName}-${availableCPU}-${variantFolder}.apk`;\n    if (fs.existsSync(path.join(apkVariantDirectory, apkName))) {\n      return apkName;\n    }\n  }\n\n  // Otherwise use the default apk named after the variant: app-debug.apk\n  const apkName = `${appName}-${variantFolder}.apk`;\n  if (fs.existsSync(path.join(apkVariantDirectory, apkName))) {\n    return apkName;\n  }\n\n  throw new CommandError(`Failed to resolve APK build file in folder \"${apkVariantDirectory}\"`);\n}\n"],"file":"runAndroid.js"}