{"version":3,"sources":["../../../src/commands/client/clientIosAsync.ts"],"names":["actionAsync","projectRoot","options","disabledServices","pushNotifications","name","reason","spinner","start","config","exp","skipSDKVersionRequirement","succeed","warn","ios","facebookAppId","facebookScheme","disabledReason","facebookLogin","googleMapsApiKey","googleMaps","googleServicesFile","contents","fs","readFile","path","resolve","user","UserManager","getCurrentUserAsync","context","Context","init","allowAnonymous","nonInteractive","parent","ensureAppleCtx","appleContext","appleCtx","getAllCredentials","projectOwner","isAllowed","errorMessage","appleTeamId","team","id","CommandError","bundleIdentifier","experienceName","appLookupParams","appleApi","ensureBundleIdExistsAsync","enablePushNotifications","requestContext","devices","Device","getAllIOSProfileDevicesAsync","udids","map","device","attributes","udid","distributionCert","SetupIosDist","getDistCert","CreateIosDist","accountName","provideOrGenerate","pushKey","SetupIosPush","getPushKey","provisioningProfile","createOrReuseProfile","CreateOrReuseProvisioningProfileAdhoc","distCertSerialNumber","getProvisioningProfile","createOrReuse","Object","keys","length","Log","newLine","table","CliTable","head","style","push","serviceKey","service","log","toString","email","kind","message","initial","addUdid","udidPrompt","result","customAppConfig","urlOpts","printQRCode","registrationUrl","chalk","green","statusUrl"],"mappings":"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","sourcesContent":["import { Device } from '@expo/apple-utils';\nimport { getConfig, setCustomConfigPath } from '@expo/config';\nimport chalk from 'chalk';\nimport CliTable from 'cli-table3';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { User, UserManager } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport * as appleApi from '../../appleApi';\nimport { getRequestContext } from '../../appleApi';\nimport { getAppLookupParams } from '../../credentials/api/IosApi';\nimport { Context } from '../../credentials/context';\nimport { runCredentialsManager } from '../../credentials/route';\nimport { CreateIosDist } from '../../credentials/views/IosDistCert';\nimport { CreateOrReuseProvisioningProfileAdhoc } from '../../credentials/views/IosProvisioningProfileAdhoc';\nimport { SetupIosDist } from '../../credentials/views/SetupIosDist';\nimport { SetupIosPush } from '../../credentials/views/SetupIosPush';\nimport Log from '../../log';\nimport { confirmAsync, promptEmailAsync } from '../../prompts';\nimport urlOpts from '../../urlOpts';\nimport { ora } from '../../utils/ora';\nimport { createClientBuildRequest, getExperienceName, isAllowedToBuild } from './clientBuildApi';\nimport generateBundleIdentifier from './generateBundleIdentifier';\n\nexport async function actionAsync(\n  projectRoot: string,\n  options: {\n    appleId?: string;\n    config?: string;\n    parent?: {\n      nonInteractive: boolean;\n    };\n  }\n) {\n  const disabledServices: { [key: string]: { name: string; reason: string } } = {\n    pushNotifications: {\n      name: 'Push Notifications',\n      reason: 'not yet available until API tokens are supported for the Push Notification system',\n    },\n  };\n\n  // get custom project manifest if it exists\n  // Note: this is the current developer's project, NOT Expo Go's manifest\n  const spinner = ora(`Finding custom configuration for Expo Go...`).start();\n  if (options.config) {\n    setCustomConfigPath(projectRoot, options.config);\n  }\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  if (exp) {\n    spinner.succeed(`Found custom configuration for Expo Go`);\n  } else {\n    spinner.warn(`Unable to find custom configuration for Expo Go`);\n  }\n  if (!exp.ios) exp.ios = {};\n\n  if (!exp.facebookAppId || !exp.facebookScheme) {\n    const disabledReason = exp\n      ? `facebookAppId or facebookScheme are missing from app configuration. `\n      : 'No custom configuration file could be found. You will need to provide a json file with valid facebookAppId and facebookScheme fields.';\n    disabledServices.facebookLogin = { name: 'Facebook Login', reason: disabledReason };\n  }\n  if (!exp.ios.config?.googleMapsApiKey) {\n    const disabledReason = exp\n      ? `ios.config.googleMapsApiKey does not exist in the app configuration.`\n      : 'No custom configuration file could be found. You will need to provide a json file with a valid ios.config.googleMapsApiKey field.';\n    disabledServices.googleMaps = { name: 'Google Maps', reason: disabledReason };\n  }\n  if (exp.ios.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, exp.ios.googleServicesFile!),\n      'base64'\n    );\n    exp.ios.googleServicesFile = contents;\n  }\n\n  const user = await UserManager.getCurrentUserAsync();\n  const context = new Context();\n  await context.init(projectRoot, {\n    ...options,\n    allowAnonymous: true,\n    nonInteractive: options.parent?.nonInteractive,\n  });\n  await context.ensureAppleCtx();\n  const appleContext = context.appleCtx;\n  if (user) {\n    await context.ios.getAllCredentials(context.projectOwner); // initialize credentials\n  }\n\n  // check if any builds are in flight\n  const { isAllowed, errorMessage } = await isAllowedToBuild({\n    user,\n    appleTeamId: appleContext.team.id,\n  });\n\n  if (!isAllowed) {\n    throw new CommandError(\n      'CLIENT_BUILD_REQUEST_NOT_ALLOWED',\n      `New Expo Go build request disallowed. Reason: ${errorMessage}`\n    );\n  }\n\n  const bundleIdentifier = generateBundleIdentifier(appleContext.team.id);\n  const experienceName = await getExperienceName({ user, appleTeamId: appleContext.team.id });\n  const appLookupParams = getAppLookupParams(experienceName, bundleIdentifier);\n\n  await appleApi.ensureBundleIdExistsAsync(appleContext, appLookupParams, {\n    enablePushNotifications: true,\n  });\n\n  const requestContext = getRequestContext(appleContext);\n  const devices = await Device.getAllIOSProfileDevicesAsync(requestContext);\n  const udids = devices.map(device => device.attributes.udid);\n\n  let distributionCert;\n  if (user) {\n    await runCredentialsManager(context, new SetupIosDist(appLookupParams));\n    distributionCert = await context.ios.getDistCert(appLookupParams);\n  } else {\n    distributionCert = await new CreateIosDist(appLookupParams.accountName).provideOrGenerate(\n      context\n    );\n  }\n  if (!distributionCert) {\n    throw new CommandError(\n      'INSUFFICIENT_CREDENTIALS',\n      `This build request requires a valid distribution certificate.`\n    );\n  }\n\n  let pushKey;\n  if (user) {\n    await runCredentialsManager(context, new SetupIosPush(appLookupParams));\n    pushKey = await context.ios.getPushKey(appLookupParams);\n  }\n\n  let provisioningProfile;\n  const createOrReuseProfile = new CreateOrReuseProvisioningProfileAdhoc(appLookupParams, {\n    distCertSerialNumber: distributionCert.distCertSerialNumber!,\n    udids,\n  });\n  if (user) {\n    await runCredentialsManager(context, createOrReuseProfile);\n    provisioningProfile = await context.ios.getProvisioningProfile(appLookupParams);\n  } else {\n    provisioningProfile = await createOrReuseProfile.createOrReuse(context);\n  }\n  if (!provisioningProfile) {\n    throw new CommandError(\n      'INSUFFICIENT_CREDENTIALS',\n      `This build request requires a valid provisioning profile.`\n    );\n  }\n\n  // push notifications won't work if we dont have any push creds\n  // we also dont store anonymous creds, so user needs to be logged in\n  if (pushKey === null || !user) {\n    const disabledReason =\n      pushKey === null\n        ? 'you did not upload your push credentials'\n        : 'we require you to be logged in to store push credentials';\n    // TODO(quin): remove this when we fix push notifications\n    // keep the default push notification reason if we haven't implemented API tokens\n    disabledServices.pushNotifications.reason =\n      disabledServices.pushNotifications.reason || disabledReason;\n  }\n\n  if (Object.keys(disabledServices).length > 0) {\n    Log.newLine();\n    Log.warn('These services will be disabled in your custom Expo Go app:');\n    const table = new CliTable({ head: ['Service', 'Reason'], style: { head: ['cyan'] } });\n    table.push(\n      ...Object.keys(disabledServices).map(serviceKey => {\n        const service = disabledServices[serviceKey];\n        return [service.name, service.reason];\n      })\n    );\n    Log.log(table.toString());\n    Log.log(\n      'See https://docs.expo.dev/guides/adhoc-builds/#optional-additional-configuration-steps for more details.'\n    );\n  }\n\n  let email;\n  if (user && user.kind === 'user') {\n    email = user.email;\n  } else {\n    email = await promptEmailAsync({\n      message: 'Please enter an email address to notify, when the build is completed:',\n      initial: (context?.user as User)?.email,\n    });\n  }\n  Log.newLine();\n\n  let addUdid;\n  if (udids.length === 0) {\n    Log.log(\n      'There are no devices registered to your Apple Developer account. Please follow the instructions below to register an iOS device.'\n    );\n    addUdid = true;\n  } else {\n    Log.log(\n      'Custom builds of Expo Go can only be installed on devices which have been registered with Apple at build-time.'\n    );\n    Log.log('These devices are currently registered on your Apple Developer account:');\n    const table = new CliTable({ head: ['Name', 'Identifier'], style: { head: ['cyan'] } });\n    table.push(...devices.map(device => [device.attributes.name, device.attributes.udid]));\n    Log.log(table.toString());\n\n    const udidPrompt = await confirmAsync({\n      message: 'Would you like to register a new device to use Expo Go with?',\n    });\n    addUdid = udidPrompt;\n  }\n\n  const result = await createClientBuildRequest({\n    user,\n    appleContext,\n    distributionCert,\n    provisioningProfile,\n    pushKey,\n    udids,\n    addUdid,\n    email,\n    bundleIdentifier,\n    customAppConfig: exp,\n  });\n\n  Log.newLine();\n  if (addUdid) {\n    urlOpts.printQRCode(result.registrationUrl);\n    Log.log(\n      'Open the following link on your iOS device (or scan the QR code) and follow the instructions to install the development profile:'\n    );\n    Log.newLine();\n    Log.log(chalk.green(`${result.registrationUrl}`));\n    Log.newLine();\n    Log.log('Please note that you can only register one iOS device per request.');\n    Log.log(\n      \"After you register your device, we'll start building your client, and you'll receive an email when it's ready to install.\"\n    );\n  } else {\n    urlOpts.printQRCode(result.statusUrl);\n    Log.log('Your custom Expo Go app is being built! 🛠');\n    Log.log(\n      'Open this link on your iOS device (or scan the QR code) to view build logs and install the client:'\n    );\n    Log.newLine();\n    Log.log(chalk.green(`${result.statusUrl}`));\n  }\n  Log.newLine();\n}\n"],"file":"clientIosAsync.js"}