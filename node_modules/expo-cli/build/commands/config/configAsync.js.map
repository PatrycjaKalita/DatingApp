{"version":3,"sources":["../../../src/commands/config/configAsync.ts"],"names":["actionAsync","projectRoot","options","config","type","getPrebuildConfig","platforms","exp","introspect","assertMissingModProviders","modRequest","modResults","getConfig","skipSDKVersionRequirement","isPublicConfig","CommandError","Log","log","full"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAOO,eAAeA,WAAf,CAA2BC,WAA3B,EAAgDC,OAAhD,EAAkE;AACvE,MAAIC,MAAJ;;AAEA,MAAID,OAAO,CAACE,IAAR,KAAiB,UAArB,EAAiC;AAC/BD,IAAAA,MAAM,GAAG,oCAAcE,mCAAd,EAAiCJ,WAAjC,EAA8C;AACrDK,MAAAA,SAAS,EAAE,CAAC,KAAD,EAAQ,SAAR;AAD0C,KAA9C,CAAT;AAGD,GAJD,MAIO,IAAIJ,OAAO,CAACE,IAAR,KAAiB,YAArB,EAAmC;AACxCD,IAAAA,MAAM,GAAG,oCAAcE,mCAAd,EAAiCJ,WAAjC,EAA8C;AACrDK,MAAAA,SAAS,EAAE,CAAC,KAAD,EAAQ,SAAR;AAD0C,KAA9C,CAAT;AAIA,UAAM,qCAAiBH,MAAM,CAACI,GAAxB,EAA6B;AACjCN,MAAAA,WADiC;AAEjCO,MAAAA,UAAU,EAAE,IAFqB;AAGjCF,MAAAA,SAAS,EAAE,CAAC,KAAD,EAAQ,SAAR,CAHsB;AAIjCG,MAAAA,yBAAyB,EAAE;AAJM,KAA7B,CAAN,CALwC,CAWxC;;AACA,WAAON,MAAM,CAACO,UAAd,CAZwC,CAaxC;;AACA,WAAOP,MAAM,CAACQ,UAAd;AACD,GAfM,MAeA,IAAIT,OAAO,CAACE,IAAR,KAAiB,QAArB,EAA+B;AACpCD,IAAAA,MAAM,GAAG,oCAAcS,mBAAd,EAAyBX,WAAzB,EAAsC;AAC7CY,MAAAA,yBAAyB,EAAE,IADkB;AAE7CC,MAAAA,cAAc,EAAE;AAF6B,KAAtC,CAAT;AAID,GALM,MAKA,IAAIZ,OAAO,CAACE,IAAZ,EAAkB;AACvB,UAAM,KAAIW,uBAAJ,EACH,0BAAyBb,OAAO,CAACE,IAAK,uCADnC,CAAN;AAGD,GAJM,MAIA;AACLD,IAAAA,MAAM,GAAG,oCAAcS,mBAAd,EAAyBX,WAAzB,EAAsC;AAC7CY,MAAAA,yBAAyB,EAAE;AADkB,KAAtC,CAAT;AAGD;;AAEDG,iBAAIC,GAAJ;;AACA,0CAAUf,OAAO,CAACgB,IAAR,GAAef,MAAf,GAAwBA,MAAM,CAACI,GAAzC;;AACAS,iBAAIC,GAAJ;AACD","sourcesContent":["import { getConfig, ProjectConfig } from '@expo/config';\nimport { compileModsAsync } from '@expo/config-plugins/build/plugins/mod-compiler';\nimport { getPrebuildConfig } from '@expo/prebuild-config';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport { logConfig } from '../eject/configureProjectAsync';\nimport { profileMethod } from '../utils/profileMethod';\n\ntype Options = {\n  type?: string;\n  full: boolean;\n};\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  let config: ProjectConfig;\n\n  if (options.type === 'prebuild') {\n    config = profileMethod(getPrebuildConfig)(projectRoot, {\n      platforms: ['ios', 'android'],\n    });\n  } else if (options.type === 'introspect') {\n    config = profileMethod(getPrebuildConfig)(projectRoot, {\n      platforms: ['ios', 'android'],\n    });\n\n    await compileModsAsync(config.exp, {\n      projectRoot,\n      introspect: true,\n      platforms: ['ios', 'android'],\n      assertMissingModProviders: false,\n    });\n    // @ts-ignore\n    delete config.modRequest;\n    // @ts-ignore\n    delete config.modResults;\n  } else if (options.type === 'public') {\n    config = profileMethod(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n      isPublicConfig: true,\n    });\n  } else if (options.type) {\n    throw new CommandError(\n      `Invalid option: --type ${options.type}. Valid options are: public, prebuild`\n    );\n  } else {\n    config = profileMethod(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n    });\n  }\n\n  Log.log();\n  logConfig(options.full ? config : config.exp);\n  Log.log();\n}\n"],"file":"configAsync.js"}