{"version":3,"sources":["../../../src/commands/start/startAsync.ts"],"names":["actionAsync","projectRoot","options","Log","log","chalk","gray","devClient","hasExpoInstalled","resolveFrom","silent","ConfigError","exp","pkg","getConfig","skipSDKVersionRequirement","webOnly","track","urlOpts","optsAsync","rootPath","path","resolve","tryOpeningDevToolsAsync","Versions","gteSdkVersion","ensureTypeScriptSetupAsync","validateDependenciesVersionsAsync","assertProjectHasExpoExtensionFilesAsync","startOptions","parseStartOptions","Project","startAsync","url","UrlUtils","constructDeepLinkAsync","recipient","sendTo","getRecipient","sendUrlAsync","handleMobileOptsAsync","isTerminalUIEnabled","nonInteractive","isDetached","TerminalUI","newLine","printQRCode","underline","nested","dim","UnifiedAnalytics","logEvent","status","platform","flush"],"mappings":"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","sourcesContent":["import { ConfigError, ExpoConfig, getConfig, isLegacyImportsEnabled } from '@expo/config';\nimport chalk from 'chalk';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport { Project, UnifiedAnalytics, UrlUtils, Versions } from 'xdl';\n\nimport getDevClientProperties from '../../analytics/getDevClientProperties';\nimport Log from '../../log';\nimport * as sendTo from '../../sendTo';\nimport urlOpts from '../../urlOpts';\nimport { assertProjectHasExpoExtensionFilesAsync } from '../utils/deprecatedExtensionWarnings';\nimport { profileMethod } from '../utils/profileMethod';\nimport { ensureTypeScriptSetupAsync } from '../utils/typescript/ensureTypeScriptSetup';\nimport { validateDependenciesVersionsAsync } from '../utils/validateDependenciesVersions';\nimport * as TerminalUI from './TerminalUI';\nimport { installCustomExitHook, installExitHooks } from './installExitHooks';\nimport { tryOpeningDevToolsAsync } from './openDevTools';\nimport { NormalizedOptions, parseStartOptions } from './parseStartOptions';\n\nexport async function actionAsync(projectRoot: string, options: NormalizedOptions): Promise<void> {\n  Log.log(chalk.gray(`Starting project at ${projectRoot}`));\n\n  // Add clean up hooks\n  installExitHooks(projectRoot);\n\n  // Only validate expo in Expo Go contexts\n  if (!options.devClient) {\n    // Find expo binary in project/workspace node_modules\n    const hasExpoInstalled = resolveFrom.silent(projectRoot, 'expo');\n    if (!hasExpoInstalled) {\n      throw new ConfigError(\n        `Unable to find expo in this project - have you run yarn / npm install yet?`,\n        'MODULE_NOT_FOUND'\n      );\n    }\n  }\n\n  const { exp, pkg } = profileMethod(getConfig)(projectRoot, {\n    skipSDKVersionRequirement: options.webOnly || options.devClient,\n  });\n\n  if (options.devClient) {\n    track(projectRoot, exp);\n  }\n\n  // Assert various random things\n  // TODO: split up this method\n  await profileMethod(urlOpts.optsAsync)(projectRoot, options);\n\n  // TODO: This is useless on mac, check if useless on win32\n  const rootPath = path.resolve(projectRoot);\n\n  // Optionally open the developer tools UI.\n  await profileMethod(tryOpeningDevToolsAsync)(rootPath, {\n    exp,\n    options,\n  });\n\n  if (Versions.gteSdkVersion(exp, '34.0.0')) {\n    await profileMethod(ensureTypeScriptSetupAsync)(projectRoot);\n  }\n\n  if (!options.webOnly) {\n    // TODO: only validate dependencies if starting in managed workflow\n    await profileMethod(validateDependenciesVersionsAsync)(projectRoot, exp, pkg);\n    // Warn about expo extensions.\n    if (!isLegacyImportsEnabled(exp)) {\n      // Adds a few seconds in basic projects so we should\n      // drop this in favor of the upgrade version as soon as possible.\n      await profileMethod(assertProjectHasExpoExtensionFilesAsync)(projectRoot);\n    }\n  }\n\n  const startOptions = profileMethod(parseStartOptions)(options, exp);\n\n  await profileMethod(Project.startAsync)(rootPath, { ...startOptions, exp });\n\n  // Send to option...\n  const url = await profileMethod(\n    UrlUtils.constructDeepLinkAsync,\n    'UrlUtils.constructDeepLinkAsync'\n  )(projectRoot);\n  const recipient = await profileMethod(sendTo.getRecipient)(options.sendTo);\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  }\n\n  // Open project on devices.\n  await profileMethod(urlOpts.handleMobileOptsAsync)(projectRoot, options);\n\n  // Present the Terminal UI.\n  const isTerminalUIEnabled = !options.nonInteractive && !exp.isDetached;\n\n  if (isTerminalUIEnabled) {\n    await profileMethod(TerminalUI.startAsync, 'TerminalUI.startAsync')(projectRoot, startOptions);\n  } else {\n    if (!exp.isDetached) {\n      Log.newLine();\n      urlOpts.printQRCode(url);\n    }\n    Log.log(`Your native app is running at ${chalk.underline(url)}`);\n  }\n\n  // Final note about closing the server.\n  if (!options.webOnly) {\n    Log.nested(`Logs for your project will appear below. ${chalk.dim(`Press Ctrl+C to exit.`)}`);\n  } else {\n    Log.nested(\n      `\\nLogs for your project will appear in the browser console. ${chalk.dim(\n        `Press Ctrl+C to exit.`\n      )}`\n    );\n  }\n  if (options.devClient) {\n    UnifiedAnalytics.logEvent('dev client start command', {\n      status: 'ready',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  }\n}\n\nfunction track(projectRoot: string, exp: ExpoConfig) {\n  UnifiedAnalytics.logEvent('dev client start command', {\n    status: 'started',\n    platform: 'ios',\n    ...getDevClientProperties(projectRoot, exp),\n  });\n  installCustomExitHook(() => {\n    UnifiedAnalytics.logEvent('dev client start command', {\n      status: 'finished',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n    UnifiedAnalytics.flush();\n  });\n}\n"],"file":"startAsync.js"}