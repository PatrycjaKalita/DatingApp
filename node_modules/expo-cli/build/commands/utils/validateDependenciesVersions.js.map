{"version":3,"sources":["../../../src/commands/utils/validateDependenciesVersions.ts"],"names":["validateDependenciesVersionsAsync","projectRoot","exp","pkg","Versions","gteSdkVersion","bundledNativeModules","sdkVersion","Log","warn","chalk","bold","packagesToCheck","getPackagesToCheck","dependencies","packageVersions","resolvePackageVersionsAsync","incorrectDeps","findIncorrectDependencies","length","forEach","packageName","expectedVersionOrRange","actualVersion","underline","inverse","dependencyNames","Object","keys","result","dependencyName","push","packages","packageVersionsFromPackageJSON","Promise","all","map","getPackageVersionAsync","reduce","acc","idx","packageJsonPath","resolveFrom","silent","CommandError","packageJson","JsonFile","readAsync","version","semver","intersects"],"mappings":"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","sourcesContent":["import { ExpoConfig, PackageJSONConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\nimport { Versions } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport { BundledNativeModules, getBundledNativeModulesAsync } from './bundledNativeModules';\n\nexport async function validateDependenciesVersionsAsync(\n  projectRoot: string,\n  exp: Pick<ExpoConfig, 'sdkVersion'>,\n  pkg: PackageJSONConfig\n): Promise<boolean> {\n  // expo package for SDK < 33.0.0 does not have bundledNativeModules.json\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    return false;\n  }\n\n  let bundledNativeModules: BundledNativeModules | null = null;\n  try {\n    assert(exp.sdkVersion);\n    bundledNativeModules = await getBundledNativeModulesAsync(\n      projectRoot,\n      // sdkVersion is defined here because we ran the >= 33.0.0 check before\n      exp.sdkVersion\n    );\n  } catch {\n    Log.warn(\n      `Your project uses Expo SDK version >= 33.0.0, but the ${chalk.bold(\n        'expo'\n      )} package version seems to be older.`\n    );\n    return false;\n  }\n\n  // intersection of packages from package.json and bundled native modules\n  const packagesToCheck = getPackagesToCheck(pkg.dependencies, bundledNativeModules);\n  // read package versions from the file system (node_modules)\n  const packageVersions = await resolvePackageVersionsAsync(projectRoot, packagesToCheck);\n  // find incorrect dependencies by comparing the actual package versions with the bundled native module version ranges\n  const incorrectDeps = findIncorrectDependencies(packageVersions, bundledNativeModules);\n\n  if (incorrectDeps.length > 0) {\n    Log.warn('Some dependencies are incompatible with the installed expo package version:');\n    incorrectDeps.forEach(({ packageName, expectedVersionOrRange, actualVersion }) => {\n      Log.warn(\n        ` - ${chalk.underline(packageName)} - expected version: ${chalk.underline(\n          expectedVersionOrRange\n        )} - actual version installed: ${chalk.underline(actualVersion)}`\n      );\n    });\n    Log.warn(\n      'Your project may not work correctly until you install the correct versions of the packages.\\n' +\n        `To install the correct versions of these packages, please run: ${chalk.inverse(\n          'expo install [package-name ...]'\n        )}`\n    );\n    return false;\n  }\n  return true;\n}\n\nfunction getPackagesToCheck(\n  dependencies: Record<string, string>,\n  bundledNativeModules: BundledNativeModules\n): string[] {\n  const dependencyNames = Object.keys(dependencies || {});\n  const result: string[] = [];\n  for (const dependencyName of dependencyNames) {\n    if (dependencyName in bundledNativeModules) {\n      result.push(dependencyName);\n    }\n  }\n  return result;\n}\n\nasync function resolvePackageVersionsAsync(\n  projectRoot: string,\n  packages: string[]\n): Promise<Record<string, string>> {\n  const packageVersionsFromPackageJSON = await Promise.all(\n    packages.map(packageName => getPackageVersionAsync(projectRoot, packageName))\n  );\n  return packages.reduce((acc, packageName, idx) => {\n    acc[packageName] = packageVersionsFromPackageJSON[idx];\n    return acc;\n  }, {} as Record<string, string>);\n}\n\nasync function getPackageVersionAsync(projectRoot: string, packageName: string): Promise<string> {\n  const packageJsonPath = resolveFrom.silent(projectRoot, `${packageName}/package.json`);\n  if (!packageJsonPath) {\n    throw new CommandError(\n      `\"${packageName}\" is added as a dependency in your project's package.json but it doesn't seem to be installed. Please run \"yarn\" or \"npm install\" to fix this issue.`\n    );\n  }\n  const packageJson = await JsonFile.readAsync<BundledNativeModules>(packageJsonPath);\n  return packageJson.version;\n}\n\ninterface IncorrectDependency {\n  packageName: string;\n  expectedVersionOrRange: string;\n  actualVersion: string;\n}\n\nfunction findIncorrectDependencies(\n  packageVersions: Record<string, string>,\n  bundledNativeModules: BundledNativeModules\n): IncorrectDependency[] {\n  const packages = Object.keys(packageVersions);\n  const incorrectDeps: IncorrectDependency[] = [];\n  for (const packageName of packages) {\n    const expectedVersionOrRange = bundledNativeModules[packageName];\n    const actualVersion = packageVersions[packageName];\n    if (\n      typeof expectedVersionOrRange === 'string' &&\n      !semver.intersects(expectedVersionOrRange, actualVersion)\n    ) {\n      incorrectDeps.push({\n        packageName,\n        expectedVersionOrRange,\n        actualVersion,\n      });\n    }\n  }\n  return incorrectDeps;\n}\n"],"file":"validateDependenciesVersions.js"}