{"version":3,"sources":["../../../src/commands/eject/createNativeProjectsFromTemplateAsync.ts"],"names":["directoryExistsAsync","file","fs","stat","catch","isDirectory","createNativeProjectsFromTemplateAsync","projectRoot","exp","pkg","template","tempDir","platforms","skipDependencyUpdate","copiedPaths","cloneNativeDirectoriesAsync","depsResults","hasNewProjectFiles","length","needsPodInstall","includes","hasNewDependencies","hasNewDevDependencies","creatingNativeProjectStep","targetPaths","getTargetPaths","skippedPaths","name","templateSpec","validateBareTemplateExistsAsync","sdkVersion","copyPathsFromTemplateAsync","results","GitIgnore","mergeGitIgnorePaths","path","join","message","Log","chalk","dim","map","bold","didMerge","didClear","succeed","e","AbortCommandError","error","fail","log","yellow","SilentError","sdkMajorVersionNumber","semver","major","pacote","manifest","code","Error","templatePath","paths","targetPath","projectPath","push","copySync","bareEntryFile","resolveBareEntryFile","main","resolvedMainField","extensions"],"mappings":"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","sourcesContent":["import { ExpoConfig, PackageJSONConfig } from '@expo/config';\nimport { ModPlatform } from '@expo/config-plugins';\nimport { getBareExtensions, getFileWithExtensions } from '@expo/config/paths';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport npmPackageArg from 'npm-package-arg';\nimport pacote from 'pacote';\nimport path from 'path';\nimport semver from 'semver';\n\nimport { AbortCommandError, SilentError } from '../../CommandError';\nimport Log from '../../log';\nimport { extractTemplateAppAsync } from '../../utils/extractTemplateAppAsync';\nimport { logNewSection } from '../../utils/ora';\nimport * as GitIgnore from '../utils/GitIgnore';\nimport { resolveTemplateArgAsync } from './Github';\nimport {\n  DependenciesModificationResults,\n  isPkgMainExpoAppEntry,\n  updatePackageJSONAsync,\n} from './updatePackageJson';\nimport { writeMetroConfig } from './writeMetroConfig';\n\nasync function directoryExistsAsync(file: string): Promise<boolean> {\n  return (await fs.stat(file).catch(() => null))?.isDirectory() ?? false;\n}\n\n/**\n *\n * @param projectRoot\n * @param tempDir\n *\n * @return `true` if the project is ejecting, and `false` if it's syncing.\n */\nexport async function createNativeProjectsFromTemplateAsync({\n  projectRoot,\n  exp,\n  pkg,\n  template,\n  tempDir,\n  platforms,\n  skipDependencyUpdate,\n}: {\n  projectRoot: string;\n  exp: ExpoConfig;\n  pkg: PackageJSONConfig;\n  template?: string;\n  tempDir: string;\n  platforms: ModPlatform[];\n  skipDependencyUpdate?: string[];\n}): Promise<\n  { hasNewProjectFiles: boolean; needsPodInstall: boolean } & DependenciesModificationResults\n> {\n  const copiedPaths = await cloneNativeDirectoriesAsync({\n    projectRoot,\n    template,\n    tempDir,\n    exp,\n    pkg,\n    platforms,\n  });\n\n  writeMetroConfig({ projectRoot, pkg, tempDir });\n\n  const depsResults = await updatePackageJSONAsync({\n    projectRoot,\n    tempDir,\n    pkg,\n    skipDependencyUpdate,\n  });\n\n  return {\n    hasNewProjectFiles: !!copiedPaths.length,\n    // If the iOS folder changes or new packages are added, we should rerun pod install.\n    needsPodInstall:\n      copiedPaths.includes('ios') ||\n      depsResults.hasNewDependencies ||\n      depsResults.hasNewDevDependencies,\n    ...depsResults,\n  };\n}\n\n/**\n * Extract the template and copy the ios and android directories over to the project directory.\n *\n * @param force should create native projects even if they already exist.\n * @return `true` if any project files were created.\n */\nasync function cloneNativeDirectoriesAsync({\n  projectRoot,\n  tempDir,\n  template,\n  exp,\n  pkg,\n  platforms,\n}: {\n  projectRoot: string;\n  tempDir: string;\n  template?: string;\n  exp: Pick<ExpoConfig, 'name' | 'sdkVersion'>;\n  pkg: PackageJSONConfig;\n  platforms: ModPlatform[];\n}): Promise<string[]> {\n  // NOTE(brentvatne): Removing spaces between steps for now, add back when\n  // there is some additional context for steps\n  const creatingNativeProjectStep = logNewSection(\n    'Creating native project directories (./ios and ./android) and updating .gitignore'\n  );\n\n  const targetPaths = getTargetPaths(projectRoot, pkg, platforms);\n\n  let copiedPaths: string[] = [];\n  let skippedPaths: string[] = [];\n  try {\n    if (template) {\n      await resolveTemplateArgAsync(tempDir, creatingNativeProjectStep, exp.name, template);\n    } else {\n      const templateSpec = await validateBareTemplateExistsAsync(exp.sdkVersion!);\n      await extractTemplateAppAsync(templateSpec, tempDir, exp);\n    }\n    [copiedPaths, skippedPaths] = await copyPathsFromTemplateAsync(\n      projectRoot,\n      tempDir,\n      targetPaths\n    );\n    const results = GitIgnore.mergeGitIgnorePaths(\n      path.join(projectRoot, '.gitignore'),\n      path.join(tempDir, '.gitignore')\n    );\n\n    let message = `Created native project${platforms.length > 1 ? 's' : ''}`;\n\n    if (skippedPaths.length) {\n      message += Log.chalk.dim(\n        ` | ${skippedPaths.map(path => Log.chalk.bold(`/${path}`)).join(', ')} already created`\n      );\n    }\n    if (!results?.didMerge) {\n      message += Log.chalk.dim(` | gitignore already synced`);\n    } else if (results.didMerge && results.didClear) {\n      message += Log.chalk.dim(` | synced gitignore`);\n    }\n    creatingNativeProjectStep.succeed(message);\n  } catch (e) {\n    if (!(e instanceof AbortCommandError)) {\n      Log.error(e.message);\n    }\n    creatingNativeProjectStep.fail('Failed to create the native project.');\n    Log.log(\n      chalk.yellow(\n        'You may want to delete the `./ios` and/or `./android` directories before trying again.'\n      )\n    );\n    throw new SilentError(e);\n  }\n\n  return copiedPaths;\n}\n\nasync function validateBareTemplateExistsAsync(sdkVersion: string): Promise<npmPackageArg.Result> {\n  // Validate that the template exists\n  const sdkMajorVersionNumber = semver.major(sdkVersion);\n  const templateSpec = npmPackageArg(`expo-template-bare-minimum@sdk-${sdkMajorVersionNumber}`);\n  try {\n    await pacote.manifest(templateSpec);\n  } catch (e) {\n    if (e.code === 'E404') {\n      throw new Error(\n        `Unable to eject because an eject template for SDK ${sdkMajorVersionNumber} was not found.`\n      );\n    } else {\n      throw e;\n    }\n  }\n\n  return templateSpec;\n}\n\nasync function copyPathsFromTemplateAsync(\n  projectRoot: string,\n  templatePath: string,\n  paths: string[]\n): Promise<[string[], string[]]> {\n  const copiedPaths = [];\n  const skippedPaths = [];\n  for (const targetPath of paths) {\n    const projectPath = path.join(projectRoot, targetPath);\n    if (!(await directoryExistsAsync(projectPath))) {\n      copiedPaths.push(targetPath);\n      fs.copySync(path.join(templatePath, targetPath), projectPath);\n    } else {\n      skippedPaths.push(targetPath);\n    }\n  }\n  return [copiedPaths, skippedPaths];\n}\n\nfunction getTargetPaths(projectRoot: string, pkg: PackageJSONConfig, platforms: ModPlatform[]) {\n  const targetPaths: string[] = [...platforms];\n\n  const bareEntryFile = resolveBareEntryFile(projectRoot, pkg.main);\n  // Only create index.js if we cannot resolve the existing entry point (after replacing the expo entry).\n  if (!bareEntryFile) {\n    targetPaths.push('index.js');\n  }\n\n  return targetPaths;\n}\n\nexport function resolveBareEntryFile(projectRoot: string, main: any) {\n  // expo app entry is not needed for bare projects.\n  if (isPkgMainExpoAppEntry(main)) return null;\n  // Look at the `package.json`s `main` field for the main file.\n  const resolvedMainField = main ?? './index';\n  // Get a list of possible extensions for the main file.\n  const extensions = getBareExtensions(['ios', 'android']);\n  // Testing the main field against all of the provided extensions - for legacy reasons we can't use node module resolution as the package.json allows you to pass in a file without a relative path and expect it as a relative path.\n  return getFileWithExtensions(projectRoot, resolvedMainField, extensions);\n}\n"],"file":"createNativeProjectsFromTemplateAsync.js"}