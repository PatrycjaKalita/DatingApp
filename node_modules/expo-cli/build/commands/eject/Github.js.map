{"version":3,"sources":["../../../src/commands/eject/Github.ts"],"names":["pipeline","Stream","isUrlOk","url","res","catch","e","statusCode","getRepoInfo","examplePath","username","name","t","_branch","file","pathname","split","filePath","replace","join","undefined","infoResponse","info","JSON","parse","body","branch","RegExp","hasRepo","contentsUrl","packagePath","resolveTemplateArgAsync","tempDir","oraInstance","appName","template","templatePath","repoInfo","repoUrl","URL","error","code","fail","path","resolve","fs","existsSync","CommandError","origin","chalk","red","AbortCommandError","found","text","bold","cyan","downloadAndExtractRepoAsync","root","projectName","basename","strip","length","got","stream","tar","extract","cwd","transform","onentry"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAMA;AACA,MAAMA,QAAQ,GAAG,uBAAUC,iBAAOD,QAAjB,CAAjB;;AASA,eAAeE,OAAf,CAAuBC,GAAvB,EAAsD;AACpD,QAAMC,GAAG,GAAG,MAAM,oBAAID,GAAJ,EAASE,KAAT,CAAeC,CAAC,IAAIA,CAApB,CAAlB;AACA,SAAOF,GAAG,CAACG,UAAJ,KAAmB,GAA1B;AACD;;AAED,eAAeC,WAAf,CAA2BL,GAA3B,EAAqCM,WAArC,EAA0F;AACxF,QAAM,GAAGC,QAAH,EAAaC,IAAb,EAAmBC,CAAnB,EAAsBC,OAAtB,EAA+B,GAAGC,IAAlC,IAA0CX,GAAG,CAACY,QAAJ,CAAaC,KAAb,CAAmB,GAAnB,CAAhD;AACA,QAAMC,QAAQ,GAAGR,WAAW,GAAGA,WAAW,CAACS,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAH,GAAoCJ,IAAI,CAACK,IAAL,CAAU,GAAV,CAAhE,CAFwF,CAIxF;AACA;;AACA,MAAIP,CAAC,KAAKQ,SAAV,EAAqB;AACnB,UAAMC,YAAY,GAAG,MAAM,oBAAK,gCAA+BX,QAAS,IAAGC,IAAK,EAArD,EAAwDN,KAAxD,CACzBC,CAAC,IAAIA,CADoB,CAA3B;;AAGA,QAAIe,YAAY,CAACd,UAAb,KAA4B,GAAhC,EAAqC;AACnC;AACD;;AACD,UAAMe,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACI,IAAxB,CAAb;AACA,WAAO;AAAEf,MAAAA,QAAF;AAAYC,MAAAA,IAAZ;AAAkBe,MAAAA,MAAM,EAAEJ,IAAI,CAAC,gBAAD,CAA9B;AAAkDL,MAAAA;AAAlD,KAAP;AACD,GAfuF,CAiBxF;;;AACA,QAAMS,MAAM,GAAGjB,WAAW,GACrB,GAAEI,OAAQ,IAAGC,IAAI,CAACK,IAAL,CAAU,GAAV,CAAe,EAA7B,CAA+BD,OAA/B,CAAuC,IAAIS,MAAJ,CAAY,IAAGV,QAAS,KAAxB,CAAvC,EAAsE,EAAtE,CADsB,GAEtBJ,OAFJ;;AAIA,MAAIH,QAAQ,IAAIC,IAAZ,IAAoBe,MAApB,IAA8Bd,CAAC,KAAK,MAAxC,EAAgD;AAC9C,WAAO;AAAEF,MAAAA,QAAF;AAAYC,MAAAA,IAAZ;AAAkBe,MAAAA,MAAlB;AAA0BT,MAAAA;AAA1B,KAAP;AACD;;AACD,SAAOG,SAAP;AACD;;AAED,SAASQ,OAAT,CAAiB;AAAElB,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBe,EAAAA,MAAlB;AAA0BT,EAAAA;AAA1B,CAAjB,EAAiE;AAC/D,QAAMY,WAAW,GAAI,gCAA+BnB,QAAS,IAAGC,IAAK,WAArE;AACA,QAAMmB,WAAW,GAAI,GAAEb,QAAQ,GAAI,IAAGA,QAAS,EAAhB,GAAoB,EAAG,eAAtD;AAEA,SAAOf,OAAO,CAAC2B,WAAW,GAAGC,WAAd,GAA6B,QAAOJ,MAAO,EAA5C,CAAd;AACD;;AAEM,eAAeK,uBAAf,CACLC,OADK,EAELC,WAFK,EAGLC,OAHK,EAILC,QAJK,EAKLC,YALK,EAML;AACA,MAAIC,QAAJ;;AAEA,MAAIF,QAAJ,EAAc;AACZ;AACA,QAAIG,OAAJ;;AAEA,QAAI;AACF;AACAA,MAAAA,OAAO,GAAG,IAAIC,GAAJ,CAAQJ,QAAR,CAAV;AACD,KAHD,CAGE,OAAOK,KAAP,EAAc;AACd,UAAIA,KAAK,CAACC,IAAN,KAAe,iBAAnB,EAAsC;AACpCR,QAAAA,WAAW,CAACS,IAAZ,CAAiBF,KAAjB;AACA,cAAMA,KAAN;AACD;AACF;;AAED,QAAI,CAACF,OAAL,EAAc;AACZ,YAAMF,YAAY,GAAGO,gBAAKC,OAAL,CAAaT,QAAb,CAArB;;AACA,UAAI,CAACU,EAAE,GAACC,UAAH,CAAcV,YAAd,CAAL,EAAkC;AAChC,cAAM,KAAIW,uBAAJ,EAAkB,iCAAgCX,YAAa,EAA/D,CAAN;AACD;;AAED,aAAO,MAAM,8DAA8BA,YAA9B,EAA4CJ,OAA5C,EAAqD;AAAErB,QAAAA,IAAI,EAAEuB;AAAR,OAArD,CAAb;AACD;;AAED,QAAII,OAAO,CAACU,MAAR,KAAmB,oBAAvB,EAA6C;AAC3Cf,MAAAA,WAAW,CAACS,IAAZ,CACG,gBAAeO,iBAAMC,GAAN,CACb,IAAGf,QAAS,GADC,CAEd,kFAHJ;AAKA,YAAM,KAAIgB,iCAAJ,GAAN;AACD;;AAEDd,IAAAA,QAAQ,GAAG,MAAM7B,WAAW,CAAC8B,OAAD,EAAUF,YAAV,CAA5B;;AAEA,QAAI,CAACC,QAAL,EAAe;AACbJ,MAAAA,WAAW,CAACS,IAAZ,CACG,6BAA4BO,iBAAMC,GAAN,CAAW,IAAGf,QAAS,GAAvB,CAA2B,qCAD1D;AAGA,YAAM,KAAIgB,iCAAJ,GAAN;AACD;;AAED,UAAMC,KAAK,GAAG,MAAMxB,OAAO,CAACS,QAAD,CAA3B;;AAEA,QAAI,CAACe,KAAL,EAAY;AACVnB,MAAAA,WAAW,CAACS,IAAZ,CACG,uCAAsCO,iBAAMC,GAAN,CACpC,IAAGf,QAAS,GADwB,CAErC,0DAHJ;AAKA,YAAM,KAAIgB,iCAAJ,GAAN;AACD;AACF;;AAED,MAAId,QAAJ,EAAc;AACZJ,IAAAA,WAAW,CAACoB,IAAZ,GAAmBJ,iBAAMK,IAAN,CAChB,+BAA8BL,iBAAMM,IAAN,CAAWpB,QAAX,CAAqB,6BADnC,CAAnB;AAIA,UAAMqB,2BAA2B,CAACxB,OAAD,EAAUK,QAAV,CAAjC;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAASmB,2BAAT,CACEC,IADF,EAEE;AAAE/C,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBe,EAAAA,MAAlB;AAA0BT,EAAAA;AAA1B,CAFF,EAGiB;AACf,QAAMyC,WAAW,GAAGf,gBAAKgB,QAAL,CAAcF,IAAd,CAApB;;AAEA,QAAMG,KAAK,GAAG3C,QAAQ,GAAGA,QAAQ,CAACD,KAAT,CAAe,GAAf,EAAoB6C,MAApB,GAA6B,CAAhC,GAAoC,CAA1D;AACA,SAAO7D,QAAQ,CACb8D,eAAIC,MAAJ,CAAY,+BAA8BrD,QAAS,IAAGC,IAAK,WAAUe,MAAO,EAA5E,CADa,EAEbsC,eAAIC,OAAJ,CACE;AACEC,IAAAA,GAAG,EAAET,IADP;AAEEU,IAAAA,SAAS,EAAE,oDAAoB;AAAExD,MAAAA,IAAI,EAAE+C;AAAR,KAApB,CAFb;AAGEU,IAAAA,OAAO,EAAE,oDAAoBV,WAApB,CAHX;AAIEE,IAAAA;AAJF,GADF,EAOE,CAAE,GAAEjD,IAAK,IAAGe,MAAO,GAAET,QAAQ,GAAI,IAAGA,QAAS,EAAhB,GAAoB,EAAG,EAApD,CAPF,CAFa,CAAf;AAYD","sourcesContent":["import chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport got from 'got';\nimport { Ora } from 'ora';\nimport path from 'path';\nimport { Stream } from 'stream';\nimport tar from 'tar';\nimport { promisify } from 'util';\n\nimport CommandError, { AbortCommandError } from '../../CommandError';\nimport {\n  createEntryResolver,\n  createFileTransform,\n  extractTemplateAppFolderAsync,\n} from '../../utils/extractTemplateAppAsync';\n\n// @ts-ignore\nconst pipeline = promisify(Stream.pipeline);\n\ntype RepoInfo = {\n  username: string;\n  name: string;\n  branch: string;\n  filePath: string;\n};\n\nasync function isUrlOk(url: string): Promise<boolean> {\n  const res = await got(url).catch(e => e);\n  return res.statusCode === 200;\n}\n\nasync function getRepoInfo(url: any, examplePath?: string): Promise<RepoInfo | undefined> {\n  const [, username, name, t, _branch, ...file] = url.pathname.split('/');\n  const filePath = examplePath ? examplePath.replace(/^\\//, '') : file.join('/');\n\n  // Support repos whose entire purpose is to be an example, e.g.\n  // https://github.com/:username/:my-cool-example-repo-name.\n  if (t === undefined) {\n    const infoResponse = await got(`https://api.github.com/repos/${username}/${name}`).catch(\n      e => e\n    );\n    if (infoResponse.statusCode !== 200) {\n      return;\n    }\n    const info = JSON.parse(infoResponse.body);\n    return { username, name, branch: info['default_branch'], filePath };\n  }\n\n  // If examplePath is available, the branch name takes the entire path\n  const branch = examplePath\n    ? `${_branch}/${file.join('/')}`.replace(new RegExp(`/${filePath}|/$`), '')\n    : _branch;\n\n  if (username && name && branch && t === 'tree') {\n    return { username, name, branch, filePath };\n  }\n  return undefined;\n}\n\nfunction hasRepo({ username, name, branch, filePath }: RepoInfo) {\n  const contentsUrl = `https://api.github.com/repos/${username}/${name}/contents`;\n  const packagePath = `${filePath ? `/${filePath}` : ''}/package.json`;\n\n  return isUrlOk(contentsUrl + packagePath + `?ref=${branch}`);\n}\n\nexport async function resolveTemplateArgAsync(\n  tempDir: string,\n  oraInstance: Ora,\n  appName: string,\n  template: string,\n  templatePath?: string\n) {\n  let repoInfo: RepoInfo | undefined;\n\n  if (template) {\n    // @ts-ignore\n    let repoUrl: URL | undefined;\n\n    try {\n      // @ts-ignore\n      repoUrl = new URL(template);\n    } catch (error) {\n      if (error.code !== 'ERR_INVALID_URL') {\n        oraInstance.fail(error);\n        throw error;\n      }\n    }\n\n    if (!repoUrl) {\n      const templatePath = path.resolve(template);\n      if (!fs.existsSync(templatePath)) {\n        throw new CommandError(`template file does not exist: ${templatePath}`);\n      }\n\n      return await extractTemplateAppFolderAsync(templatePath, tempDir, { name: appName });\n    }\n\n    if (repoUrl.origin !== 'https://github.com') {\n      oraInstance.fail(\n        `Invalid URL: ${chalk.red(\n          `\"${template}\"`\n        )}. Only GitHub repositories are supported. Please use a GitHub URL and try again.`\n      );\n      throw new AbortCommandError();\n    }\n\n    repoInfo = await getRepoInfo(repoUrl, templatePath);\n\n    if (!repoInfo) {\n      oraInstance.fail(\n        `Found invalid GitHub URL: ${chalk.red(`\"${template}\"`)}. Please fix the URL and try again.`\n      );\n      throw new AbortCommandError();\n    }\n\n    const found = await hasRepo(repoInfo);\n\n    if (!found) {\n      oraInstance.fail(\n        `Could not locate the repository for ${chalk.red(\n          `\"${template}\"`\n        )}. Please check that the repository exists and try again.`\n      );\n      throw new AbortCommandError();\n    }\n  }\n\n  if (repoInfo) {\n    oraInstance.text = chalk.bold(\n      `Downloading files from repo ${chalk.cyan(template)}. This might take a moment.`\n    );\n\n    await downloadAndExtractRepoAsync(tempDir, repoInfo);\n  }\n\n  return true;\n}\n\nfunction downloadAndExtractRepoAsync(\n  root: string,\n  { username, name, branch, filePath }: RepoInfo\n): Promise<void> {\n  const projectName = path.basename(root);\n\n  const strip = filePath ? filePath.split('/').length + 1 : 1;\n  return pipeline(\n    got.stream(`https://codeload.github.com/${username}/${name}/tar.gz/${branch}`),\n    tar.extract(\n      {\n        cwd: root,\n        transform: createFileTransform({ name: projectName }),\n        onentry: createEntryResolver(projectName),\n        strip,\n      },\n      [`${name}-${branch}${filePath ? `/${filePath}` : ''}`]\n    )\n  );\n}\n"],"file":"Github.js"}