{"version":3,"sources":["../../src/commands/publishAsync.ts"],"names":["actionAsync","projectRoot","options","assertValidReleaseChannel","releaseChannel","exp","pkg","skipSDKVersionRequirement","sdkVersion","runtimeVersion","target","user","UserManager","ensureLoggedInAsync","owner","Log","addNewLineIfNone","log","chalk","bold","replace","l","toUpperCase","kind","newLine","logExpoUpdatesWarnings","logOptimizeWarnings","logBareWorkflowWarnings","spinner","quiet","result","Project","publishAsync","resetCache","clear","url","projectPageUrl","succeed","logManifestUrl","logProjectPageUrl","copiedToClipboard","recipient","sendTo","getRecipient","sendUrlAsync","isInvalidReleaseChannel","channelRe","RegExp","test","CommandError","manifestUrl","getExampleManifestUrl","TerminalLink","fallbackToUrl","dim","learnMore","productionMessage","gray","includes","urlWithIndexSuffix","hasConflictingUpdatesPackages","dependencies","nestedWarn","hasOptimized","fs","existsSync","path","join","hasExpoInstalled"],"mappings":"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","sourcesContent":["import {\n  getConfig,\n  getDefaultTarget,\n  isLegacyImportsEnabled,\n  PackageJSONConfig,\n  ProjectTarget,\n} from '@expo/config';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport { Ora } from 'ora';\nimport path from 'path';\nimport { Project, UserManager } from 'xdl';\n\nimport CommandError from '../CommandError';\nimport Log from '../log';\nimport { getProjectOwner } from '../projects';\nimport * as sendTo from '../sendTo';\nimport { logNewSection } from '../utils/ora';\nimport * as TerminalLink from './utils/TerminalLink';\nimport { formatNamedWarning } from './utils/logConfigWarnings';\n\ntype Options = {\n  clear?: boolean;\n  sendTo?: string | boolean;\n  quiet?: boolean;\n  target?: ProjectTarget;\n  releaseChannel?: string;\n  duringBuild?: boolean;\n  maxWorkers?: number;\n  parent?: { nonInteractive: boolean };\n};\n\nexport async function actionAsync(\n  projectRoot: string,\n  options: Options = {}\n): Promise<Project.PublishedProjectResult> {\n  assertValidReleaseChannel(options.releaseChannel);\n\n  const { exp, pkg } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n  const { sdkVersion, runtimeVersion } = exp;\n\n  const target = options.target ?? getDefaultTarget(projectRoot);\n\n  // note: this validates the exp.owner when the user is a robot\n  const user = await UserManager.ensureLoggedInAsync();\n  const owner = getProjectOwner(user, exp);\n\n  Log.addNewLineIfNone();\n\n  // Log building info before building.\n  // This gives the user sometime to bail out if the info is unexpected.\n  if (runtimeVersion) {\n    Log.log(`\\u203A Runtime version: ${Log.chalk.bold(runtimeVersion)}`);\n  } else if (sdkVersion) {\n    Log.log(`\\u203A Expo SDK: ${Log.chalk.bold(sdkVersion)}`);\n  }\n  Log.log(`\\u203A Release channel: ${Log.chalk.bold(options.releaseChannel)}`);\n  Log.log(`\\u203A Workflow: ${Log.chalk.bold(target.replace(/\\b\\w/g, l => l.toUpperCase()))}`);\n  if (user.kind === 'robot') {\n    Log.log(`\\u203A Owner: ${Log.chalk.bold(owner)}`);\n  }\n\n  Log.newLine();\n\n  // Log warnings.\n\n  logExpoUpdatesWarnings(pkg);\n\n  logOptimizeWarnings({ projectRoot });\n\n  if (!options.target && target === 'bare' && isLegacyImportsEnabled(exp)) {\n    logBareWorkflowWarnings(pkg);\n  }\n\n  Log.addNewLineIfNone();\n\n  // Build and publish the project.\n\n  let spinner: Ora | null = null;\n  if (options.quiet) {\n    spinner = logNewSection(`Building optimized bundles and generating sourcemaps...`);\n  } else {\n    Log.log(`Building optimized bundles and generating sourcemaps...`);\n  }\n\n  const result = await Project.publishAsync(projectRoot, {\n    releaseChannel: options.releaseChannel,\n    quiet: options.quiet,\n    target,\n    resetCache: options.clear,\n  });\n\n  const url = result.url;\n  const projectPageUrl = result.projectPageUrl;\n\n  if (options.quiet && spinner) {\n    spinner.succeed();\n  }\n\n  Log.log('Publish complete');\n  Log.newLine();\n\n  logManifestUrl({ url, sdkVersion, runtimeVersion });\n\n  if (target === 'managed' && projectPageUrl) {\n    // note(brentvatne): disable copy to clipboard functionality for now, need to think more about\n    // whether this is desirable.\n    //\n    // Attempt to copy the URL to the clipboard, if it succeeds then append a notice to the log.\n    // const copiedToClipboard = copyToClipboard(websiteUrl);\n\n    logProjectPageUrl({ url: projectPageUrl, copiedToClipboard: false });\n\n    // Only send the link for managed projects.\n    const recipient = await sendTo.getRecipient(options.sendTo);\n    if (recipient) {\n      await sendTo.sendUrlAsync(projectPageUrl, recipient);\n    }\n  }\n\n  Log.newLine();\n\n  return result;\n}\n\nexport function isInvalidReleaseChannel(releaseChannel?: string): boolean {\n  const channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n  return !!releaseChannel && !channelRe.test(releaseChannel);\n}\n\n// TODO(Bacon): should we prompt with a normalized value?\nfunction assertValidReleaseChannel(releaseChannel?: string): void {\n  if (isInvalidReleaseChannel(releaseChannel)) {\n    throw new CommandError(\n      'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n    );\n  }\n}\n\n/**\n * @example 📝  Manifest: https://exp.host/@bacon/my-app/index.exp?sdkVersion=38.0.0 Learn more: https://expo.fyi/manifest-url\n * @param options\n */\nfunction logManifestUrl({\n  url,\n  sdkVersion,\n  runtimeVersion,\n}: {\n  url: string;\n  sdkVersion?: string;\n  runtimeVersion?: string;\n}) {\n  const manifestUrl = getExampleManifestUrl(url, { sdkVersion, runtimeVersion }) ?? url;\n  Log.log(\n    `📝  Manifest: ${Log.chalk.bold(TerminalLink.fallbackToUrl(url, manifestUrl))} ${Log.chalk.dim(\n      TerminalLink.learnMore('https://expo.fyi/manifest-url')\n    )}`\n  );\n}\n\n/**\n *\n * @example ⚙️   Project page: https://expo.dev/@bacon/projects/my-app [copied to clipboard] Learn more: https://expo.fyi/project-page\n * @param options\n */\nfunction logProjectPageUrl({\n  url,\n  copiedToClipboard,\n}: {\n  url: string;\n  copiedToClipboard: boolean;\n}) {\n  let productionMessage = `⚙️   Project page: ${Log.chalk.bold(\n    TerminalLink.fallbackToUrl(url, url)\n  )}`;\n\n  if (copiedToClipboard) {\n    productionMessage += ` ${Log.chalk.gray(`[copied to clipboard]`)}`;\n  }\n  productionMessage += ` ${Log.chalk.dim(TerminalLink.learnMore('https://expo.fyi/project-page'))}`;\n\n  Log.log(productionMessage);\n}\n\nfunction getExampleManifestUrl(\n  url: string,\n  { sdkVersion, runtimeVersion }: { sdkVersion?: string; runtimeVersion?: string }\n): string | null {\n  if (!(sdkVersion || runtimeVersion)) {\n    return null;\n  }\n\n  if (url.includes('release-channel') && url.includes('?release-channel')) {\n    const urlWithIndexSuffix = url.replace('?release-channel', '/index.exp?release-channel');\n    return runtimeVersion\n      ? urlWithIndexSuffix + `&runtimeVersion=${runtimeVersion}`\n      : urlWithIndexSuffix + `&sdkVersion=${sdkVersion}`;\n  } else if (url.includes('?') && !url.includes('release-channel')) {\n    // This is the only relevant url query param we are aware of at the time of\n    // writing this code, so if there is some other param included we don't know\n    // how to deal with it and log nothing.\n    return null;\n  } else {\n    return runtimeVersion\n      ? `${url}/index.exp?runtimeVersion=${runtimeVersion}`\n      : `${url}/index.exp?sdkVersion=${sdkVersion}`;\n  }\n}\n\nexport function logExpoUpdatesWarnings(pkg: PackageJSONConfig): void {\n  const hasConflictingUpdatesPackages =\n    pkg.dependencies?.['expo-updates'] && pkg.dependencies?.['expokit'];\n\n  if (!hasConflictingUpdatesPackages) {\n    return;\n  }\n\n  Log.nestedWarn(\n    formatNamedWarning(\n      'Conflicting Updates',\n      `You have both the ${chalk.bold('expokit')} and ${chalk.bold(\n        'expo-updates'\n      )} packages installed in package.json.\\n  These two packages are incompatible and ${chalk.bold(\n        'publishing updates with expo-updates will not work if expokit is installed'\n      )}.\\n  If you intend to use ${chalk.bold('expo-updates')}, please remove ${chalk.bold(\n        'expokit'\n      )} from your dependencies.`\n    )\n  );\n}\n\nexport function logOptimizeWarnings({ projectRoot }: { projectRoot: string }): void {\n  const hasOptimized = fs.existsSync(path.join(projectRoot, '/.expo-shared/assets.json'));\n  if (hasOptimized) {\n    return;\n  }\n  Log.nestedWarn(\n    formatNamedWarning(\n      'Optimization',\n      `Project may contain uncompressed images. Optimizing image assets can improve app size and performance.\\n  To fix this, run ${chalk.bold(\n        `npx expo-optimize`\n      )}`,\n      'https://docs.expo.dev/distribution/optimizing-updates/#optimize-images'\n    )\n  );\n}\n\n/**\n * Warn users if they attempt to publish in a bare project that may also be\n * using Expo Go and does not If the developer does not have the Expo\n * package installed then we do not need to warn them as there is no way that\n * it will run in Expo Go in development even. We should revisit this with\n * dev client, and possibly also by excluding SDK version for bare\n * expo-updates usage in the future (and then surfacing this as an error in\n * the Expo Go app instead)\n *\n * Related: https://github.com/expo/expo/issues/9517\n *\n * @param pkg package.json\n */\nexport function logBareWorkflowWarnings(pkg: PackageJSONConfig) {\n  const hasExpoInstalled = pkg.dependencies?.['expo'];\n  if (!hasExpoInstalled) {\n    return;\n  }\n\n  Log.nestedWarn(\n    formatNamedWarning(\n      'Workflow target',\n      `This is a ${chalk.bold(\n        'bare workflow'\n      )} project. The resulting publish will only run properly inside of a native build of your project. If you want to publish a version of your app that will run in Expo Go, please use ${chalk.bold(\n        'expo publish --target managed'\n      )}. You can skip this warning by explicitly running ${chalk.bold(\n        'expo publish --target bare'\n      )} in the future.`\n    )\n  );\n}\n"],"file":"publishAsync.js"}