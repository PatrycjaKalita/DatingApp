{"version":3,"sources":["../../src/commands/installAsync.ts"],"names":["resolveExpoProjectRootAsync","info","process","cwd","projectRoot","error","code","Log","addNewLineIfNone","message","newLine","log","chalk","cyan","bold","SilentError","actionAsync","packages","options","packageManager","PackageManager","createForProject","npm","yarn","exp","pkg","skipSDKVersionRequirement","skipPlugins","dependencies","addAsync","sdkVersion","CommandError","name","toLowerCase","Versions","gteSdkVersion","resolveFrom","silent","installAsync","bundledNativeModules","nativeModules","others","versionedPackages","map","arg","spec","includes","type","version","modifiedSpec","push","raw","messages","length","join","split","filter","Boolean","isPluginError"],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport npmPackageArg from 'npm-package-arg';\nimport resolveFrom from 'resolve-from';\nimport { Versions } from 'xdl';\n\nimport CommandError, { SilentError } from '../CommandError';\nimport Log from '../log';\nimport { findProjectRootAsync } from './utils/ProjectUtils';\nimport { autoAddConfigPluginsAsync } from './utils/autoAddConfigPluginsAsync';\nimport { getBundledNativeModulesAsync } from './utils/bundledNativeModules';\n\nasync function resolveExpoProjectRootAsync() {\n  try {\n    const info = await findProjectRootAsync(process.cwd());\n    return info.projectRoot;\n  } catch (error) {\n    if (error.code !== 'NO_PROJECT') {\n      // An unknown error occurred.\n      throw error;\n    }\n    // This happens when an app.config exists but a package.json is not present.\n    Log.addNewLineIfNone();\n    Log.error(error.message);\n    Log.newLine();\n    Log.log(Log.chalk.cyan(`You can create a new project with ${Log.chalk.bold(`expo init`)}`));\n    Log.newLine();\n    throw new SilentError(error);\n  }\n}\n\nexport async function actionAsync(\n  packages: string[],\n  options: PackageManager.CreateForProjectOptions\n) {\n  const projectRoot = await resolveExpoProjectRootAsync();\n\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    npm: options.npm,\n    yarn: options.yarn,\n    log: Log.log,\n  });\n\n  let { exp, pkg } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n    // Sometimes users will add a plugin to the config before installing the library,\n    // this wouldn't work unless we dangerously disable plugin serialization.\n    skipPlugins: true,\n  });\n\n  // If using `expo install` in a project without the expo package even listed\n  // in package.json, just fall through to npm/yarn.\n  //\n  if (!pkg.dependencies['expo']) {\n    return await packageManager.addAsync(...packages);\n  }\n\n  if (!exp.sdkVersion) {\n    Log.addNewLineIfNone();\n    throw new CommandError(\n      `The ${Log.chalk.bold(`expo`)} package was found in your ${Log.chalk.bold(\n        `package.json`\n      )} but we couldn't resolve the Expo SDK version. Run ${Log.chalk.bold(\n        `${packageManager.name.toLowerCase()} install`\n      )} and then try this command again.\\n`\n    );\n  }\n\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    const message = `${Log.chalk.bold(\n      `expo install`\n    )} is only available for Expo SDK version 33 or higher.`;\n    Log.addNewLineIfNone();\n    Log.error(message);\n    Log.newLine();\n    Log.log(Log.chalk.cyan(`Current version: ${Log.chalk.bold(exp.sdkVersion)}`));\n    Log.newLine();\n    throw new SilentError(message);\n  }\n\n  // This shouldn't be invoked because `findProjectRootAsync` will throw if node_modules are missing.\n  // Every React project should have react installed...\n  if (!resolveFrom.silent(projectRoot, 'react')) {\n    Log.addNewLineIfNone();\n    Log.log(\n      Log.chalk.cyan(`node_modules not found, running ${packageManager.name} install command.`)\n    );\n    Log.newLine();\n    await packageManager.installAsync();\n  }\n\n  const bundledNativeModules = await getBundledNativeModulesAsync(projectRoot, exp.sdkVersion);\n  const nativeModules = [];\n  const others = [];\n  const versionedPackages = packages.map(arg => {\n    const spec = npmPackageArg(arg);\n    const { name } = spec;\n    if (['tag', 'version', 'range'].includes(spec.type) && name && bundledNativeModules[name]) {\n      // Unimodule packages from npm registry are modified to use the bundled version.\n      const version = bundledNativeModules[name];\n      const modifiedSpec = `${name}@${version}`;\n      nativeModules.push(modifiedSpec);\n      return modifiedSpec;\n    } else {\n      // Other packages are passed through unmodified.\n      others.push(spec.raw);\n      return spec.raw;\n    }\n  });\n  const messages = [];\n  if (nativeModules.length > 0) {\n    messages.push(\n      `${nativeModules.length} SDK ${exp.sdkVersion} compatible native ${\n        nativeModules.length === 1 ? 'module' : 'modules'\n      }`\n    );\n  }\n  if (others.length > 0) {\n    messages.push(`${others.length} other ${others.length === 1 ? 'package' : 'packages'}`);\n  }\n  Log.log(`Installing ${messages.join(' and ')} using ${packageManager.name}.`);\n  await packageManager.addAsync(...versionedPackages);\n\n  try {\n    exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp;\n\n    // Only auto add plugins if the plugins array is defined or if the project is using SDK +42.\n    await autoAddConfigPluginsAsync(\n      projectRoot,\n      exp,\n      versionedPackages.map(pkg => pkg.split('@')[0]).filter(Boolean)\n    );\n  } catch (error) {\n    if (error.isPluginError) {\n      Log.error(`Skipping plugin check: ` + error.message);\n      return;\n    }\n    throw error;\n  }\n}\n"],"file":"installAsync.js"}