{"version":3,"sources":["../../src/utils/ora.ts"],"names":["ora","options","inputOptions","text","disabled","program","nonInteractive","Log","isDebug","isEnabled","stream","process","stdout","stderr","logReal","console","log","infoReal","info","warnReal","warn","errorReal","error","oraStop","stop","bind","origStopAndPersist","stopAndPersist","logWrap","method","args","start","resetNativeLogs","setSpinner","logNewSection","title","spinner","chalk","bold"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport program from 'commander';\nimport oraReal from 'ora';\n\nimport Log from '../log';\n\n/**\n * A custom ora spinner that sends the stream to stdout in CI, non-TTY, or expo's non-interactive flag instead of stderr (the default).\n *\n * @param options\n * @returns\n */\nexport function ora(options?: oraReal.Options | string): oraReal.Ora {\n  const inputOptions = typeof options === 'string' ? { text: options } : options || {};\n  const disabled = program.nonInteractive || Log.isDebug;\n  const ora = oraReal({\n    // Ensure our non-interactive mode emulates CI mode.\n    isEnabled: !disabled,\n    // In non-interactive mode, send the stream to stdout so it prevents looking like an error.\n    stream: disabled ? process.stdout : process.stderr,\n    ...inputOptions,\n  });\n\n  // eslint-disable-next-line no-console\n  const logReal = console.log;\n  // eslint-disable-next-line no-console\n  const infoReal = console.info;\n  // eslint-disable-next-line no-console\n  const warnReal = console.warn;\n  // eslint-disable-next-line no-console\n  const errorReal = console.error;\n\n  const oraStop = ora.stop.bind(ora);\n\n  const origStopAndPersist = ora.stopAndPersist.bind(ora);\n\n  const logWrap = (method: any, args: any[]) => {\n    oraStop();\n    method(...args);\n    ora!.start();\n  };\n\n  // eslint-disable-next-line no-console\n  console.log = (...args: any) => logWrap(logReal, args);\n  // eslint-disable-next-line no-console\n  console.info = (...args: any) => logWrap(infoReal, args);\n  // eslint-disable-next-line no-console\n  console.warn = (...args: any) => logWrap(warnReal, args);\n  // eslint-disable-next-line no-console\n  console.error = (...args: any) => logWrap(errorReal, args);\n\n  const resetNativeLogs = () => {\n    // eslint-disable-next-line no-console\n    console.log = logReal;\n    // eslint-disable-next-line no-console\n    console.info = logReal;\n    // eslint-disable-next-line no-console\n    console.warn = warnReal;\n    // eslint-disable-next-line no-console\n    console.error = errorReal;\n  };\n\n  ora.stopAndPersist = (): oraReal.Ora => {\n    origStopAndPersist();\n    resetNativeLogs();\n    return ora!;\n  };\n\n  ora.stop = (): oraReal.Ora => {\n    oraStop();\n    resetNativeLogs();\n    return ora!;\n  };\n\n  // Always make the central logging module aware of the current spinner\n  Log.setSpinner(ora);\n\n  return ora;\n}\n\n/**\n * Create a unified section spinner.\n *\n * @param title\n * @returns\n */\nexport function logNewSection(title: string) {\n  const spinner = ora(chalk.bold(title));\n  // Prevent the spinner from clashing with debug logs\n  spinner.start();\n  return spinner;\n}\n"],"file":"ora.js"}