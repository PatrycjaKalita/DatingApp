{"version":3,"sources":["../../src/utils/extractTemplateAppAsync.ts"],"names":["escapeXMLCharacters","original","noAmps","replace","noLt","noGt","noApos","Transformer","Minipass","constructor","config","settings","write","data","getNormalizedName","includes","extension","name","end","replaced","IOSConfig","XcodeUtils","sanitizedName","toLowerCase","binaryExtensions","createFileTransform","transformFile","entry","path","extname","undefined","extractAndPrepareTemplateAppAsync","templateSpec","projectRoot","extractTemplateAppAsync","expo","appFile","JsonFile","join","appJson","readAsync","writeAsync","packageFile","packageJson","private","version","description","tags","repository","_resolved","_integrity","_from","targetPath","pacote","tarball","stream","tarStream","extractTemplateAppAsyncImpl","cache","UserSettings","dotExpoHomeDirectory","extractTemplateAppFolderAsync","tarFilePath","readStream","fs","createReadStream","createEntryResolver","type","test","basename","mkdirp","Promise","resolve","reject","extractStream","tar","x","cwd","strip","transform","onentry","on","pipe"],"mappings":"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","sourcesContent":["import { BareAppConfig, ExpoConfig } from '@expo/config';\nimport { IOSConfig } from '@expo/config-plugins';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs-extra';\nimport merge from 'lodash/merge';\nimport Minipass from 'minipass';\nimport pacote, { PackageSpec } from 'pacote';\nimport path from 'path';\nimport { Readable } from 'stream';\nimport tar, { ReadEntry } from 'tar';\nimport { UserSettings } from 'xdl';\n\ntype AppJsonInput = { expo: Partial<ExpoConfig> & { name: string } };\ntype TemplateConfig = { name: string };\n\nfunction escapeXMLCharacters(original: string): string {\n  const noAmps = original.replace('&', '&amp;');\n  const noLt = noAmps.replace('<', '&lt;');\n  const noGt = noLt.replace('>', '&gt;');\n  const noApos = noGt.replace('\"', '\\\\\"');\n  return noApos.replace(\"'\", \"\\\\'\");\n}\n\nclass Transformer extends Minipass {\n  data = '';\n\n  constructor(public config: TemplateConfig, private settings: { extension: string }) {\n    super();\n  }\n\n  write(data: string) {\n    this.data += data;\n    return true;\n  }\n\n  getNormalizedName(): string {\n    if (['.xml', '.plist'].includes(this.settings.extension)) {\n      return escapeXMLCharacters(this.config.name);\n    }\n    return this.config.name;\n  }\n\n  end() {\n    const name = this.getNormalizedName();\n    const replaced = this.data\n      .replace(/Hello App Display Name/g, name)\n      .replace(/HelloWorld/g, IOSConfig.XcodeUtils.sanitizedName(name))\n      .replace(/helloworld/g, IOSConfig.XcodeUtils.sanitizedName(name.toLowerCase()));\n    super.write(replaced);\n    return super.end();\n  }\n}\n\n// Binary files, don't process these (avoid decoding as utf8)\nconst binaryExtensions = ['.png', '.jar', '.keystore', '.otf', '.ttf'];\n\nexport function createFileTransform(config: TemplateConfig) {\n  return function transformFile(entry: ReadEntry) {\n    const extension = path.extname(entry.path);\n    if (!binaryExtensions.includes(extension) && config.name) {\n      return new Transformer(config, { extension });\n    }\n    return undefined;\n  };\n}\n\n/**\n * Extract a template app to a given file path and clean up any properties left over from npm to\n * prepare it for usage.\n */\nexport async function extractAndPrepareTemplateAppAsync(\n  templateSpec: PackageSpec,\n  projectRoot: string,\n  config: AppJsonInput | BareAppConfig\n) {\n  await extractTemplateAppAsync(templateSpec, projectRoot, {\n    name: 'name' in config ? config.name : config.expo.name,\n  });\n\n  const appFile = new JsonFile(path.join(projectRoot, 'app.json'));\n  const appJson = merge(await appFile.readAsync(), config);\n  await appFile.writeAsync(appJson);\n\n  const packageFile = new JsonFile(path.join(projectRoot, 'package.json'));\n  let packageJson = await packageFile.readAsync();\n  // Adding `private` stops npm from complaining about missing `name` and `version` fields.\n  // We don't add a `name` field because it also exists in `app.json`.\n  packageJson = { ...packageJson, private: true };\n  // These are metadata fields related to the template package, let's remove them from the package.json.\n  delete packageJson.name;\n  delete packageJson.version;\n  delete packageJson.description;\n  delete packageJson.tags;\n  delete packageJson.repository;\n  // pacote adds these, but we don't want them in the package.json of the project.\n  delete packageJson._resolved;\n  delete packageJson._integrity;\n  delete packageJson._from;\n  await packageFile.writeAsync(packageJson);\n\n  return projectRoot;\n}\n\n/**\n * Extract a template app to a given file path.\n */\nexport async function extractTemplateAppAsync(\n  templateSpec: PackageSpec,\n  targetPath: string,\n  config: TemplateConfig\n) {\n  await pacote.tarball.stream(\n    templateSpec,\n    tarStream => {\n      return extractTemplateAppAsyncImpl(targetPath, config, tarStream);\n    },\n    {\n      cache: path.join(UserSettings.dotExpoHomeDirectory(), 'template-cache'),\n    }\n  );\n\n  return targetPath;\n}\n\nexport async function extractTemplateAppFolderAsync(\n  tarFilePath: string,\n  targetPath: string,\n  config: TemplateConfig\n) {\n  const readStream = fs.createReadStream(tarFilePath);\n  await extractTemplateAppAsyncImpl(targetPath, config, readStream);\n  return targetPath;\n}\n\nexport function createEntryResolver(name: string) {\n  return (entry: ReadEntry) => {\n    if (name) {\n      // Rewrite paths for bare workflow\n      entry.path = entry.path\n        .replace(\n          /HelloWorld/g,\n          entry.path.includes('android')\n            ? IOSConfig.XcodeUtils.sanitizedName(name.toLowerCase())\n            : IOSConfig.XcodeUtils.sanitizedName(name)\n        )\n        .replace(/helloworld/g, IOSConfig.XcodeUtils.sanitizedName(name).toLowerCase());\n    }\n    if (entry.type && /^file$/i.test(entry.type) && path.basename(entry.path) === 'gitignore') {\n      // Rename `gitignore` because npm ignores files named `.gitignore` when publishing.\n      // See: https://github.com/npm/npm/issues/1862\n      entry.path = entry.path.replace(/gitignore$/, '.gitignore');\n    }\n  };\n}\n\nasync function extractTemplateAppAsyncImpl(\n  targetPath: string,\n  config: TemplateConfig,\n  tarStream: Readable\n) {\n  await fs.mkdirp(targetPath);\n  await new Promise((resolve, reject) => {\n    const extractStream = tar.x({\n      cwd: targetPath,\n      strip: 1,\n      // TODO(ville): pending https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36598\n      transform: createFileTransform(config),\n      onentry: createEntryResolver(config.name),\n    });\n    tarStream.on('error', reject);\n    extractStream.on('error', reject);\n    extractStream.on('close', resolve);\n    tarStream.pipe(extractStream);\n  });\n}\n"],"file":"extractTemplateAppAsync.js"}