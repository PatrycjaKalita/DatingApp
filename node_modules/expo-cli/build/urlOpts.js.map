{"version":3,"sources":["../src/urlOpts.ts"],"names":["addOptions","program","option","optsAsync","projectRoot","options","opts","ProjectSettings","readAsync","host","lan","localhost","tunnel","filter","i","length","CommandError","hostType","offline","ConnectionStatus","setIsOffline","scheme","devClient","setAsync","printQRCode","url","qrcodeTerminal","generate","code","Log","log","handleMobileOptsAsync","results","Promise","all","android","webOnly","Android","openWebProjectAsync","openProjectAsync","ios","Simulator","shouldPrompt","web","Webpack","openAsync","errors","reduce","prev","curr","success","concat","error","Boolean","isEscapedError","some","AbortCommandError"],"mappings":"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","sourcesContent":["import type { Command } from 'commander';\nimport indentString from 'indent-string';\nimport qrcodeTerminal from 'qrcode-terminal';\nimport { Android, ConnectionStatus, ProjectSettings, Simulator, Webpack } from 'xdl';\n\nimport CommandError, { AbortCommandError } from './CommandError';\nimport Log from './log';\nimport { getDevClientSchemeAsync } from './schemes';\n\n// NOTE: if you update this, you should also update assertValidOptions in UrlUtils.ts\nexport type URLOptions = {\n  devClient?: boolean;\n  android?: boolean;\n  ios?: boolean;\n  web?: boolean;\n  scheme?: string;\n  host?: 'lan' | 'tunnel' | 'localhost';\n  tunnel?: boolean;\n  lan?: boolean;\n  localhost?: boolean;\n};\n\nfunction addOptions(program: Command) {\n  program\n    .option(\n      '--dev-client',\n      'Experimental: Starts the bundler for use with the expo-development-client'\n    )\n    .option('--scheme <scheme>', 'Custom URI protocol to use with a dev client')\n    .option('-a, --android', 'Opens your app in Expo Go on a connected Android device')\n    .option(\n      '-i, --ios',\n      'Opens your app in Expo Go in a currently running iOS simulator on your computer'\n    )\n    .option('-w, --web', 'Opens your app in a web browser')\n    .option(\n      '-m, --host [mode]',\n      'lan (default), tunnel, localhost. Type of host to use. \"tunnel\" allows you to view your link on other networks'\n    )\n    .option('--tunnel', 'Same as --host tunnel')\n    .option('--lan', 'Same as --host lan')\n    .option('--localhost', 'Same as --host localhost');\n}\n\nasync function optsAsync(projectRoot: string, options: any) {\n  const opts = await ProjectSettings.readAsync(projectRoot);\n\n  if ([options.host, options.lan, options.localhost, options.tunnel].filter(i => i).length > 1) {\n    throw new CommandError(\n      'BAD_ARGS',\n      'Specify at most one of --host, --tunnel, --lan, and --localhost'\n    );\n  }\n\n  opts.hostType = 'lan';\n\n  if (options.offline) {\n    // TODO: maybe let people know that we will force localhost with offline?\n    ConnectionStatus.setIsOffline(true);\n    opts.hostType = 'localhost';\n  }\n\n  if (options.host) {\n    opts.hostType = options.host;\n  } else if (options.tunnel) {\n    opts.hostType = 'tunnel';\n  } else if (options.lan) {\n    opts.hostType = 'lan';\n  } else if (options.localhost) {\n    opts.hostType = 'localhost';\n  }\n\n  if (typeof options.scheme === 'string') {\n    // Use the custom scheme\n    opts.scheme = options.scheme ?? null;\n  } else if (options.devClient) {\n    // Attempt to find the scheme or warn the user how to setup a custom scheme\n    opts.scheme = await getDevClientSchemeAsync(projectRoot);\n  } else {\n    // Ensure this is reset when users don't use `--scheme` or `--dev-client`\n    opts.scheme = null;\n  }\n\n  await ProjectSettings.setAsync(projectRoot, opts);\n\n  return opts;\n}\n\nfunction printQRCode(url: string) {\n  qrcodeTerminal.generate(url, code => Log.log(`${indentString(code, 1)}\\n`));\n}\n\nasync function handleMobileOptsAsync(\n  projectRoot: string,\n  options: Pick<URLOptions, 'devClient' | 'ios' | 'android' | 'web'> & { webOnly?: boolean }\n) {\n  const results = await Promise.all([\n    (async () => {\n      if (options.android) {\n        if (options.webOnly) {\n          return await Android.openWebProjectAsync({ projectRoot });\n        } else {\n          return await Android.openProjectAsync({\n            projectRoot,\n            devClient: options.devClient ?? false,\n          });\n        }\n      }\n      return null;\n    })(),\n    (async () => {\n      if (options.ios) {\n        if (options.webOnly) {\n          return await Simulator.openWebProjectAsync({ projectRoot, shouldPrompt: false });\n        } else {\n          return await Simulator.openProjectAsync({\n            projectRoot,\n            devClient: options.devClient ?? false,\n            shouldPrompt: false,\n          });\n        }\n      }\n      return null;\n    })(),\n    (async () => {\n      if (options.web) {\n        return await Webpack.openAsync(projectRoot);\n      }\n      return null;\n    })(),\n  ]);\n\n  const errors = results\n    .reduce<(string | Error)[]>((prev, curr) => {\n      if (curr && !curr.success) {\n        return prev.concat([curr.error]);\n      }\n      return prev;\n    }, [])\n    .filter(Boolean);\n\n  if (errors.length) {\n    // ctrl+c\n    const isEscapedError = errors.some(error => error === 'escaped');\n    if (isEscapedError) {\n      throw new AbortCommandError();\n    } else {\n      // Throw the first error\n      throw errors[0];\n    }\n  }\n\n  return !!options.android || !!options.ios;\n}\n\nexport default {\n  addOptions,\n  handleMobileOptsAsync,\n  printQRCode,\n  optsAsync,\n};\n"],"file":"urlOpts.js"}