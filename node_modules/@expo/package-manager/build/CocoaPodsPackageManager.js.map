{"version":3,"file":"CocoaPodsPackageManager.js","sourceRoot":"","sources":["../src/CocoaPodsPackageManager.ts"],"names":[],"mappings":"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","sourcesContent":["import spawnAsync, { SpawnOptions, SpawnResult } from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport { existsSync } from 'fs';\nimport { Ora } from 'ora';\nimport path from 'path';\n\nimport { PackageManager, spawnSudoAsync } from './PackageManager';\n\nexport type CocoaPodsErrorCode = 'NON_INTERACTIVE' | 'NO_CLI' | 'COMMAND_FAILED';\n\nexport class CocoaPodsError extends Error {\n  readonly name = 'CocoaPodsError';\n  readonly isPackageManagerError = true;\n\n  constructor(message: string, public code: CocoaPodsErrorCode, public cause?: Error) {\n    super(cause ? `${message}\\n└─ Cause: ${cause.message}` : message);\n  }\n}\n\nexport function extractMissingDependencyError(error: string): [string, string] | null {\n  // [!] Unable to find a specification for `expo-dev-menu-interface` depended upon by `expo-dev-launcher`\n  const results = error.match(\n    /Unable to find a specification for ['\"`]([\\w-_\\d\\s]+)['\"`] depended upon by ['\"`]([\\w-_\\d\\s]+)['\"`]/\n  );\n  if (results) {\n    return [results[1], results[2]];\n  }\n  return null;\n}\n\nexport class CocoaPodsPackageManager implements PackageManager {\n  options: SpawnOptions;\n\n  private silent: boolean;\n\n  static getPodProjectRoot(projectRoot: string): string | null {\n    if (CocoaPodsPackageManager.isUsingPods(projectRoot)) return projectRoot;\n    const iosProject = path.join(projectRoot, 'ios');\n    if (CocoaPodsPackageManager.isUsingPods(iosProject)) return iosProject;\n    const macOsProject = path.join(projectRoot, 'macos');\n    if (CocoaPodsPackageManager.isUsingPods(macOsProject)) return macOsProject;\n    return null;\n  }\n\n  static isUsingPods(projectRoot: string): boolean {\n    return existsSync(path.join(projectRoot, 'Podfile'));\n  }\n\n  static async gemInstallCLIAsync(\n    nonInteractive: boolean = false,\n    spawnOptions: SpawnOptions = { stdio: 'inherit' }\n  ): Promise<void> {\n    const options = ['install', 'cocoapods', '--no-document'];\n\n    try {\n      // In case the user has run sudo before running the command we can properly install CocoaPods without prompting for an interaction.\n      await spawnAsync('gem', options, spawnOptions);\n    } catch (error) {\n      if (nonInteractive) {\n        throw new CocoaPodsError(\n          'Failed to install CocoaPods CLI with gem (recommended)',\n          'COMMAND_FAILED',\n          error\n        );\n      }\n      // If the user doesn't have permission then we can prompt them to use sudo.\n      await spawnSudoAsync(['gem', ...options], spawnOptions);\n    }\n  }\n\n  static async brewLinkCLIAsync(spawnOptions: SpawnOptions = { stdio: 'inherit' }): Promise<void> {\n    await spawnAsync('brew', ['link', 'cocoapods'], spawnOptions);\n  }\n\n  static async brewInstallCLIAsync(\n    spawnOptions: SpawnOptions = { stdio: 'inherit' }\n  ): Promise<void> {\n    await spawnAsync('brew', ['install', 'cocoapods'], spawnOptions);\n  }\n\n  static async installCLIAsync({\n    nonInteractive = false,\n    spawnOptions = { stdio: 'inherit' },\n  }: {\n    nonInteractive?: boolean;\n    spawnOptions?: SpawnOptions;\n  }): Promise<boolean> {\n    if (!spawnOptions) {\n      spawnOptions = { stdio: 'inherit' };\n    }\n    const silent = !!spawnOptions.ignoreStdio;\n\n    try {\n      !silent && console.log(`\\u203A Attempting to install CocoaPods CLI with Gem`);\n      await CocoaPodsPackageManager.gemInstallCLIAsync(nonInteractive, spawnOptions);\n      !silent && console.log(`\\u203A Successfully installed CocoaPods CLI with Gem`);\n      return true;\n    } catch (error) {\n      if (!silent) {\n        console.log(chalk.yellow(`\\u203A Failed to install CocoaPods CLI with Gem`));\n        console.log(chalk.red(error.stderr ?? error.message));\n        console.log(`\\u203A Attempting to install CocoaPods CLI with Homebrew`);\n      }\n      try {\n        await CocoaPodsPackageManager.brewInstallCLIAsync(spawnOptions);\n        if (!(await CocoaPodsPackageManager.isCLIInstalledAsync(spawnOptions))) {\n          try {\n            await CocoaPodsPackageManager.brewLinkCLIAsync(spawnOptions);\n            // Still not available after linking? Bail out\n            if (!(await CocoaPodsPackageManager.isCLIInstalledAsync(spawnOptions))) {\n              throw new CocoaPodsError(\n                'CLI could not be installed automatically with gem or Homebrew, please install CocoaPods manually and try again',\n                'NO_CLI',\n                error\n              );\n            }\n          } catch (error) {\n            throw new CocoaPodsError(\n              'Homebrew installation appeared to succeed but CocoaPods CLI not found in PATH and unable to link.',\n              'NO_CLI',\n              error\n            );\n          }\n        }\n\n        !silent && console.log(`\\u203A Successfully installed CocoaPods CLI with Homebrew`);\n        return true;\n      } catch (error) {\n        !silent &&\n          console.warn(\n            chalk.yellow(\n              `\\u203A Failed to install CocoaPods with Homebrew. Please install CocoaPods CLI manually and try again.`\n            )\n          );\n        throw new CocoaPodsError(\n          `Failed to install CocoaPods with Homebrew. Please install CocoaPods CLI manually and try again.`,\n          'NO_CLI',\n          error\n        );\n      }\n    }\n  }\n\n  static isAvailable(projectRoot: string, silent: boolean): boolean {\n    if (process.platform !== 'darwin') {\n      !silent && console.log(chalk.red('CocoaPods is only supported on macOS machines'));\n      return false;\n    }\n    if (!CocoaPodsPackageManager.isUsingPods(projectRoot)) {\n      !silent && console.log(chalk.yellow('CocoaPods is not supported in this project'));\n      return false;\n    }\n    return true;\n  }\n\n  static async isCLIInstalledAsync(\n    spawnOptions: SpawnOptions = { stdio: 'inherit' }\n  ): Promise<boolean> {\n    try {\n      await spawnAsync('pod', ['--version'], spawnOptions);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  constructor({ cwd, silent }: { cwd: string; silent?: boolean }) {\n    this.silent = !!silent;\n    this.options = {\n      cwd,\n      ...(silent\n        ? { stdio: 'pipe' }\n        : {\n            stdio: ['inherit', 'inherit', 'pipe'],\n          }),\n    };\n  }\n\n  get name() {\n    return 'CocoaPods';\n  }\n\n  async installAsync({ spinner }: { spinner?: Ora } = {}) {\n    await this._installAsync({ spinner });\n  }\n\n  public isCLIInstalledAsync() {\n    return CocoaPodsPackageManager.isCLIInstalledAsync(this.options);\n  }\n\n  public installCLIAsync() {\n    return CocoaPodsPackageManager.installCLIAsync({\n      nonInteractive: true,\n      spawnOptions: this.options,\n    });\n  }\n\n  private async _installAsync({\n    spinner,\n    shouldUpdate = true,\n  }: { spinner?: Ora; shouldUpdate?: boolean } = {}): Promise<SpawnResult> {\n    try {\n      return await this._runAsync(['install']);\n    } catch (error) {\n      const output = error.output.join('\\n').trim();\n\n      const isPodRepoUpdateError = output.includes('pod repo update');\n      // When pods are outdated, they'll throw an error informing you to run \"pod repo update\"\n      // Attempt to run that command and try installing again.\n      if (isPodRepoUpdateError && shouldUpdate) {\n        const warningInfo = extractMissingDependencyError(output);\n        let message: string;\n        if (warningInfo) {\n          message = `Couldn't install: ${warningInfo[1]} » ${chalk.underline(warningInfo[0])}.`;\n        } else {\n          message = `Couldn't install Pods.`;\n        }\n        message += ` Updating the Pods project and trying again...`;\n        if (spinner) {\n          spinner.text = chalk.bold(message);\n        }\n        !this.silent && console.warn(chalk.yellow(message));\n        await this.podRepoUpdateAsync();\n        // Include a boolean to ensure pod repo update isn't invoked in the unlikely case where the pods fail to update.\n        return await this._installAsync({ spinner, shouldUpdate: false });\n      } else {\n        const cwd = this.options.cwd || process.cwd();\n        if (error.stdout.match(/No [`'\"]Podfile[`'\"] found in the project directory/)) {\n          error.message = `No Podfile found in directory: ${cwd}. Ensure CocoaPods is setup any try again.`;\n        } else if (isPodRepoUpdateError) {\n          const warningInfo = extractMissingDependencyError(output);\n          let reason: string;\n          if (warningInfo) {\n            reason = `Couldn't install: ${warningInfo[1]} » ${chalk.underline(warningInfo[0])}`;\n          } else {\n            reason = `This is often due to native package versions mismatching`;\n          }\n\n          let solution: string;\n          if (warningInfo?.[0]) {\n            // If the missing package is named `expo-dev-menu`, `react-native`, etc. then it might not be installed in the project.\n            if (warningInfo[0].match(/^(?:@?expo|@?react)(-|\\/)/)) {\n              solution = `Ensure the node module \"${warningInfo[0]}\" is installed in your project, then run \\`npx pod-install\\` to try again.`;\n            } else {\n              solution = `Ensure the CocoaPod \"${warningInfo[0]}\" is installed in your project, then run \\`npx pod-install\\` to try again.`;\n            }\n          } else {\n            solution = `Try deleting the \\`ios/Pods\\` folder or the \\`ios/Podfile.lock\\` file and running \\`npx pod-install\\` to resolve.`;\n          }\n          error.message = `${reason}. ${solution}`;\n          throw new CocoaPodsError('Command `pod repo update` failed.', 'COMMAND_FAILED', error);\n        } else {\n          let stderr = error.stderr.trim();\n\n          // CocoaPods CLI prints the useful error to stdout...\n          const usefulError = error.stdout.match(/\\[!\\]\\s((?:.|\\n)*)/)?.[1];\n\n          // If there is a useful error message then prune the less useful info.\n          if (usefulError) {\n            // Delete unhelpful CocoaPods CLI error message.\n            if (error.message.match(/pod exited with non-zero code: 1/)) {\n              error.message = null;\n            }\n            // Remove `<PBXResourcesBuildPhase UUID=`13B07F8E1A680F5B00A75B9A`>` type errors when useful messages exist.\n            if (stderr.match(/PBXResourcesBuildPhase/)) {\n              stderr = null;\n            }\n          }\n\n          error.message = [usefulError, error.message, stderr].filter(Boolean).join('\\n');\n        }\n\n        throw new CocoaPodsError('Command `pod install` failed.', 'COMMAND_FAILED', error);\n      }\n    }\n  }\n\n  async addAsync(...names: string[]) {\n    throw new Error('Unimplemented');\n  }\n\n  async addDevAsync(...names: string[]) {\n    throw new Error('Unimplemented');\n  }\n\n  async versionAsync() {\n    const { stdout } = await spawnAsync('pod', ['--version'], this.options);\n    return stdout.trim();\n  }\n\n  async getConfigAsync(key: string): Promise<string> {\n    throw new Error('Unimplemented');\n  }\n\n  async removeLockfileAsync() {\n    throw new Error('Unimplemented');\n  }\n\n  async cleanAsync() {\n    throw new Error('Unimplemented');\n  }\n\n  // Private\n  private async podRepoUpdateAsync(): Promise<void> {\n    try {\n      await this._runAsync(['repo', 'update']);\n    } catch (error) {\n      error.message = error.message || (error.stderr ?? error.stdout);\n\n      throw new CocoaPodsError('The command `pod repo update` failed', 'COMMAND_FAILED', error);\n    }\n  }\n\n  private async _runAsync(args: string[]): Promise<SpawnResult> {\n    if (!this.silent) {\n      console.log(`> pod ${args.join(' ')}`);\n    }\n    return spawnAsync('pod', [...args], this.options);\n  }\n}\n"]}