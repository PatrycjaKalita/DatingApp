{"version":3,"file":"MetroDevServer.js","sourceRoot":"","sources":["../src/MetroDevServer.ts"],"names":[],"mappings":"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","sourcesContent":["import type Log from '@expo/bunyan';\nimport { ExpoConfig, getConfigFilePaths } from '@expo/config';\nimport * as ExpoMetroConfig from '@expo/metro-config';\nimport {\n  createDevServerMiddleware,\n  securityHeadersMiddleware,\n} from '@react-native-community/cli-server-api';\nimport bodyParser from 'body-parser';\nimport type { Server as ConnectServer } from 'connect';\nimport http from 'http';\nimport type Metro from 'metro';\nimport path from 'path';\nimport semver from 'semver';\n\nimport {\n  buildHermesBundleAsync,\n  isEnableHermesManaged,\n  maybeInconsistentEngineAsync,\n} from './HermesBundler';\nimport LogReporter from './LogReporter';\nimport { createDevServerAsync } from './metro/createDevServerAsync';\nimport {\n  importMetroFromProject,\n  importMetroServerFromProject,\n} from './metro/importMetroFromProject';\nimport clientLogsMiddleware from './middleware/clientLogsMiddleware';\nimport createJsInspectorMiddleware from './middleware/createJsInspectorMiddleware';\nimport { remoteDevtoolsCorsMiddleware } from './middleware/remoteDevtoolsCorsMiddleware';\nimport { remoteDevtoolsSecurityHeadersMiddleware } from './middleware/remoteDevtoolsSecurityHeadersMiddleware';\nimport { replaceMiddlewareWith } from './middleware/replaceMiddlewareWith';\n\nexport type MetroDevServerOptions = ExpoMetroConfig.LoadOptions & {\n  logger: Log;\n  quiet?: boolean;\n};\nexport type BundleOptions = {\n  entryPoint: string;\n  platform: 'android' | 'ios' | 'web';\n  dev?: boolean;\n  minify?: boolean;\n  sourceMapUrl?: string;\n};\nexport type BundleAssetWithFileHashes = Metro.AssetData & {\n  fileHashes: string[]; // added by the hashAssets asset plugin\n};\nexport type BundleOutput = {\n  code: string;\n  map: string;\n  hermesBytecodeBundle?: Uint8Array;\n  hermesSourcemap?: string;\n  assets: readonly BundleAssetWithFileHashes[];\n};\nexport type MessageSocket = {\n  broadcast: (method: string, params?: Record<string, any> | undefined) => void;\n};\n\nexport async function runMetroDevServerAsync(\n  projectRoot: string,\n  options: MetroDevServerOptions\n): Promise<{\n  server: http.Server;\n  middleware: any;\n  messageSocket: MessageSocket;\n}> {\n  const reporter = new LogReporter(options.logger);\n\n  const metroConfig = await ExpoMetroConfig.loadAsync(projectRoot, { reporter, ...options });\n\n  const { middleware, attachToServer } = createDevServerMiddleware({\n    port: metroConfig.server.port,\n    watchFolders: metroConfig.watchFolders,\n  });\n\n  // securityHeadersMiddleware does not support cross-origin requests for remote devtools to get the sourcemap.\n  // We replace with the enhanced version.\n  replaceMiddlewareWith(\n    middleware as ConnectServer,\n    securityHeadersMiddleware,\n    remoteDevtoolsSecurityHeadersMiddleware\n  );\n  middleware.use(remoteDevtoolsCorsMiddleware);\n\n  middleware.use(bodyParser.json());\n  middleware.use('/logs', clientLogsMiddleware(options.logger));\n  middleware.use('/inspector', createJsInspectorMiddleware());\n\n  const customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;\n  // @ts-ignore can't mutate readonly config\n  metroConfig.server.enhanceMiddleware = (metroMiddleware: any, server: Metro.Server) => {\n    if (customEnhanceMiddleware) {\n      metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);\n    }\n    return middleware.use(metroMiddleware);\n  };\n\n  const { server } = await createDevServerAsync(projectRoot, {\n    config: metroConfig,\n    logger: options.logger,\n  });\n\n  const { messageSocket, eventsSocket } = attachToServer(server);\n  reporter.reportEvent = eventsSocket.reportEvent;\n\n  return {\n    server,\n    middleware,\n    messageSocket,\n  };\n}\n\nlet nextBuildID = 0;\n\n// TODO: deprecate options.target\nexport async function bundleAsync(\n  projectRoot: string,\n  expoConfig: ExpoConfig,\n  options: MetroDevServerOptions,\n  bundles: BundleOptions[]\n): Promise<BundleOutput[]> {\n  const metro = importMetroFromProject(projectRoot);\n  const Server = importMetroServerFromProject(projectRoot);\n\n  const reporter = new LogReporter(options.logger);\n  const config = await ExpoMetroConfig.loadAsync(projectRoot, { reporter, ...options });\n  const buildID = `bundle_${nextBuildID++}`;\n\n  const metroServer = await metro.runMetro(config, {\n    watch: false,\n  });\n\n  const buildAsync = async (bundle: BundleOptions): Promise<BundleOutput> => {\n    const bundleOptions: Metro.BundleOptions = {\n      ...Server.DEFAULT_BUNDLE_OPTIONS,\n      bundleType: 'bundle',\n      platform: bundle.platform,\n      entryFile: bundle.entryPoint,\n      dev: bundle.dev ?? false,\n      minify: bundle.minify ?? !bundle.dev,\n      inlineSourceMap: false,\n      sourceMapUrl: bundle.sourceMapUrl,\n      createModuleIdFactory: config.serializer.createModuleIdFactory,\n      onProgress: (transformedFileCount: number, totalFileCount: number) => {\n        if (!options.quiet) {\n          reporter.update({\n            buildID,\n            type: 'bundle_transform_progressed',\n            transformedFileCount,\n            totalFileCount,\n          });\n        }\n      },\n    };\n    reporter.update({\n      buildID,\n      type: 'bundle_build_started',\n      bundleDetails: {\n        bundleType: bundleOptions.bundleType,\n        platform: bundle.platform,\n        entryFile: bundle.entryPoint,\n        dev: bundle.dev ?? false,\n        minify: bundle.minify ?? false,\n      },\n    });\n    const { code, map } = await metroServer.build(bundleOptions);\n    const assets = (await metroServer.getAssets(\n      bundleOptions\n    )) as readonly BundleAssetWithFileHashes[];\n    reporter.update({\n      buildID,\n      type: 'bundle_build_done',\n    });\n    return { code, map, assets };\n  };\n\n  const maybeAddHermesBundleAsync = async (\n    bundle: BundleOptions,\n    bundleOutput: BundleOutput\n  ): Promise<BundleOutput> => {\n    if (!gteSdkVersion(expoConfig, '42.0.0')) {\n      return bundleOutput;\n    }\n    const isHermesManaged = isEnableHermesManaged(expoConfig, bundle.platform);\n\n    const maybeInconsistentEngine = await maybeInconsistentEngineAsync(\n      projectRoot,\n      bundle.platform,\n      isHermesManaged\n    );\n    if (maybeInconsistentEngine) {\n      const platform = bundle.platform === 'ios' ? 'iOS' : 'Android';\n      const paths = getConfigFilePaths(projectRoot);\n      const configFilePath = paths.dynamicConfigPath ?? paths.staticConfigPath ?? 'app.json';\n      const configFileName = path.basename(configFilePath);\n      throw new Error(\n        `JavaScript engine configuration is inconsistent between ${configFileName} and ${platform} native project.\\n` +\n          `In ${configFileName}: Hermes is ${isHermesManaged ? 'enabled' : 'not enabled'}\\n` +\n          `In ${platform} native project: Hermes is ${\n            isHermesManaged ? 'not enabled' : 'enabled'\n          }\\n` +\n          `Please check the following files for inconsistencies:\\n` +\n          `  - ${configFilePath}\\n` +\n          `  - ${path.join(projectRoot, 'android', 'gradle.properties')}\\n` +\n          `  - ${path.join(projectRoot, 'android', 'app', 'build.gradle')}\\n` +\n          'Learn more: https://expo.fyi/hermes-android-config'\n      );\n    }\n\n    if (isHermesManaged) {\n      options.logger.info(\n        { tag: 'expo' },\n        `💿 Building Hermes bytecode for the bundle - platform[${bundle.platform}]`\n      );\n      const hermesBundleOutput = await buildHermesBundleAsync(\n        projectRoot,\n        bundleOutput.code,\n        bundleOutput.map,\n        bundle.minify\n      );\n      bundleOutput.hermesBytecodeBundle = hermesBundleOutput.hbc;\n      bundleOutput.hermesSourcemap = hermesBundleOutput.sourcemap;\n    }\n\n    return bundleOutput;\n  };\n\n  try {\n    return await Promise.all(\n      bundles.map(async (bundle: BundleOptions) => {\n        const bundleOutput = await buildAsync(bundle);\n        return maybeAddHermesBundleAsync(bundle, bundleOutput);\n      })\n    );\n  } finally {\n    metroServer.end();\n  }\n}\n\n// Cloned from xdl/src/Versions.ts, we cannot use that because of circular dependency\nfunction gteSdkVersion(expJson: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(`${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"]}