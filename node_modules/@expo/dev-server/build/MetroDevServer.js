"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bundleAsync = exports.runMetroDevServerAsync = void 0;
const config_1 = require("@expo/config");
const ExpoMetroConfig = __importStar(require("@expo/metro-config"));
const cli_server_api_1 = require("@react-native-community/cli-server-api");
const body_parser_1 = __importDefault(require("body-parser"));
const path_1 = __importDefault(require("path"));
const semver_1 = __importDefault(require("semver"));
const HermesBundler_1 = require("./HermesBundler");
const LogReporter_1 = __importDefault(require("./LogReporter"));
const createDevServerAsync_1 = require("./metro/createDevServerAsync");
const importMetroFromProject_1 = require("./metro/importMetroFromProject");
const clientLogsMiddleware_1 = __importDefault(require("./middleware/clientLogsMiddleware"));
const createJsInspectorMiddleware_1 = __importDefault(require("./middleware/createJsInspectorMiddleware"));
const remoteDevtoolsCorsMiddleware_1 = require("./middleware/remoteDevtoolsCorsMiddleware");
const remoteDevtoolsSecurityHeadersMiddleware_1 = require("./middleware/remoteDevtoolsSecurityHeadersMiddleware");
const replaceMiddlewareWith_1 = require("./middleware/replaceMiddlewareWith");
async function runMetroDevServerAsync(projectRoot, options) {
    const reporter = new LogReporter_1.default(options.logger);
    const metroConfig = await ExpoMetroConfig.loadAsync(projectRoot, { reporter, ...options });
    const { middleware, attachToServer } = cli_server_api_1.createDevServerMiddleware({
        port: metroConfig.server.port,
        watchFolders: metroConfig.watchFolders,
    });
    // securityHeadersMiddleware does not support cross-origin requests for remote devtools to get the sourcemap.
    // We replace with the enhanced version.
    replaceMiddlewareWith_1.replaceMiddlewareWith(middleware, cli_server_api_1.securityHeadersMiddleware, remoteDevtoolsSecurityHeadersMiddleware_1.remoteDevtoolsSecurityHeadersMiddleware);
    middleware.use(remoteDevtoolsCorsMiddleware_1.remoteDevtoolsCorsMiddleware);
    middleware.use(body_parser_1.default.json());
    middleware.use('/logs', clientLogsMiddleware_1.default(options.logger));
    middleware.use('/inspector', createJsInspectorMiddleware_1.default());
    const customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;
    // @ts-ignore can't mutate readonly config
    metroConfig.server.enhanceMiddleware = (metroMiddleware, server) => {
        if (customEnhanceMiddleware) {
            metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);
        }
        return middleware.use(metroMiddleware);
    };
    const { server } = await createDevServerAsync_1.createDevServerAsync(projectRoot, {
        config: metroConfig,
        logger: options.logger,
    });
    const { messageSocket, eventsSocket } = attachToServer(server);
    reporter.reportEvent = eventsSocket.reportEvent;
    return {
        server,
        middleware,
        messageSocket,
    };
}
exports.runMetroDevServerAsync = runMetroDevServerAsync;
let nextBuildID = 0;
// TODO: deprecate options.target
async function bundleAsync(projectRoot, expoConfig, options, bundles) {
    const metro = importMetroFromProject_1.importMetroFromProject(projectRoot);
    const Server = importMetroFromProject_1.importMetroServerFromProject(projectRoot);
    const reporter = new LogReporter_1.default(options.logger);
    const config = await ExpoMetroConfig.loadAsync(projectRoot, { reporter, ...options });
    const buildID = `bundle_${nextBuildID++}`;
    const metroServer = await metro.runMetro(config, {
        watch: false,
    });
    const buildAsync = async (bundle) => {
        var _a, _b, _c, _d;
        const bundleOptions = {
            ...Server.DEFAULT_BUNDLE_OPTIONS,
            bundleType: 'bundle',
            platform: bundle.platform,
            entryFile: bundle.entryPoint,
            dev: (_a = bundle.dev) !== null && _a !== void 0 ? _a : false,
            minify: (_b = bundle.minify) !== null && _b !== void 0 ? _b : !bundle.dev,
            inlineSourceMap: false,
            sourceMapUrl: bundle.sourceMapUrl,
            createModuleIdFactory: config.serializer.createModuleIdFactory,
            onProgress: (transformedFileCount, totalFileCount) => {
                if (!options.quiet) {
                    reporter.update({
                        buildID,
                        type: 'bundle_transform_progressed',
                        transformedFileCount,
                        totalFileCount,
                    });
                }
            },
        };
        reporter.update({
            buildID,
            type: 'bundle_build_started',
            bundleDetails: {
                bundleType: bundleOptions.bundleType,
                platform: bundle.platform,
                entryFile: bundle.entryPoint,
                dev: (_c = bundle.dev) !== null && _c !== void 0 ? _c : false,
                minify: (_d = bundle.minify) !== null && _d !== void 0 ? _d : false,
            },
        });
        const { code, map } = await metroServer.build(bundleOptions);
        const assets = (await metroServer.getAssets(bundleOptions));
        reporter.update({
            buildID,
            type: 'bundle_build_done',
        });
        return { code, map, assets };
    };
    const maybeAddHermesBundleAsync = async (bundle, bundleOutput) => {
        var _a, _b;
        if (!gteSdkVersion(expoConfig, '42.0.0')) {
            return bundleOutput;
        }
        const isHermesManaged = HermesBundler_1.isEnableHermesManaged(expoConfig, bundle.platform);
        const maybeInconsistentEngine = await HermesBundler_1.maybeInconsistentEngineAsync(projectRoot, bundle.platform, isHermesManaged);
        if (maybeInconsistentEngine) {
            const platform = bundle.platform === 'ios' ? 'iOS' : 'Android';
            const paths = config_1.getConfigFilePaths(projectRoot);
            const configFilePath = (_b = (_a = paths.dynamicConfigPath) !== null && _a !== void 0 ? _a : paths.staticConfigPath) !== null && _b !== void 0 ? _b : 'app.json';
            const configFileName = path_1.default.basename(configFilePath);
            throw new Error(`JavaScript engine configuration is inconsistent between ${configFileName} and ${platform} native project.\n` +
                `In ${configFileName}: Hermes is ${isHermesManaged ? 'enabled' : 'not enabled'}\n` +
                `In ${platform} native project: Hermes is ${isHermesManaged ? 'not enabled' : 'enabled'}\n` +
                `Please check the following files for inconsistencies:\n` +
                `  - ${configFilePath}\n` +
                `  - ${path_1.default.join(projectRoot, 'android', 'gradle.properties')}\n` +
                `  - ${path_1.default.join(projectRoot, 'android', 'app', 'build.gradle')}\n` +
                'Learn more: https://expo.fyi/hermes-android-config');
        }
        if (isHermesManaged) {
            options.logger.info({ tag: 'expo' }, `ðŸ’¿ Building Hermes bytecode for the bundle - platform[${bundle.platform}]`);
            const hermesBundleOutput = await HermesBundler_1.buildHermesBundleAsync(projectRoot, bundleOutput.code, bundleOutput.map, bundle.minify);
            bundleOutput.hermesBytecodeBundle = hermesBundleOutput.hbc;
            bundleOutput.hermesSourcemap = hermesBundleOutput.sourcemap;
        }
        return bundleOutput;
    };
    try {
        return await Promise.all(bundles.map(async (bundle) => {
            const bundleOutput = await buildAsync(bundle);
            return maybeAddHermesBundleAsync(bundle, bundleOutput);
        }));
    }
    finally {
        metroServer.end();
    }
}
exports.bundleAsync = bundleAsync;
// Cloned from xdl/src/Versions.ts, we cannot use that because of circular dependency
function gteSdkVersion(expJson, sdkVersion) {
    if (!expJson.sdkVersion) {
        return false;
    }
    if (expJson.sdkVersion === 'UNVERSIONED') {
        return true;
    }
    try {
        return semver_1.default.gte(expJson.sdkVersion, sdkVersion);
    }
    catch (e) {
        throw new Error(`${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`);
    }
}
//# sourceMappingURL=MetroDevServer.js.map