"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const net_1 = __importDefault(require("net"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const open_1 = __importDefault(require("open"));
const path_1 = __importDefault(require("path"));
const tls_1 = require("tls");
const url_1 = require("url");
function createJsInspectorMiddleware() {
    return async function (req, res, next) {
        var _a;
        const { origin, searchParams } = new url_1.URL((_a = req.url) !== null && _a !== void 0 ? _a : '/', getServerBase(req));
        const applicationId = searchParams.get('applicationId');
        if (!applicationId) {
            res.writeHead(400).end('Missing applicationId');
            return;
        }
        const target = await queryInspectorTargetAsync(origin, applicationId);
        if (!target) {
            res.writeHead(404).end('Unable to find inspector target from metro-inspector-proxy');
            return;
        }
        if (req.method === 'GET') {
            const data = JSON.stringify(target);
            res.writeHead(200, {
                'Content-Type': 'application/json; charset=UTF-8',
                'Cache-Control': 'no-cache',
                'Content-Length': data.length.toString(),
            });
            res.end(data);
        }
        else if (req.method === 'POST' || req.method === 'PUT') {
            // To update devtoolsFrontendRev, find the full commit hash in the url:
            // https://chromium.googlesource.com/chromium/src.git/+log/refs/tags/{CHROME_VERSION}/chrome/VERSION
            //
            // 1. Replace {CHROME_VERSION} with the target chrome version
            // 2. Click the first log item in the webpage
            // 3. The full commit hash is the desired revision
            const devtoolsFrontendRev = 'e3cd97fc771b893b7fd1879196d1215b622c2bed'; // Chrome 90.0.4430.212
            const urlBase = `https://chrome-devtools-frontend.appspot.com/serve_rev/@${devtoolsFrontendRev}/inspector.html`;
            const ws = target.webSocketDebuggerUrl.replace('ws://[::]:', 'localhost:');
            const url = `${urlBase}?experiments=true&v8only=true&ws=${encodeURIComponent(ws)}`;
            launchChromiumAsync(url);
            res.end();
        }
        else {
            res.writeHead(405);
        }
    };
}
exports.default = createJsInspectorMiddleware;
async function queryInspectorTargetAsync(origin, appId) {
    const resp = await node_fetch_1.default(`${origin}/json/list`);
    const apps = await resp.json();
    let target = null;
    for (const app of apps) {
        if (app.description === appId && app.vm !== "don't use") {
            target = app;
            break;
        }
    }
    return target;
}
function getServerBase(req) {
    const scheme = req.socket instanceof tls_1.TLSSocket && req.socket.encrypted === true ? 'https' : 'http';
    const { localAddress, localPort } = req.socket;
    const address = net_1.default.isIPv6(localAddress) ? `[${localAddress}]` : localAddress;
    return `${scheme}:${address}:${localPort}`;
}
async function launchChromiumAsync(url) {
    // For dev-client connecting metro in LAN, the request to fetch sourcemaps may be blocked by Chromium
    // with insecure-content (https page send xhr for http resource).
    // Adding `--allow-running-insecure-content` to overcome this limitation
    // without users manually allow insecure-content in site settings.
    // However, if there is existing chromium browser process, the argument will not take effect.
    // We also pass a `--user-data-dir=` as temporary profile and force chromium to create new browser process.
    const tmpDir = require('temp-dir');
    const tempProfileDir = fs_extra_1.default.mkdtempSync(path_1.default.join(tmpDir, 'chromium-for-inspector-'));
    const launchArgs = [
        '--allow-running-insecure-content',
        `--user-data-dir=${tempProfileDir}`,
        '--no-first-run',
        '--no-startup-window',
        '--no-default-browser-check',
    ];
    try {
        const result = await open_1.default(url, {
            app: {
                name: open_1.default.apps.chrome,
                arguments: launchArgs,
            },
            newInstance: true,
            wait: true,
        });
        if (result.exitCode !== 0) {
            await open_1.default(url, {
                app: {
                    name: open_1.default.apps.edge,
                    arguments: launchArgs,
                },
                newInstance: true,
                wait: true,
            });
        }
    }
    finally {
        await fs_extra_1.default.remove(tempProfileDir);
    }
}
//# sourceMappingURL=createJsInspectorMiddleware.js.map