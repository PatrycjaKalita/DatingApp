{"version":3,"file":"createJsInspectorMiddleware.js","sourceRoot":"","sources":["../../src/middleware/createJsInspectorMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NextHandleFunction } from 'connect';\nimport fs from 'fs-extra';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport net from 'net';\nimport fetch from 'node-fetch';\nimport open from 'open';\nimport path from 'path';\nimport { TLSSocket } from 'tls';\nimport { URL } from 'url';\n\ninterface MetroInspectorProxyApp {\n  description: string;\n  devtoolsFrontendUrl: string;\n  faviconUrl: string;\n  id: string;\n  title: string;\n  type: 'node';\n  vm: 'Hermes' | \"don't use\";\n  webSocketDebuggerUrl: string;\n}\n\nexport default function createJsInspectorMiddleware(): NextHandleFunction {\n  return async function (req: IncomingMessage, res: ServerResponse, next: (err?: Error) => void) {\n    const { origin, searchParams } = new URL(req.url ?? '/', getServerBase(req));\n    const applicationId = searchParams.get('applicationId');\n    if (!applicationId) {\n      res.writeHead(400).end('Missing applicationId');\n      return;\n    }\n\n    const target = await queryInspectorTargetAsync(origin, applicationId);\n    if (!target) {\n      res.writeHead(404).end('Unable to find inspector target from metro-inspector-proxy');\n      return;\n    }\n\n    if (req.method === 'GET') {\n      const data = JSON.stringify(target);\n      res.writeHead(200, {\n        'Content-Type': 'application/json; charset=UTF-8',\n        'Cache-Control': 'no-cache',\n        'Content-Length': data.length.toString(),\n      });\n      res.end(data);\n    } else if (req.method === 'POST' || req.method === 'PUT') {\n      // To update devtoolsFrontendRev, find the full commit hash in the url:\n      // https://chromium.googlesource.com/chromium/src.git/+log/refs/tags/{CHROME_VERSION}/chrome/VERSION\n      //\n      // 1. Replace {CHROME_VERSION} with the target chrome version\n      // 2. Click the first log item in the webpage\n      // 3. The full commit hash is the desired revision\n      const devtoolsFrontendRev = 'e3cd97fc771b893b7fd1879196d1215b622c2bed'; // Chrome 90.0.4430.212\n\n      const urlBase = `https://chrome-devtools-frontend.appspot.com/serve_rev/@${devtoolsFrontendRev}/inspector.html`;\n      const ws = target.webSocketDebuggerUrl.replace('ws://[::]:', 'localhost:');\n      const url = `${urlBase}?experiments=true&v8only=true&ws=${encodeURIComponent(ws)}`;\n      launchChromiumAsync(url);\n      res.end();\n    } else {\n      res.writeHead(405);\n    }\n  };\n}\n\nasync function queryInspectorTargetAsync(\n  origin: string,\n  appId: string\n): Promise<MetroInspectorProxyApp | null> {\n  const resp = await fetch(`${origin}/json/list`);\n  const apps: MetroInspectorProxyApp[] = await resp.json();\n\n  let target: MetroInspectorProxyApp | null = null;\n  for (const app of apps) {\n    if (app.description === appId && app.vm !== \"don't use\") {\n      target = app;\n      break;\n    }\n  }\n\n  return target;\n}\n\nfunction getServerBase(req: IncomingMessage): string {\n  const scheme =\n    req.socket instanceof TLSSocket && req.socket.encrypted === true ? 'https' : 'http';\n  const { localAddress, localPort } = req.socket;\n  const address = net.isIPv6(localAddress) ? `[${localAddress}]` : localAddress;\n  return `${scheme}:${address}:${localPort}`;\n}\n\nasync function launchChromiumAsync(url: string): Promise<void> {\n  // For dev-client connecting metro in LAN, the request to fetch sourcemaps may be blocked by Chromium\n  // with insecure-content (https page send xhr for http resource).\n  // Adding `--allow-running-insecure-content` to overcome this limitation\n  // without users manually allow insecure-content in site settings.\n  // However, if there is existing chromium browser process, the argument will not take effect.\n  // We also pass a `--user-data-dir=` as temporary profile and force chromium to create new browser process.\n  const tmpDir = require('temp-dir');\n  const tempProfileDir = fs.mkdtempSync(path.join(tmpDir, 'chromium-for-inspector-'));\n  const launchArgs = [\n    '--allow-running-insecure-content',\n    `--user-data-dir=${tempProfileDir}`,\n    '--no-first-run',\n    '--no-startup-window',\n    '--no-default-browser-check',\n  ];\n\n  try {\n    const result = await open(url, {\n      app: {\n        name: open.apps.chrome,\n        arguments: launchArgs,\n      },\n      newInstance: true,\n      wait: true,\n    });\n\n    if (result.exitCode !== 0) {\n      await open(url, {\n        app: {\n          name: open.apps.edge,\n          arguments: launchArgs,\n        },\n        newInstance: true,\n        wait: true,\n      });\n    }\n  } finally {\n    await fs.remove(tempProfileDir);\n  }\n}\n"]}