{"version":3,"file":"createDevServerAsync.js","sourceRoot":"","sources":["../../src/metro/createDevServerAsync.ts"],"names":[],"mappings":";;;;;;AACA,sDAA8B;AAC9B,gDAAwB;AAGxB,qEAMkC;AAElC,KAAK,UAAU,SAAS,CACtB,WAAmB,EACnB,MAAgC;IAEhC,MAAM,EAAE,gBAAgB,EAAE,WAAW,EAAE,GAAG,qDAA4B,CAAC,WAAW,CAAC,CAAC;IACpF,MAAM,aAAa,GAAG,MAAM,gBAAgB,CAAC,MAAM,CAAC,WAAW,IAAI,WAAW,CAAC,CAAC;IAChF,OAAO,WAAW,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;AAC5C,CAAC;AAED;;;GAGG;AACH,SAAS,uBAAuB,CAAC,MAA2B;IAC1D,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;QACrB,qBAAqB,EAAE,KAAK;QAC5B,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI;QACxB,IAAI,EAAE,oBAAoB;KAC3B,CAAC,CAAC;AACL,CAAC;AAED,KAAK,UAAU,QAAQ,CAAC,WAAmB,EAAE,MAAgC;IAC3E,MAAM,WAAW,GAAG,qDAA4B,CAAC,WAAW,CAAC,CAAC;IAE9D,MAAM,YAAY,GAAG,MAAM,SAAS,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAE1D,uBAAuB,CAAC,YAAY,CAAC,CAAC;IAEtC,OAAO,IAAI,WAAW,CAAC,YAAY,CAAC,CAAC;AACvC,CAAC;AAQM,KAAK,UAAU,oBAAoB,CACxC,WAAmB,EACnB,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAkB;IAI3C,MAAM,SAAS,GAAG,iBAAO,EAAE,CAAC;IAE5B,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAExD,MAAM,EAAE,cAAc,EAAE,GAAG,8DAAqC,CAAC,WAAW,CAAC,CAAC;IAC9E,MAAM,cAAc,GAAG,wDAA+B,CAAC,WAAW,CAAC,CAAC;IACpE,MAAM,qBAAqB,GAAG,uEAA8C,CAAC,WAAW,CAAC,CAAC;IAE1F,IAAI,UAAU,GAAG,WAAW,CAAC,cAAc,CAAC;IAE5C,4DAA4D;IAC5D,IAAI,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;QACnC,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;KACvE;IAED,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAE1B,IAAI,cAAc,GAAiC,IAAI,CAAC;IACxD,IAAI,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;QACnC,cAAc,GAAG,IAAI,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;KACzD;IAED,MAAM,UAAU,GAAG,cAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IAEhD,8DAA8D;IAC9D,+DAA+D;IAC/D,kDAAkD;IAClD,UAAU,CAAC,OAAO,GAAG,CAAC,CAAC;IAEvB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;YACzC,IAAI,OAAO,EAAE;gBACX,OAAO,CAAC,UAAU,CAAC,CAAC;aACrB;YAED,0BAA0B;YAC1B,yEAAyE;YACzE,MAAM,eAAe,GAAG,IAAI,cAAc,CACxC,WAAW,CAAC,UAAU,EAAE,EACxB,WAAW,CAAC,iBAAiB,EAAE,EAC/B,MAAM,CACP,CAAC;YAEF,kBAAkB;YAClB,mDAAmD;YACnD,qBAAqB,CAAC;gBACpB,UAAU;gBACV,IAAI,EAAE,MAAM;gBACZ,eAAe;aAChB,CAAC,CAAC;YAEH,IAAI,cAAc,EAAE;gBAClB,cAAc,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;gBAEhD,qFAAqF;gBACrF,uEAAuE;gBACvE,+DAA+D;gBAC/D,+EAA+E;gBAC/E,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;aACnE;YAED,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;YAC7B,sFAAsF;YACtF,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,iBAAiB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACjE,WAAW,CAAC,GAAG,EAAE,CAAC;YAClB,MAAM,CAAC,KAAK,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;YAC1B,WAAW,CAAC,GAAG,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAjFD,oDAiFC","sourcesContent":["import type Log from '@expo/bunyan';\nimport connect from 'connect';\nimport http from 'http';\nimport type MetroConfig from 'metro-config';\n\nimport {\n  importInspectorProxyServerFromProject,\n  importMetroConfigFromProject,\n  importMetroHmrServerFromProject,\n  importMetroLibAttachWebsocketServerFromProject,\n  importMetroServerFromProject,\n} from './importMetroFromProject';\n\nasync function getConfig(\n  projectRoot: string,\n  config: MetroConfig.InputConfigT\n): Promise<MetroConfig.ConfigT> {\n  const { getDefaultConfig, mergeConfig } = importMetroConfigFromProject(projectRoot);\n  const defaultConfig = await getDefaultConfig(config.projectRoot || projectRoot);\n  return mergeConfig(defaultConfig, config);\n}\n\n/**\n * Send the initial load event to our logger.\n * @param config loaded metro config\n */\nfunction reportInitializeStarted(config: MetroConfig.ConfigT) {\n  config.reporter.update({\n    hasReducedPerformance: false,\n    port: config.server.port,\n    type: 'initialize_started',\n  });\n}\n\nasync function runMetro(projectRoot: string, config: MetroConfig.InputConfigT) {\n  const MetroServer = importMetroServerFromProject(projectRoot);\n\n  const mergedConfig = await getConfig(projectRoot, config);\n\n  reportInitializeStarted(mergedConfig);\n\n  return new MetroServer(mergedConfig);\n}\n\ntype RunServerProps = {\n  config: MetroConfig.ConfigT;\n  logger: Log;\n  onReady?: (server: http.Server) => void;\n};\n\nexport async function createDevServerAsync(\n  projectRoot: string,\n  { config, logger, onReady }: RunServerProps\n): Promise<{\n  server: http.Server;\n}> {\n  const serverApp = connect();\n\n  const metroServer = await runMetro(projectRoot, config);\n\n  const { InspectorProxy } = importInspectorProxyServerFromProject(projectRoot);\n  const MetroHmrServer = importMetroHmrServerFromProject(projectRoot);\n  const attachWebsocketServer = importMetroLibAttachWebsocketServerFromProject(projectRoot);\n\n  let middleware = metroServer.processRequest;\n\n  // Enhance the resulting middleware using the config options\n  if (config.server.enhanceMiddleware) {\n    middleware = config.server.enhanceMiddleware(middleware, metroServer);\n  }\n\n  serverApp.use(middleware);\n\n  let inspectorProxy: typeof InspectorProxy | null = null;\n  if (config.server.runInspectorProxy) {\n    inspectorProxy = new InspectorProxy(config.projectRoot);\n  }\n\n  const httpServer = http.createServer(serverApp);\n\n  // Disable any kind of automatic timeout behavior for incoming\n  // requests in case it takes the packager more than the default\n  // timeout of 120 seconds to respond to a request.\n  httpServer.timeout = 0;\n\n  return new Promise((resolve, reject) => {\n    httpServer.listen(config.server.port, () => {\n      if (onReady) {\n        onReady(httpServer);\n      }\n\n      // Create a new HMR Server\n      // TODO: Replace with a metro-agnostic HMR server and share with Webpack.\n      const websocketServer = new MetroHmrServer(\n        metroServer.getBundler(),\n        metroServer.getCreateModuleId(),\n        config\n      );\n\n      // attachHmrServer\n      // TODO: Extract this function into expo/dev-server\n      attachWebsocketServer({\n        httpServer,\n        path: '/hot',\n        websocketServer,\n      });\n\n      if (inspectorProxy) {\n        inspectorProxy.addWebSocketListener(httpServer);\n\n        // TODO(hypuk): Refactor inspectorProxy.processRequest into separate request handlers\n        // so that we could provide routes (/json/list and /json/version) here.\n        // Currently this causes Metro to give warning about T31407894.\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        serverApp.use(inspectorProxy.processRequest.bind(inspectorProxy));\n      }\n\n      resolve({ server: httpServer });\n    });\n\n    httpServer.on('error', error => {\n      // Send a custom log to inform our system that the server has had an unexpected error.\n      logger.error({ tag: 'metro' }, `Server error: ${error.message}`);\n      metroServer.end();\n      reject(error);\n    });\n\n    httpServer.on('close', () => {\n      metroServer.end();\n    });\n  });\n}\n"]}