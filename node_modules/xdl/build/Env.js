"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDebug = isDebug;
exports.isStaging = isStaging;
exports.isLocal = isLocal;
exports.maySkipManifestValidation = maySkipManifestValidation;
exports.shouldUseDevServer = shouldUseDevServer;
exports.shouldDisableAnalytics = shouldDisableAnalytics;

function _getenv() {
  const data = _interopRequireDefault(require("getenv"));

  _getenv = function () {
    return data;
  };

  return data;
}

function _internal() {
  const data = require("./internal");

  _internal = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isDebug() {
  return _getenv().default.boolish('EXPO_DEBUG', false);
}

function isStaging() {
  return _getenv().default.boolish('EXPO_STAGING', false);
}

function isLocal() {
  return _getenv().default.boolish('EXPO_LOCAL', false);
}

function maySkipManifestValidation() {
  return !!_getenv().default.string('EXPO_SKIP_MANIFEST_VALIDATION_TOKEN');
}
/**
 * Returns true if we should use Metro using its JS APIs via @expo/dev-server (the modern and fast
 * way), false if we should fall back to spawning it as a subprocess (supported for backwards
 * compatibility with SDK39 and older).
 */


function shouldUseDevServer(exp) {
  return !_internal().Versions.lteSdkVersion(exp, '39.0.0') || _getenv().default.boolish('EXPO_USE_DEV_SERVER', false);
}

function shouldDisableAnalytics() {
  return _getenv().default.boolish('E2E', false) || _getenv().default.boolish('CI', false);
}
//# sourceMappingURL=Env.js.map