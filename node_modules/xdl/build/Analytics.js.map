{"version":3,"sources":["../src/Analytics.ts"],"names":["PLATFORM_TO_ANALYTICS_PLATFORM","darwin","win32","linux","AnalyticsClient","userId","_userId","version","_version","flush","rudderstackClient","segmentClient","initializeClient","segmentWriteKey","rudderConfig","packageVersion","RudderAnalytics","apiKey","dataPlaneUrl","flushInterval","logger","silent","SegmentAnalytics","identifyUser","traits","userTraits","identify","context","getContext","logEvent","name","properties","track","event","platform","os","ip","address","device","model","brand","release","app","defaultClient"],"mappings":"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","sourcesContent":["import RudderAnalytics from '@expo/rudder-sdk-node';\nimport SegmentAnalytics from 'analytics-node';\nimport os from 'os';\n\nimport { ip } from './internal';\n\nconst PLATFORM_TO_ANALYTICS_PLATFORM: { [platform: string]: string } = {\n  darwin: 'Mac',\n  win32: 'Windows',\n  linux: 'Linux',\n};\n\ntype RudderAnalyticsConfig = {\n  apiKey: string;\n  dataPlaneUrl: string;\n};\n\nexport class AnalyticsClient {\n  private userTraits?: { [key: string]: any };\n  private rudderstackClient?: RudderAnalytics;\n  private segmentClient?: SegmentAnalytics; // should be removed when we've confirmed rudder client works as expected\n  private _userId?: string;\n  private _version?: string;\n\n  public get userId() {\n    return this._userId;\n  }\n\n  public get version() {\n    return this._version;\n  }\n\n  public flush() {\n    if (this.rudderstackClient) {\n      this.rudderstackClient.flush();\n    }\n\n    if (this.segmentClient) {\n      this.segmentClient.flush();\n    }\n  }\n\n  public initializeClient(\n    segmentWriteKey: string,\n    rudderConfig: RudderAnalyticsConfig,\n    packageVersion: string\n  ) {\n    // Do not wait before flushing, we want node to close immediately if the programs ends\n    this.rudderstackClient = new RudderAnalytics(\n      rudderConfig.apiKey,\n      `${rudderConfig.dataPlaneUrl}/v1/batch`,\n      {\n        flushInterval: 300,\n      }\n    );\n    this.rudderstackClient.logger.silent = true;\n    this.segmentClient = new SegmentAnalytics(segmentWriteKey, {\n      flushInterval: 300,\n    });\n    this._version = packageVersion;\n  }\n\n  public identifyUser(userId: string, traits: { [key: string]: any }) {\n    this._userId = userId;\n    this.userTraits = traits;\n\n    if (this.rudderstackClient) {\n      this.rudderstackClient.identify({\n        userId: this._userId,\n        traits: this.userTraits,\n        context: this.getContext(),\n      });\n    }\n    if (this.segmentClient) {\n      this.segmentClient.identify({\n        userId: this._userId,\n        traits: this.userTraits,\n        context: this.getContext(),\n      });\n    }\n  }\n\n  public logEvent(name: string, properties: any = {}) {\n    if (this.rudderstackClient && this._userId) {\n      this.rudderstackClient.track({\n        userId: this._userId,\n        event: name,\n        properties,\n        context: this.getContext(),\n      });\n    }\n\n    if (this.segmentClient && this._userId) {\n      this.segmentClient.track({\n        userId: this._userId,\n        event: name,\n        properties,\n        context: this.getContext(),\n      });\n    }\n  }\n\n  private getContext(): any {\n    const platform = PLATFORM_TO_ANALYTICS_PLATFORM[os.platform()] || os.platform();\n    const context = {\n      ip: ip.address(),\n      device: {\n        model: platform,\n        brand: platform,\n      },\n      os: {\n        name: platform,\n        version: os.release(),\n      },\n      app: {},\n    };\n\n    if (this._version) {\n      context.app = {\n        version: this._version,\n      };\n    }\n\n    return context;\n  }\n}\n\nconst defaultClient = new AnalyticsClient();\n\nexport default defaultClient;\n"],"file":"Analytics.js"}