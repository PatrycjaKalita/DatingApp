{"version":3,"sources":["../src/Webpack.ts"],"names":["WEBPACK_LOG_TAG","webpackDevServerInstance","webpackServerPort","devServerInfo","printConnectionInstructions","projectRoot","options","WebpackCompiler","printInstructions","appName","urls","showInDevtools","clearWebCacheAsync","mode","cacheFolder","path","join","ProjectUtils","logInfo","chalk","dim","fs","remove","isTargetingNative","includes","process","env","EXPO_WEBPACK_PLATFORM","broadcastMessage","message","data","WebpackDevServer","sockWrite","sockets","hackyConvertedMessage","startAsync","stopAsync","serverName","logError","red","fullOptions","transformCLIOptions","getWebpackConfigEnvFromBundlingOptionsAsync","clear","https","SSL_CRT_FILE","SSL_KEY_FILE","ssl","getSSLCertAsync","name","directory","certPath","keyPath","config","loadConfigAsync","port","getAvailablePortAsync","defaultPort","underline","protocol","useYarn","getProjectNameAsync","nonInteractive","validateBoolOption","stdout","isTTY","ProjectSettings","setPackagerInfoAsync","expoServerPort","packagerPort","server","Promise","resolve","compiler","createWebpackCompiler","webpackFactory","webpack","onFinished","originalBefore","devServer","before","bind","app","use","ManifestHandler","getManifestHandler","ExpoUpdatesManifestHandler","listen","WebpackEnvironment","HOST","error","onWebpackFinished","host","ip","address","url","originalClose","close","callback","err","finally","location","messageSocket","broadcast","res","openAsync","openProjectAsync","compileWebAppAsync","warnings","reject","run","stats","messages","errors","_showErrors","_showWarnings","toJson","all","length","XDLError","getenv","boolish","logWarning","yellow","bundleWebAppAsync","green","bundleAsync","offline","Error","exp","skipSDKVersionRequirement","webName","getServer","getUrlAsync","getProtocolAsync","readAsync","DEFAULT_PORT","setMode","BABEL_ENV","NODE_ENV","value","defaultValue","isImageEditingEnabled","pwa","applyOptionsToProjectSettingsAsync","newSettings","Object","keys","setAsync","dev","webpackEnv","console","log","magenta","result","devcert","certificateFor","key","cert","folder","ensureDir","writeFile","applyEnvironmentVariables","isDebugModeEnabled","bgYellow","black","output","optimization","devtoolLineToLine","pathinfo","namedModules","namedChunks","moduleIds","chunkIds","splitChunks","assign","argv","projectWebpackConfig","existsSync","webpackConfig","require","loadDefaultConfigAsync","UrlUtils","constructWebAppUrlAsync","hostType","success","e","Logger","global"],"mappings":"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","sourcesContent":["import { getConfig, getNameFromConfig } from '@expo/config';\nimport { MessageSocket } from '@expo/dev-server';\nimport * as devcert from '@expo/devcert';\nimport { isUsingYarn } from '@expo/package-manager';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport http from 'http';\nimport * as path from 'path';\nimport { prepareUrls, Urls } from 'react-dev-utils/WebpackDevServerUtils';\nimport formatWebpackMessages from 'react-dev-utils/formatWebpackMessages';\nimport openBrowser from 'react-dev-utils/openBrowser';\nimport webpack from 'webpack';\nimport WebpackDevServer from 'webpack-dev-server';\n\nimport {\n  choosePortAsync,\n  ExpoUpdatesManifestHandler,\n  ip,\n  Logger,\n  ManifestHandler,\n  ProjectSettings,\n  ProjectUtils,\n  UrlUtils,\n  WebpackCompiler,\n  WebpackEnvironment,\n  XDLError,\n} from './internal';\n\nconst WEBPACK_LOG_TAG = 'expo';\n\ntype DevServer = WebpackDevServer | http.Server;\n\nlet webpackDevServerInstance: DevServer | null = null;\nlet webpackServerPort: number | null = null;\n\ninterface WebpackSettings {\n  url: string;\n  server: DevServer;\n  port: number;\n  protocol: 'http' | 'https';\n  host?: string;\n}\n\ntype CLIWebOptions = {\n  dev?: boolean;\n  clear?: boolean;\n  pwa?: boolean;\n  nonInteractive?: boolean;\n  port?: number;\n  onWebpackFinished?: (error?: Error) => void;\n};\n\ntype BundlingOptions = {\n  dev?: boolean;\n  clear?: boolean;\n  port?: number;\n  pwa?: boolean;\n  isImageEditingEnabled?: boolean;\n  webpackEnv?: object;\n  mode?: 'development' | 'production' | 'test' | 'none';\n  https?: boolean;\n  nonInteractive?: boolean;\n  onWebpackFinished?: (error?: Error) => void;\n};\n\ntype WebpackConfiguration = webpack.Configuration;\n\nexport type WebEnvironment = {\n  projectRoot: string;\n  isImageEditingEnabled: boolean;\n  // deprecated\n  pwa: boolean;\n  mode: 'development' | 'production' | 'test' | 'none';\n  https: boolean;\n};\n\nlet devServerInfo: {\n  urls: Urls;\n  protocol: 'http' | 'https';\n  useYarn: boolean;\n  appName: string;\n  nonInteractive: boolean;\n  port: number;\n} | null = null;\n\nexport function printConnectionInstructions(projectRoot: string, options = {}) {\n  if (!devServerInfo) return;\n  WebpackCompiler.printInstructions(projectRoot, {\n    appName: devServerInfo.appName,\n    urls: devServerInfo.urls,\n    showInDevtools: false,\n    ...options,\n  });\n}\n\nasync function clearWebCacheAsync(projectRoot: string, mode: string): Promise<void> {\n  const cacheFolder = path.join(projectRoot, '.expo', 'web', 'cache', mode);\n  ProjectUtils.logInfo(\n    projectRoot,\n    WEBPACK_LOG_TAG,\n    chalk.dim(`Clearing ${mode} cache directory...`)\n  );\n  try {\n    await fs.remove(cacheFolder);\n  } catch {}\n}\n\n// Temporary hack while we implement multi-bundler dev server proxy.\nexport function isTargetingNative() {\n  return ['ios', 'android'].includes(process.env.EXPO_WEBPACK_PLATFORM || '');\n}\n\nexport type WebpackDevServerResults = {\n  server: DevServer;\n  location: Omit<WebpackSettings, 'server'>;\n  messageSocket: MessageSocket;\n};\n\nexport async function broadcastMessage(message: 'reload' | string, data?: any) {\n  if (!webpackDevServerInstance || !(webpackDevServerInstance instanceof WebpackDevServer)) {\n    return;\n  }\n\n  // Allow any message on native\n  if (isTargetingNative()) {\n    webpackDevServerInstance.sockWrite(webpackDevServerInstance.sockets, message, data);\n    return;\n  }\n\n  if (message !== 'reload') {\n    // TODO:\n    // Webpack currently only supports reloading the client (browser),\n    // remove this when we have custom sockets, and native support.\n    return;\n  }\n\n  // TODO:\n  // Default webpack-dev-server sockets use \"content-changed\" instead of \"reload\" (what we use on native).\n  // For now, just manually convert the value so our CLI interface can be unified.\n  const hackyConvertedMessage = message === 'reload' ? 'content-changed' : message;\n\n  webpackDevServerInstance.sockWrite(webpackDevServerInstance.sockets, hackyConvertedMessage, data);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: CLIWebOptions = {}\n): Promise<WebpackDevServerResults | null> {\n  await stopAsync(projectRoot);\n\n  const serverName = 'Webpack';\n\n  if (webpackDevServerInstance) {\n    ProjectUtils.logError(\n      projectRoot,\n      WEBPACK_LOG_TAG,\n      chalk.red(`${serverName} is already running.`)\n    );\n    return null;\n  }\n\n  const fullOptions = transformCLIOptions(options);\n\n  const env = await getWebpackConfigEnvFromBundlingOptionsAsync(projectRoot, fullOptions);\n\n  if (fullOptions.clear) {\n    await clearWebCacheAsync(projectRoot, env.mode);\n  }\n\n  if (env.https) {\n    if (!process.env.SSL_CRT_FILE || !process.env.SSL_KEY_FILE) {\n      const ssl = await getSSLCertAsync({\n        name: 'localhost',\n        directory: projectRoot,\n      });\n      if (ssl) {\n        process.env.SSL_CRT_FILE = ssl.certPath;\n        process.env.SSL_KEY_FILE = ssl.keyPath;\n      }\n    }\n  }\n\n  const config = await loadConfigAsync(env);\n  const port = await getAvailablePortAsync({\n    projectRoot,\n    defaultPort: options.port,\n  });\n\n  webpackServerPort = port;\n\n  ProjectUtils.logInfo(\n    projectRoot,\n    WEBPACK_LOG_TAG,\n    `Starting ${serverName} on port ${webpackServerPort} in ${chalk.underline(env.mode)} mode.`\n  );\n\n  const protocol = env.https ? 'https' : 'http';\n  const urls = prepareUrls(protocol, '::', webpackServerPort);\n  const useYarn = isUsingYarn(projectRoot);\n  const appName = await getProjectNameAsync(projectRoot);\n  const nonInteractive = validateBoolOption(\n    'nonInteractive',\n    options.nonInteractive,\n    !process.stdout.isTTY\n  );\n\n  devServerInfo = {\n    urls,\n    protocol,\n    useYarn,\n    appName,\n    nonInteractive,\n    port: webpackServerPort!,\n  };\n\n  // This is a temporary hack since we need to serve the expo manifest JSON on `/` for Expo Go support.\n  // In the future, if we support HTML links to manifests we can get rid of this platform specific code.\n\n  if (isTargetingNative()) {\n    await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n      expoServerPort: webpackServerPort,\n      packagerPort: webpackServerPort,\n    });\n  }\n\n  const server: DevServer = await new Promise(resolve => {\n    // Create a webpack compiler that is configured with custom messages.\n    const compiler = WebpackCompiler.createWebpackCompiler({\n      projectRoot,\n      appName,\n      config,\n      urls,\n      nonInteractive,\n      webpackFactory: webpack,\n      onFinished: () => resolve(server),\n    });\n\n    if (isTargetingNative()) {\n      // Inject the Expo Go manifest middleware.\n      const originalBefore = config.devServer!.before!.bind(config.devServer!.before);\n      config.devServer!.before = (app, server, compiler) => {\n        originalBefore(app, server, compiler);\n        app.use(ManifestHandler.getManifestHandler(projectRoot));\n        app.use(ExpoUpdatesManifestHandler.getManifestHandler(projectRoot));\n      };\n    }\n\n    const server = new WebpackDevServer(compiler, config.devServer);\n\n    // Launch WebpackDevServer.\n    server.listen(port, WebpackEnvironment.HOST, error => {\n      if (error) {\n        ProjectUtils.logError(projectRoot, WEBPACK_LOG_TAG, error.message);\n      }\n      if (typeof options.onWebpackFinished === 'function') {\n        options.onWebpackFinished(error);\n      }\n    });\n    webpackDevServerInstance = server;\n  });\n\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    webpackServerPort,\n  });\n\n  const host = ip.address();\n  const url = `${protocol}://${host}:${port}`;\n\n  // Extend the close method to ensure that we clean up the local info.\n  const originalClose = server.close.bind(server);\n\n  server.close = (callback?: (err?: Error) => void) => {\n    return originalClose((err?: Error) => {\n      ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        webpackServerPort: null,\n      }).finally(() => {\n        callback?.(err);\n        webpackDevServerInstance = null;\n        devServerInfo = null;\n        webpackServerPort = null;\n      });\n    });\n  };\n\n  return {\n    server,\n    location: {\n      url,\n      port,\n      protocol,\n      host,\n    },\n    // Match the native protocol.\n    messageSocket: {\n      broadcast: broadcastMessage,\n    },\n  };\n}\n\nexport async function stopAsync(projectRoot: string): Promise<void> {\n  if (webpackDevServerInstance) {\n    await new Promise(res => {\n      if (webpackDevServerInstance) {\n        ProjectUtils.logInfo(projectRoot, WEBPACK_LOG_TAG, '\\u203A Stopping Webpack server');\n        webpackDevServerInstance.close(res);\n      }\n    });\n  }\n}\n\nexport async function openAsync(projectRoot: string, options?: BundlingOptions): Promise<void> {\n  if (!webpackDevServerInstance) {\n    await startAsync(projectRoot, options);\n  }\n  await openProjectAsync(projectRoot);\n}\n\nasync function compileWebAppAsync(projectRoot: string, compiler: webpack.Compiler): Promise<any> {\n  // We generate the stats.json file in the webpack-config\n  const { warnings } = await new Promise((resolve, reject) =>\n    compiler.run((error, stats) => {\n      let messages;\n      if (error) {\n        if (!error.message) {\n          return reject(error);\n        }\n        messages = formatWebpackMessages({\n          errors: [error.message],\n          warnings: [],\n          _showErrors: true,\n          _showWarnings: true,\n        });\n      } else {\n        messages = formatWebpackMessages(\n          stats.toJson({ all: false, warnings: true, errors: true })\n        );\n      }\n\n      if (messages.errors.length) {\n        // Only keep the first error. Others are often indicative\n        // of the same problem, but confuse the reader with noise.\n        if (messages.errors.length > 1) {\n          messages.errors.length = 1;\n        }\n        return reject(new XDLError('WEBPACK_BUNDLE', messages.errors.join('\\n\\n')));\n      }\n      if (\n        getenv.boolish('EXPO_WEB_BUILD_STRICT', false) &&\n        getenv.boolish('CI', false) &&\n        messages.warnings.length\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          WEBPACK_LOG_TAG,\n          chalk.yellow(\n            '\\nTreating warnings as errors because `process.env.CI = true` and `process.env.EXPO_WEB_BUILD_STRICT = true`. \\n' +\n              'Most CI servers set it automatically.\\n'\n          )\n        );\n        return reject(new XDLError('WEBPACK_BUNDLE', messages.warnings.join('\\n\\n')));\n      }\n      resolve({\n        warnings: messages.warnings,\n      });\n    })\n  );\n  return { warnings };\n}\n\nasync function bundleWebAppAsync(projectRoot: string, config: WebpackConfiguration) {\n  const compiler = webpack(config);\n\n  try {\n    const { warnings } = await compileWebAppAsync(projectRoot, compiler);\n    if (warnings.length) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        WEBPACK_LOG_TAG,\n        chalk.yellow('Compiled with warnings.\\n')\n      );\n      ProjectUtils.logWarning(projectRoot, WEBPACK_LOG_TAG, warnings.join('\\n\\n'));\n    } else {\n      ProjectUtils.logInfo(projectRoot, WEBPACK_LOG_TAG, chalk.green('Compiled successfully.\\n'));\n    }\n  } catch (error) {\n    ProjectUtils.logError(projectRoot, WEBPACK_LOG_TAG, chalk.red('Failed to compile.\\n'));\n    throw error;\n  }\n}\n\nexport async function bundleAsync(projectRoot: string, options?: BundlingOptions): Promise<void> {\n  const fullOptions = transformCLIOptions({\n    ...options,\n  });\n\n  const env = await getWebpackConfigEnvFromBundlingOptionsAsync(projectRoot, {\n    ...fullOptions,\n    // Force production\n    mode: 'production',\n  });\n\n  // @ts-ignore\n  if (typeof env.offline !== 'undefined') {\n    throw new Error(\n      'offline support must be added manually: https://expo.fyi/enabling-web-service-workers'\n    );\n  }\n\n  if (fullOptions.clear) {\n    await clearWebCacheAsync(projectRoot, env.mode);\n  }\n\n  const config = await loadConfigAsync(env);\n  await bundleWebAppAsync(projectRoot, config);\n}\n\nasync function getProjectNameAsync(projectRoot: string): Promise<string> {\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n  const webName = getNameFromConfig(exp).webName ?? exp.name;\n  return webName;\n}\n\nfunction getServer(projectRoot: string): DevServer | null {\n  if (webpackDevServerInstance == null) {\n    ProjectUtils.logError(projectRoot, WEBPACK_LOG_TAG, 'Webpack is not running.');\n  }\n  return webpackDevServerInstance;\n}\n\n/**\n * Get the URL for the running instance of Webpack dev server.\n *\n * @param projectRoot\n */\nexport async function getUrlAsync(projectRoot: string): Promise<string | null> {\n  const devServer = getServer(projectRoot);\n  if (!devServer) {\n    return null;\n  }\n  const host = ip.address();\n  const protocol = await getProtocolAsync(projectRoot);\n  return `${protocol}://${host}:${webpackServerPort}`;\n}\n\nasync function getProtocolAsync(projectRoot: string): Promise<'http' | 'https'> {\n  // TODO: Bacon: Handle when not in expo\n  const { https } = await ProjectSettings.readAsync(projectRoot);\n  return https === true ? 'https' : 'http';\n}\n\nasync function getAvailablePortAsync(options: {\n  host?: string;\n  defaultPort?: number;\n  projectRoot: string;\n}): Promise<number> {\n  try {\n    const defaultPort =\n      'defaultPort' in options && options.defaultPort\n        ? options.defaultPort\n        : WebpackEnvironment.DEFAULT_PORT;\n    const port = await choosePortAsync(options.projectRoot, {\n      defaultPort,\n      host: 'host' in options && options.host ? options.host : WebpackEnvironment.HOST,\n    });\n    if (!port) {\n      throw new Error(`Port ${defaultPort} not available.`);\n    }\n    return port;\n  } catch (error) {\n    throw new XDLError('NO_PORT_FOUND', error.message);\n  }\n}\n\nfunction setMode(mode: 'development' | 'production' | 'test' | 'none'): void {\n  process.env.BABEL_ENV = mode;\n  process.env.NODE_ENV = mode;\n}\n\nfunction validateBoolOption(name: string, value: unknown, defaultValue: boolean): boolean {\n  if (typeof value === 'undefined') {\n    value = defaultValue;\n  }\n\n  if (typeof value !== 'boolean') {\n    throw new XDLError('WEBPACK_INVALID_OPTION', `'${name}' option must be a boolean.`);\n  }\n\n  return value;\n}\n\nfunction transformCLIOptions(options: CLIWebOptions): BundlingOptions {\n  // Transform the CLI flags into more explicit values\n  return {\n    ...options,\n    isImageEditingEnabled: options.pwa,\n  };\n}\n\nasync function applyOptionsToProjectSettingsAsync(\n  projectRoot: string,\n  options: BundlingOptions\n): Promise<ProjectSettings.Settings> {\n  const newSettings: Partial<ProjectSettings.Settings> = {};\n  // Change settings before reading them\n  if (typeof options.https === 'boolean') {\n    newSettings.https = options.https;\n  }\n\n  if (Object.keys(newSettings).length) {\n    await ProjectSettings.setAsync(projectRoot, newSettings);\n  }\n\n  return await ProjectSettings.readAsync(projectRoot);\n}\n\nasync function getWebpackConfigEnvFromBundlingOptionsAsync(\n  projectRoot: string,\n  options: BundlingOptions\n): Promise<WebEnvironment> {\n  const { dev, https } = await applyOptionsToProjectSettingsAsync(projectRoot, options);\n\n  const mode = typeof options.mode === 'string' ? options.mode : dev ? 'development' : 'production';\n\n  const isImageEditingEnabled = validateBoolOption(\n    'isImageEditingEnabled',\n    options.isImageEditingEnabled,\n    true\n  );\n\n  return {\n    projectRoot,\n    pwa: isImageEditingEnabled,\n    isImageEditingEnabled,\n    mode,\n    https,\n    ...(options.webpackEnv || {}),\n  };\n}\n\nasync function getSSLCertAsync({\n  name,\n  directory,\n}: {\n  name: string;\n  directory: string;\n}): Promise<{ keyPath: string; certPath: string } | false> {\n  console.log(\n    chalk.magenta`Ensuring auto SSL certificate is created (you might need to re-run with sudo)`\n  );\n  try {\n    const result = await devcert.certificateFor(name);\n    if (result) {\n      const { key, cert } = result;\n      const folder = path.join(directory, '.expo', 'web', 'development', 'ssl');\n      await fs.ensureDir(folder);\n\n      const keyPath = path.join(folder, `key-${name}.pem`);\n      await fs.writeFile(keyPath, key);\n\n      const certPath = path.join(folder, `cert-${name}.pem`);\n      await fs.writeFile(certPath, cert);\n\n      return {\n        keyPath,\n        certPath,\n      };\n    }\n    return result;\n  } catch (error) {\n    console.log(`Error creating SSL certificates: ${error}`);\n  }\n\n  return false;\n}\n\nfunction applyEnvironmentVariables(config: WebpackConfiguration): WebpackConfiguration {\n  // Use EXPO_DEBUG_WEB=true to enable debugging features for cases where the prod build\n  // has errors that aren't caught in development mode.\n  // Related: https://github.com/expo/expo-cli/issues/614\n  if (WebpackEnvironment.isDebugModeEnabled() && config.mode === 'production') {\n    console.log(chalk.bgYellow.black('Bundling the project in debug mode.'));\n\n    const output = config.output || {};\n    const optimization = config.optimization || {};\n\n    // Enable line to line mapped mode for all/specified modules.\n    // Line to line mapped mode uses a simple SourceMap where each line of the generated source is mapped to the same line of the original source.\n    // It’s a performance optimization. Only use it if your performance need to be better and you are sure that input lines match which generated lines.\n    // true enables it for all modules (not recommended)\n    output.devtoolLineToLine = true;\n\n    // Add comments that describe the file import/exports.\n    // This will make it easier to debug.\n    output.pathinfo = true;\n    // Instead of numeric ids, give modules readable names for better debugging.\n    optimization.namedModules = true;\n    // Instead of numeric ids, give chunks readable names for better debugging.\n    optimization.namedChunks = true;\n    // Readable ids for better debugging.\n    // @ts-ignore Property 'moduleIds' does not exist.\n    optimization.moduleIds = 'named';\n    // if optimization.namedChunks is enabled optimization.chunkIds is set to 'named'.\n    // This will manually enable it just to be safe.\n    // @ts-ignore Property 'chunkIds' does not exist.\n    optimization.chunkIds = 'named';\n\n    if (optimization.splitChunks) {\n      optimization.splitChunks.name = true;\n    }\n\n    Object.assign(config, { output, optimization });\n  }\n\n  return config;\n}\n\nasync function loadConfigAsync(\n  env: WebEnvironment,\n  argv?: string[]\n): Promise<WebpackConfiguration> {\n  setMode(env.mode);\n  // Check if the project has a webpack.config.js in the root.\n  const projectWebpackConfig = path.resolve(env.projectRoot, 'webpack.config.js');\n  let config: WebpackConfiguration;\n  if (fs.existsSync(projectWebpackConfig)) {\n    const webpackConfig = require(projectWebpackConfig);\n    if (typeof webpackConfig === 'function') {\n      config = await webpackConfig(env, argv);\n    } else {\n      config = webpackConfig;\n    }\n  } else {\n    // Fallback to the default expo webpack config.\n    const loadDefaultConfigAsync = require('@expo/webpack-config');\n    config = await loadDefaultConfigAsync(env, argv);\n  }\n  return applyEnvironmentVariables(config);\n}\n\nasync function openProjectAsync(\n  projectRoot: string\n): Promise<{ success: true; url: string } | { success: false; error: Error }> {\n  try {\n    const url = await UrlUtils.constructWebAppUrlAsync(projectRoot, { hostType: 'localhost' });\n    if (!url) {\n      throw new Error('Webpack Dev Server is not running');\n    }\n    openBrowser(url);\n    return { success: true, url };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on web: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n"],"file":"Webpack.js"}