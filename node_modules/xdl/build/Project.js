"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setOptionsAsync = setOptionsAsync;
exports.currentStatus = currentStatus;
Object.defineProperty(exports, "startExpoServerAsync", {
  enumerable: true,
  get: function () {
    return _internal().startExpoServerAsync;
  }
});
Object.defineProperty(exports, "StartOptions", {
  enumerable: true,
  get: function () {
    return _internal().StartOptions;
  }
});
Object.defineProperty(exports, "startReactNativeServerAsync", {
  enumerable: true,
  get: function () {
    return _internal().startReactNativeServerAsync;
  }
});
Object.defineProperty(exports, "startTunnelsAsync", {
  enumerable: true,
  get: function () {
    return _internal().startTunnelsAsync;
  }
});
Object.defineProperty(exports, "stopReactNativeServerAsync", {
  enumerable: true,
  get: function () {
    return _internal().stopReactNativeServerAsync;
  }
});
Object.defineProperty(exports, "stopTunnelsAsync", {
  enumerable: true,
  get: function () {
    return _internal().stopTunnelsAsync;
  }
});
Object.defineProperty(exports, "broadcastMessage", {
  enumerable: true,
  get: function () {
    return _internal().broadcastMessage;
  }
});
Object.defineProperty(exports, "createBundlesAsync", {
  enumerable: true,
  get: function () {
    return _internal().createBundlesAsync;
  }
});
Object.defineProperty(exports, "getPublishExpConfigAsync", {
  enumerable: true,
  get: function () {
    return _internal().getPublishExpConfigAsync;
  }
});
Object.defineProperty(exports, "prepareHooks", {
  enumerable: true,
  get: function () {
    return _internal().prepareHooks;
  }
});
Object.defineProperty(exports, "publishAsync", {
  enumerable: true,
  get: function () {
    return _internal().publishAsync;
  }
});
Object.defineProperty(exports, "PublishedProjectResult", {
  enumerable: true,
  get: function () {
    return _internal().PublishedProjectResult;
  }
});
Object.defineProperty(exports, "PublishOptions", {
  enumerable: true,
  get: function () {
    return _internal().PublishOptions;
  }
});
Object.defineProperty(exports, "runHook", {
  enumerable: true,
  get: function () {
    return _internal().runHook;
  }
});
Object.defineProperty(exports, "startAsync", {
  enumerable: true,
  get: function () {
    return _internal().startAsync;
  }
});
Object.defineProperty(exports, "stopAsync", {
  enumerable: true,
  get: function () {
    return _internal().stopAsync;
  }
});
Object.defineProperty(exports, "writeArtifactSafelyAsync", {
  enumerable: true,
  get: function () {
    return _internal().writeArtifactSafelyAsync;
  }
});

function _internal() {
  const data = require("./internal");

  _internal = function () {
    return data;
  };

  return data;
}

/**
 * @deprecated Use `ProjectSettings.setPackagerInfoAsync`
 * @param projectRoot
 * @param options
 */
async function setOptionsAsync(projectRoot, options) {
  (0, _internal().assertValidProjectRoot)(projectRoot); // Check to make sure all options are valid

  if (options.packagerPort != null && !Number.isInteger(options.packagerPort)) {
    throw new (_internal().XDLError)('INVALID_OPTIONS', 'packagerPort must be an integer');
  }

  await _internal().ProjectSettings.setPackagerInfoAsync(projectRoot, options);
}
/**
 * @deprecated `ProjectSettings.getCurrentStatusAsync`
 * @param projectRoot
 */


async function currentStatus(projectRoot) {
  return _internal().ProjectSettings.getCurrentStatusAsync(projectRoot);
}
//# sourceMappingURL=Project.js.map