{"version":3,"sources":["../../src/start/ExpoUpdatesManifestHandler.ts"],"names":["getPlatformFromRequest","req","url","platform","query","headers","Error","String","getManifestResponseAsync","projectRoot","host","Map","set","hostname","projectSettings","bundleUrlPackagerOpts","projectConfig","entryPoint","mainModuleName","UrlUtils","stripJSExtension","expoConfig","exp","expoGoConfig","hostUri","constructHostUriAsync","runtimeVersion","sdkVersion","bundleUrl","assets","ProjectAssets","resolveAndCollectExpoUpdatesManifestAssets","path","match","expoUpdatesManifest","id","createdAt","Date","toISOString","launchAsset","key","contentType","metadata","extra","eas","expoClient","expoGo","body","getManifestHandler","res","next","pathname","headerName","headerValue","setHeader","end","JSON","stringify","Analytics","logEvent","developerTool","Config","e","ProjectUtils","logError","stack","statusCode","error","toString"],"mappings":"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","sourcesContent":["import { ExpoUpdatesManifest, getConfig } from '@expo/config';\nimport { getRuntimeVersionForSDKVersion } from '@expo/sdk-runtime-versions';\nimport express from 'express';\nimport http from 'http';\nimport { parse } from 'url';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  Analytics,\n  Config,\n  ProjectAssets,\n  ProjectUtils,\n  resolveEntryPoint,\n  UrlUtils,\n} from '../internal';\nimport {\n  getBundleUrlAsync,\n  getExpoGoConfig,\n  getPackagerOptionsAsync,\n  stripPort,\n} from './ManifestHandler';\n\nfunction getPlatformFromRequest(req: express.Request | http.IncomingMessage): string {\n  const url = req.url ? parse(req.url, /* parseQueryString */ true) : null;\n  const platform = url?.query.platform || req.headers['expo-platform'];\n  if (!platform) {\n    throw new Error('Must specify expo-platform header or query parameter');\n  }\n  return String(platform);\n}\n\nexport async function getManifestResponseAsync({\n  projectRoot,\n  platform,\n  host,\n}: {\n  projectRoot: string;\n  platform: string;\n  host?: string;\n}): Promise<{\n  body: ExpoUpdatesManifest;\n  headers: Map<string, number | string | readonly string[]>;\n}> {\n  const headers = new Map<string, any>();\n  // set required headers for Expo Updates manifest specification\n  headers.set('expo-protocol-version', 0);\n  headers.set('expo-sfv-version', 0);\n  headers.set('cache-control', 'private, max-age=0');\n  headers.set('content-type', 'application/json');\n\n  const hostname = stripPort(host);\n  const [projectSettings, bundleUrlPackagerOpts] = await getPackagerOptionsAsync(projectRoot);\n  const projectConfig = getConfig(projectRoot);\n  const entryPoint = resolveEntryPoint(projectRoot, platform, projectConfig);\n  const mainModuleName = UrlUtils.stripJSExtension(entryPoint);\n  const expoConfig = projectConfig.exp;\n  const expoGoConfig = await getExpoGoConfig({\n    projectRoot,\n    projectSettings,\n    mainModuleName,\n    hostname,\n  });\n\n  const hostUri = await UrlUtils.constructHostUriAsync(projectRoot, hostname);\n\n  const runtimeVersion =\n    expoConfig.runtimeVersion ??\n    (expoConfig.sdkVersion ? getRuntimeVersionForSDKVersion(expoConfig.sdkVersion) : null);\n  if (!runtimeVersion) {\n    throw new Error('Must specify runtimeVersion or sdkVersion in app.json');\n  }\n\n  const bundleUrl = await getBundleUrlAsync({\n    projectRoot,\n    platform,\n    projectSettings,\n    bundleUrlPackagerOpts,\n    mainModuleName,\n    hostname,\n  });\n\n  // For each manifest asset (for example `icon`):\n  // - set a field on the manifest containing a reference to the asset: iconAsset: { rawUrl?: string, assetKey?: string }\n  // - gather the data needed to embed a reference to that asset in the expo-updates assets key\n  const assets = await ProjectAssets.resolveAndCollectExpoUpdatesManifestAssets(\n    projectRoot,\n    expoConfig,\n    path => bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0] + 'assets/' + path\n  );\n\n  const expoUpdatesManifest = {\n    id: uuidv4(),\n    createdAt: new Date().toISOString(),\n    runtimeVersion,\n    launchAsset: {\n      key: mainModuleName,\n      contentType: 'application/javascript',\n      url: bundleUrl,\n    },\n    assets,\n    metadata: {}, // required for the client to detect that this is an expo-updates manifest\n    extra: {\n      eas: {}, // TODO(wschurman): somehow inject EAS config in here if known\n      expoClient: {\n        ...expoConfig,\n        hostUri,\n      },\n      expoGo: expoGoConfig,\n    },\n  };\n\n  return {\n    body: expoUpdatesManifest,\n    headers,\n  };\n}\n\nexport function getManifestHandler(projectRoot: string) {\n  return async (\n    req: express.Request | http.IncomingMessage,\n    res: express.Response | http.ServerResponse,\n    next: (err?: Error) => void\n  ) => {\n    if (!req.url || parse(req.url).pathname !== '/update-manifest-experimental') {\n      next();\n      return;\n    }\n\n    try {\n      const { body, headers } = await getManifestResponseAsync({\n        projectRoot,\n        host: req.headers.host,\n        platform: getPlatformFromRequest(req),\n      });\n      for (const [headerName, headerValue] of headers) {\n        res.setHeader(headerName, headerValue);\n      }\n      res.end(JSON.stringify(body));\n\n      Analytics.logEvent('Serve Expo Updates Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n        runtimeVersion: (body as any).runtimeVersion,\n      });\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', e.stack);\n      res.statusCode = 520;\n      res.end(\n        JSON.stringify({\n          error: e.toString(),\n        })\n      );\n    }\n  };\n}\n"],"file":"ExpoUpdatesManifestHandler.js"}