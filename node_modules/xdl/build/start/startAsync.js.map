{"version":3,"sources":["../../src/start/startAsync.ts"],"names":["serverInstance","messageSocket","broadcastMessage","method","params","broadcast","startAsync","projectRoot","exp","skipSDKVersionRequirement","options","verbose","Analytics","logEvent","developerTool","Config","sdkVersion","webOnly","Webpack","port","webpackPort","DevSession","startSession","isTargetingNative","Env","shouldUseDevServer","devClient","hostType","ProjectSettings","readAsync","ConnectionStatus","isOffline","e","ProjectUtils","logDebug","message","stopDevServerAsync","Promise","resolve","reject","close","error","stopInternalAsync","stopSession","all","stopAsync","Android","maybeStopAdbDaemonAsync","forceQuitAsync","packagerPid","ngrokPid","readPackagerInfoAsync","process","kill","setPackagerInfoAsync","expoServerPort","packagerPort","expoServerNgrokUrl","packagerNgrokUrl","webpackServerPort","result","race","setTimeout"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAoBA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA,IAAIA,cAA6B,GAAG,IAApC;AACA,IAAIC,aAAmC,GAAG,IAA1C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,gBAAT,CACLC,MADK,EAELC,MAFK,EAGL;AACA,MAAIH,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACI,SAAd,CAAwBF,MAAxB,EAAgCC,MAAhC;AACD;AACF;;AAEM,eAAeE,UAAf,CACLC,WADK,EAEL;AACEC,EAAAA,GAAG,GAAG,yBAAUD,WAAV,EAAuB;AAAEE,IAAAA,yBAAyB,EAAE;AAA7B,GAAvB,EAA4DD,GADpE;AAEE,KAAGE;AAFL,IAGkD,EAL7C,EAMLC,OAAgB,GAAG,IANd,EAOgB;AAAA;;AACrB,0CAAuBJ,WAAvB;;AAEAK,wBAAUC,QAAV,CAAmB,eAAnB,EAAoC;AAClCN,IAAAA,WADkC;AAElCO,IAAAA,aAAa,EAAEC,mBAAOD,aAFY;AAGlCE,IAAAA,UAAU,qBAAER,GAAG,CAACQ,UAAN,6DAAoB;AAHI,GAApC;;AAMA,sDAA2BT,WAA3B;;AAEA,MAAIG,OAAO,CAACO,OAAZ,EAAqB;AACnB,UAAMC,oBAAQZ,UAAR,CAAmBC,WAAnB,EAAgC,EACpC,GAAGG,OADiC;AAEpCS,MAAAA,IAAI,EAAET,OAAO,CAACU;AAFsB,KAAhC,CAAN,CADmB,CAMnB;;AACAC,2BAAWC,YAAX,CAAwBf,WAAxB,EAAqCC,GAArC,EAA0CU,oBAAQK,iBAAR,KAA8B,QAA9B,GAAyC,KAAnF;;AACA,WAAOf,GAAP;AACD,GATD,MASO,IAAIgB,gBAAIC,kBAAJ,CAAuBjB,GAAvB,KAA+BE,OAAO,CAACgB,SAA3C,EAAsD;AAC3D,KAAC1B,cAAD,GAAmBC,aAAnB,IAAoC,MAAM,qCAAoBM,WAApB,EAAiCG,OAAjC,CAA1C;;AACAW,2BAAWC,YAAX,CAAwBf,WAAxB,EAAqCC,GAArC,EAA0C,QAA1C;AACD,GAHM,MAGA;AACL,UAAM,sCAAqBD,WAArB,CAAN;AACA,UAAM,6CAA4B;AAAEA,MAAAA,WAAF;AAAeC,MAAAA,GAAf;AAAoBE,MAAAA,OAApB;AAA6BC,MAAAA;AAA7B,KAA5B,CAAN;;AACAU,2BAAWC,YAAX,CAAwBf,WAAxB,EAAqCC,GAArC,EAA0C,QAA1C;AACD;;AAED,QAAM;AAAEmB,IAAAA;AAAF,MAAe,MAAMC,4BAAgBC,SAAhB,CAA0BtB,WAA1B,CAA3B;;AAEA,MAAI,CAACuB,6BAAiBC,SAAjB,EAAD,IAAiCJ,QAAQ,KAAK,QAAlD,EAA4D;AAC1D,QAAI;AACF,YAAM,mCAAkBpB,WAAlB,CAAN;AACD,KAFD,CAEE,OAAOyB,CAAP,EAAU;AACVC,+BAAaC,QAAb,CAAsB3B,WAAtB,EAAmC,MAAnC,EAA4C,yBAAwByB,CAAC,CAACG,OAAQ,EAA9E;AACD;AACF;;AACD,SAAO3B,GAAP;AACD;;AAED,eAAe4B,kBAAf,GAAoC;AAClC,SAAO,IAAIC,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5C,QAAIvC,cAAJ,EAAoB;AAClBA,MAAAA,cAAc,CAACwC,KAAf,CAAqBC,KAAK,IAAI;AAC5B,YAAIA,KAAJ,EAAW;AACTF,UAAAA,MAAM,CAACE,KAAD,CAAN;AACD,SAFD,MAEO;AACLH,UAAAA,OAAO;AACR;AACF,OAND;AAOD;AACF,GAVM,CAAP;AAWD;;AAED,eAAeI,iBAAf,CAAiCnC,WAAjC,EAAqE;AACnEc,yBAAWsB,WAAX;;AAEA,QAAMN,OAAO,CAACO,GAAR,CAAY,CAChB1B,oBAAQ2B,SAAR,CAAkBtC,WAAlB,CADgB,EAEhB6B,kBAAkB,EAFF,EAGhB,qCAAoB7B,WAApB,CAHgB,EAIhB,4CAA2BA,WAA3B,CAJgB,EAKhB,YAAY;AACV,QAAI,CAACuB,6BAAiBC,SAAjB,EAAL,EAAmC;AACjC,UAAI;AACF,cAAM,kCAAiBxB,WAAjB,CAAN;AACD,OAFD,CAEE,OAAOyB,CAAP,EAAU;AACVC,iCAAaC,QAAb,CAAsB3B,WAAtB,EAAmC,MAAnC,EAA4C,wBAAuByB,CAAC,CAACG,OAAQ,EAA7E;AACD;AACF;AACF,GAbe,EAchB,MAAMW,oBAAQC,uBAAR,EAdU,CAAZ,CAAN;AAgBD;;AAED,eAAeC,cAAf,CAA8BzC,WAA9B,EAAmD;AACjD;AACA,QAAM;AAAE0C,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA4B,MAAMtB,4BAAgBuB,qBAAhB,CAAsC5C,WAAtC,CAAxC;;AACA,MAAI0C,WAAJ,EAAiB;AACf,QAAI;AACFG,MAAAA,OAAO,CAACC,IAAR,CAAaJ,WAAb;AACD,KAFD,CAEE,OAAOjB,CAAP,EAAU,CAAE;AACf;;AACD,MAAIkB,QAAJ,EAAc;AACZ,QAAI;AACFE,MAAAA,OAAO,CAACC,IAAR,CAAaH,QAAb;AACD,KAFD,CAEE,OAAOlB,CAAP,EAAU,CAAE;AACf;;AACD,QAAMJ,4BAAgB0B,oBAAhB,CAAqC/C,WAArC,EAAkD;AACtDgD,IAAAA,cAAc,EAAE,IADsC;AAEtDC,IAAAA,YAAY,EAAE,IAFwC;AAGtDP,IAAAA,WAAW,EAAE,IAHyC;AAItDQ,IAAAA,kBAAkB,EAAE,IAJkC;AAKtDC,IAAAA,gBAAgB,EAAE,IALoC;AAMtDR,IAAAA,QAAQ,EAAE,IAN4C;AAOtDS,IAAAA,iBAAiB,EAAE;AAPmC,GAAlD,CAAN;AASD;;AAEM,eAAed,SAAf,CAAyBtC,WAAzB,EAA6D;AAClE,MAAI;AACF,UAAMqD,MAAM,GAAG,MAAMvB,OAAO,CAACwB,IAAR,CAAa,CAChCnB,iBAAiB,CAACnC,WAAD,CADe,EAEhC,IAAI8B,OAAJ,CAAYC,OAAO,IAAIwB,UAAU,CAACxB,OAAD,EAAU,IAAV,EAAgB,YAAhB,CAAjC,CAFgC,CAAb,CAArB;;AAIA,QAAIsB,MAAM,KAAK,YAAf,EAA6B;AAC3B,YAAMZ,cAAc,CAACzC,WAAD,CAApB;AACD;AACF,GARD,CAQE,OAAOkC,KAAP,EAAc;AACd,UAAMO,cAAc,CAACzC,WAAD,CAApB;AACA,UAAMkC,KAAN;AACD;AACF","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { MessageSocket } from '@expo/dev-server';\nimport { Server } from 'http';\n\nimport {\n  Analytics,\n  Android,\n  assertValidProjectRoot,\n  Config,\n  ConnectionStatus,\n  DevSession,\n  Env,\n  ProjectSettings,\n  ProjectUtils,\n  startDevServerAsync,\n  StartDevServerOptions,\n  startExpoServerAsync,\n  startReactNativeServerAsync,\n  startTunnelsAsync,\n  stopExpoServerAsync,\n  stopReactNativeServerAsync,\n  stopTunnelsAsync,\n  Webpack,\n} from '../internal';\nimport { watchBabelConfigForProject } from './watchBabelConfig';\n\nlet serverInstance: Server | null = null;\nlet messageSocket: MessageSocket | null = null;\n\n/**\n * Sends a message over web sockets to any connected device,\n * does nothing when the dev server is not running.\n *\n * @param method name of the command. In RN projects `reload`, and `devMenu` are available. In Expo Go, `sendDevCommand` is available.\n * @param params\n */\nexport function broadcastMessage(\n  method: 'reload' | 'devMenu' | 'sendDevCommand',\n  params?: Record<string, any> | undefined\n) {\n  if (messageSocket) {\n    messageSocket.broadcast(method, params);\n  }\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  {\n    exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp,\n    ...options\n  }: StartDevServerOptions & { exp?: ExpoConfig } = {},\n  verbose: boolean = true\n): Promise<ExpoConfig> {\n  assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    sdkVersion: exp.sdkVersion ?? null,\n  });\n\n  watchBabelConfigForProject(projectRoot);\n\n  if (options.webOnly) {\n    await Webpack.startAsync(projectRoot, {\n      ...options,\n      port: options.webpackPort,\n    });\n\n    // This is used to make Expo Go open the project in either Expo Go, or the web browser.\n    DevSession.startSession(projectRoot, exp, Webpack.isTargetingNative() ? 'native' : 'web');\n    return exp;\n  } else if (Env.shouldUseDevServer(exp) || options.devClient) {\n    [serverInstance, , messageSocket] = await startDevServerAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'native');\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync({ projectRoot, exp, options, verbose });\n    DevSession.startSession(projectRoot, exp, 'native');\n  }\n\n  const { hostType } = await ProjectSettings.readAsync(projectRoot);\n\n  if (!ConnectionStatus.isOffline() && hostType === 'tunnel') {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  return exp;\n}\n\nasync function stopDevServerAsync() {\n  return new Promise<void>((resolve, reject) => {\n    if (serverInstance) {\n      serverInstance.close(error => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    }\n  });\n}\n\nasync function stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n\n  await Promise.all([\n    Webpack.stopAsync(projectRoot),\n    stopDevServerAsync(),\n    stopExpoServerAsync(projectRoot),\n    stopReactNativeServerAsync(projectRoot),\n    async () => {\n      if (!ConnectionStatus.isOffline()) {\n        try {\n          await stopTunnelsAsync(projectRoot);\n        } catch (e) {\n          ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n        }\n      }\n    },\n    await Android.maybeStopAdbDaemonAsync(),\n  ]);\n}\n\nasync function forceQuitAsync(projectRoot: string) {\n  // find RN packager and ngrok pids, attempt to kill them manually\n  const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerPid) {\n    try {\n      process.kill(packagerPid);\n    } catch (e) {}\n  }\n  if (ngrokPid) {\n    try {\n      process.kill(ngrokPid);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n    packagerPort: null,\n    packagerPid: null,\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n    webpackServerPort: null,\n  });\n}\n\nexport async function stopAsync(projectRoot: string): Promise<void> {\n  try {\n    const result = await Promise.race([\n      stopInternalAsync(projectRoot),\n      new Promise(resolve => setTimeout(resolve, 2000, 'stopFailed')),\n    ]);\n    if (result === 'stopFailed') {\n      await forceQuitAsync(projectRoot);\n    }\n  } catch (error) {\n    await forceQuitAsync(projectRoot);\n    throw error;\n  }\n}\n"],"file":"startAsync.js"}