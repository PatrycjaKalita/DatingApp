{"version":3,"sources":["../src/DevSession.ts"],"names":["UPDATE_FREQUENCY_SECS","keepUpdating","startSession","projectRoot","exp","platform","forceUpdate","ConnectionStatus","isOffline","authSession","UserManager","getSessionAsync","url","UrlUtils","constructDeepLinkAsync","constructWebAppUrlAsync","Error","apiClient","ApiV2Client","clientForUser","postAsync","data","session","description","name","os","hostname","config","slug","primaryColor","source","e","logger","global","debug","setTimeout","stopSession"],"mappings":";;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAQA,MAAMA,qBAAqB,GAAG,EAA9B;AAEA,IAAIC,YAAY,GAAG,IAAnB,C,CAEA;;AACO,eAAeC,YAAf,CACLC,WADK,EAELC,GAFK,EAGLC,QAHK,EAILC,WAAoB,GAAG,KAJlB,EAKU;AACf,MAAIA,WAAJ,EAAiB;AACfL,IAAAA,YAAY,GAAG,IAAf;AACD;;AAED,MAAI,CAACM,6BAAiBC,SAAjB,EAAD,IAAiCP,YAArC,EAAmD;AACjD;AACA,UAAMQ,WAAW,GAAG,MAAMC,wBAAYC,eAAZ,EAA1B;;AAEA,QAAI,CAACF,WAAL,EAAkB;AAChB;AACA;AACA;AACD;;AAED,QAAI;AACF,UAAIG,GAAJ;;AACA,UAAIP,QAAQ,KAAK,QAAjB,EAA2B;AACzBO,QAAAA,GAAG,GAAG,MAAMC,qBAASC,sBAAT,CAAgCX,WAAhC,CAAZ;AACD,OAFD,MAEO,IAAIE,QAAQ,KAAK,KAAjB,EAAwB;AAC7BO,QAAAA,GAAG,GAAG,MAAMC,qBAASE,uBAAT,CAAiCZ,WAAjC,CAAZ;AACD,OAFM,MAEA;AACL,cAAM,IAAIa,KAAJ,CAAW,yBAAwBX,QAAS,EAA5C,CAAN;AACD;;AAED,YAAMY,SAAS,GAAGC,kBAAYC,aAAZ,CAA0BV,WAA1B,CAAlB;;AACA,YAAMQ,SAAS,CAACG,SAAV,CAAoB,mCAApB,EAAyD;AAC7DC,QAAAA,IAAI,EAAE;AACJC,UAAAA,OAAO,EAAE;AACPC,YAAAA,WAAW,EAAG,GAAEnB,GAAG,CAACoB,IAAK,OAAMC,cAAGC,QAAH,EAAc,EADtC;AAEPA,YAAAA,QAAQ,EAAED,cAAGC,QAAH,EAFH;AAGPrB,YAAAA,QAHO;AAIPsB,YAAAA,MAAM,EAAE;AACN;AACAJ,cAAAA,WAAW,EAAEnB,GAAG,CAACmB,WAFX;AAGNC,cAAAA,IAAI,EAAEpB,GAAG,CAACoB,IAHJ;AAINI,cAAAA,IAAI,EAAExB,GAAG,CAACwB,IAJJ;AAKNC,cAAAA,YAAY,EAAEzB,GAAG,CAACyB;AALZ,aAJD;AAWPjB,YAAAA,GAXO;AAYPkB,YAAAA,MAAM,EAAE;AAZD;AADL;AADuD,OAAzD,CAAN;AAkBD,KA7BD,CA6BE,OAAOC,CAAP,EAAU;AACVC,yBAAOC,MAAP,CAAcC,KAAd,CAAoBH,CAApB,EAAwB,+BAA8BA,CAAE,EAAxD;AACD;;AAEDI,IAAAA,UAAU,CAAC,MAAMjC,YAAY,CAACC,WAAD,EAAcC,GAAd,EAAmBC,QAAnB,CAAnB,EAAiDL,qBAAqB,GAAG,IAAzE,CAAV;AACD;AACF;;AAEM,SAASoC,WAAT,GAAuB;AAC5BnC,EAAAA,YAAY,GAAG,KAAf;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport os from 'os';\n\nimport {\n  ApiV2 as ApiV2Client,\n  ConnectionStatus,\n  Logger as logger,\n  UrlUtils,\n  UserManager,\n} from './internal';\n\nconst UPDATE_FREQUENCY_SECS = 20;\n\nlet keepUpdating = true;\n\n// TODO notify www when a project is started, and every N seconds afterwards\nexport async function startSession(\n  projectRoot: string,\n  exp: Pick<ExpoConfig, 'name' | 'description' | 'slug' | 'primaryColor'>,\n  platform: 'native' | 'web',\n  forceUpdate: boolean = false\n): Promise<void> {\n  if (forceUpdate) {\n    keepUpdating = true;\n  }\n\n  if (!ConnectionStatus.isOffline() && keepUpdating) {\n    // TODO(anp) if the user has configured device ids, then notify for those too\n    const authSession = await UserManager.getSessionAsync();\n\n    if (!authSession) {\n      // NOTE(brentvatne) let's just bail out in this case for now\n      // throw new Error('development sessions can only be initiated for logged in users');\n      return;\n    }\n\n    try {\n      let url;\n      if (platform === 'native') {\n        url = await UrlUtils.constructDeepLinkAsync(projectRoot);\n      } else if (platform === 'web') {\n        url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n      } else {\n        throw new Error(`Unsupported platform: ${platform}`);\n      }\n\n      const apiClient = ApiV2Client.clientForUser(authSession);\n      await apiClient.postAsync('development-sessions/notify-alive', {\n        data: {\n          session: {\n            description: `${exp.name} on ${os.hostname()}`,\n            hostname: os.hostname(),\n            platform,\n            config: {\n              // TODO: if icons are specified, upload a url for them too so people can distinguish\n              description: exp.description,\n              name: exp.name,\n              slug: exp.slug,\n              primaryColor: exp.primaryColor,\n            },\n            url,\n            source: 'desktop',\n          },\n        },\n      });\n    } catch (e) {\n      logger.global.debug(e, `Error updating dev session: ${e}`);\n    }\n\n    setTimeout(() => startSession(projectRoot, exp, platform), UPDATE_FREQUENCY_SECS * 1000);\n  }\n}\n\nexport function stopSession() {\n  keepUpdating = false;\n}\n"],"file":"DevSession.js"}