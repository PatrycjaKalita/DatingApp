{"version":3,"sources":["../src/Android.ts"],"names":["_lastUrl","_isAdbOwner","BEGINNING_OF_ADB_ERROR_MESSAGE","CANT_START_ACTIVITY_ERROR","INSTALL_WARNING_TIMEOUT","EMULATOR_MAX_WAIT_TIMEOUT","whichEmulator","process","env","ANDROID_HOME","whichADB","getEmulatorsAsync","stdout","split","os","EOL","filter","Boolean","map","name","type","isBooted","isAuthorized","getAbdNameForEmulatorIdAsync","emulatorId","getAdbOutputAsync","shift","getAllAvailableDevicesAsync","bootedDevices","getAttachedDevicesAsync","data","connectedNames","offlineEmulators","includes","allDevices","concat","length","genymotionMessage","Error","isBootAnimationCompleteAsync","pid","props","getPropertyDataForDeviceAsync","PROP_BOOT_ANIMATION_STATE","match","startEmulatorAsync","device","Logger","global","info","chalk","bold","emulatorProcess","child_process","spawn","stdio","detached","unref","Promise","resolve","reject","waitTimer","setInterval","connected","find","stopWaiting","maxTimer","setTimeout","manualCommand","stopWaitingAndReject","clearTimeout","clearInterval","message","on","output","splitItems","trim","replace","attachedDevices","slice","line","devicePromises","deviceInfo","modelItem","all","isPlatformSupported","platform","adbAlreadyRunning","adb","result","lines","stderr","e","errorMessage","startsWith","substring","args","Binaries","addToPathAsync","alreadyRunning","Env","isDebug","join","signal","isAbortError","getAdbFileOutputAsync","encoding","_isDeviceAuthorizedAsync","isInstalledAsync","androidPackage","packages","adbPidArgs","i","_isExpoInstalledAsync","ensureDevClientInstalledAsync","applicationId","getExpoVersionAsync","regex","regexMatch","exec","isClientOutdatedAsync","sdkVersion","versions","Versions","versionsAsync","clientForSdk","getClientForSDK","latestVersionForSdk","version","androidVersion","installedVersion","semver","lt","installExpoAsync","url","warningTimer","setWarningTimer","notifications","code","NotificationCode","START_PROGRESS_BAR","path","progress","TICK_PROGRESS_BAR","STOP_PROGRESS_BAR","START_LOADING","installOnDeviceAsync","binaryPath","STOP_LOADING","isDeviceBootedAsync","devices","uninstallExpoAsync","isInstalled","error","upgradeExpoAsync","attemptToStartEmulatorOrAssertAsync","_openUrlAsync","openClient","indexOf","openProject","getUnixPID","port","activateEmulatorWindowAsync","androidPid","osascript","execAsync","openAppAsync","launchActivity","logUnauthorized","warn","dim","hasPromptedToUpgrade","isManagedProjectAsync","projectRoot","AndroidConfig","Paths","getProjectPathOrThrowAsync","openUrlAsync","isDetached","devClient","exp","bootedDevice","underline","installedExpo","clientApplicationId","isManaged","android","package","Package","getApplicationIdAsync","getAppBuildGradleFilePath","shouldInstall","promptKey","confirm","Prompts","confirmAsync","initial","androidClient","Analytics","logEvent","sdkVersionString","sdkVersionsAsync","androidClientUrl","androidClientVersion","openProjectAsync","shouldPrompt","scheme","startAdbReverseAsync","projectUrl","UrlUtils","constructDeepLinkAsync","skipSDKVersionRequirement","booted","success","promptForDeviceAsync","openWebProjectAsync","Webpack","getUrlAsync","packagerInfo","ProjectSettings","readPackagerInfoAsync","expRc","userDefinedAdbReversePorts","extraAdbReversePorts","adbReversePorts","packagerPort","expoServerPort","adbReverse","stopAdbReverseAsync","adbReverseRemove","debug","options","push","splashScreenDPIConstraints","dpi","sizeMultiplier","checkSplashScreenImages","gteSdkVersion","splashScreenMode","splash","resizeMode","generalSplashImagePath","image","italic","generalSplashImage","ImageUtils","getImageDimensionsAsync","androidSplash","androidSplashImages","imageRelativePath","splashImage","width","height","expectedWidth","expectedHeight","sizeMatches","some","maybeStopAdbDaemonAsync","nameStyleForDevice","isActive","text","gray","pauseInteractions","value","limit","choices","item","format","title","suggest","input","RegExp","choice","test","resumeInteractions","DeviceABI","deviceProperties","PROP_SDK_VERSION","PROP_API_VERSION","PROP_CPU_NAME","PROP_CPU_ABILIST_NAME","LOWEST_SUPPORTED_EXPO_API_VERSION","getDeviceSDKVersionAsync","getPropertyForDeviceAsync","getDeviceAPIVersionAsync","parseInt","getAPKDirectory","getDeviceABIsAsync","cpuAbilist","abi","shouldRefresh","prop","propCommand","results","toString","parseAdbDeviceProperties","devicePropertiesString","properties","propertyExp","matchAll"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig, readExpRcAsync } from '@expo/config';\nimport { AndroidConfig } from '@expo/config-plugins';\nimport * as osascript from '@expo/osascript';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport child_process, { execFileSync } from 'child_process';\nimport trim from 'lodash/trim';\nimport os from 'os';\nimport path from 'path';\nimport prompts from 'prompts';\nimport semver from 'semver';\n\nimport {\n  Analytics,\n  Binaries,\n  downloadApkAsync,\n  Env,\n  ImageUtils,\n  learnMore,\n  Logger,\n  NotificationCode,\n  ProjectSettings,\n  Prompts,\n  UrlUtils,\n  Versions,\n  Webpack,\n} from './internal';\n\nexport type Device = {\n  pid?: string;\n  name: string;\n  type: 'emulator' | 'device';\n  isBooted: boolean;\n  isAuthorized: boolean;\n};\n\nlet _lastUrl: string | null = null;\nlet _isAdbOwner: boolean | null = null;\n\nconst BEGINNING_OF_ADB_ERROR_MESSAGE = 'error: ';\nconst CANT_START_ACTIVITY_ERROR = 'Activity not started, unable to resolve Intent';\n\nconst INSTALL_WARNING_TIMEOUT = 60 * 1000;\n\nconst EMULATOR_MAX_WAIT_TIMEOUT = 60 * 1000 * 3;\n\nfunction whichEmulator(): string {\n  if (process.env.ANDROID_HOME) {\n    return `${process.env.ANDROID_HOME}/emulator/emulator`;\n  }\n  return 'emulator';\n}\n\nfunction whichADB(): string {\n  if (process.env.ANDROID_HOME) {\n    return `${process.env.ANDROID_HOME}/platform-tools/adb`;\n  }\n  return 'adb';\n}\n\n/**\n * Returns a list of emulator names.\n */\nasync function getEmulatorsAsync(): Promise<Device[]> {\n  try {\n    const { stdout } = await spawnAsync(whichEmulator(), ['-list-avds']);\n    return stdout\n      .split(os.EOL)\n      .filter(Boolean)\n      .map(name => ({\n        name,\n        type: 'emulator',\n        // unsure from this\n        isBooted: false,\n        isAuthorized: true,\n      }));\n  } catch {\n    return [];\n  }\n}\n\n/**\n * Return the Emulator name for an emulator ID, this can be used to determine if an emulator is booted.\n *\n * @param emulatorId a value like `emulator-5554` from `abd devices`\n */\nasync function getAbdNameForEmulatorIdAsync(emulatorId: string): Promise<string | null> {\n  return (\n    trim(await getAdbOutputAsync(['-s', emulatorId, 'emu', 'avd', 'name']))\n      .split(/\\r?\\n/)\n      .shift() ?? null\n  );\n}\n\nexport async function getAllAvailableDevicesAsync(): Promise<Device[]> {\n  const bootedDevices = await getAttachedDevicesAsync();\n\n  const data = await getEmulatorsAsync();\n  const connectedNames = bootedDevices.map(({ name }) => name);\n\n  const offlineEmulators = data\n    .filter(({ name }) => !connectedNames.includes(name))\n    .map(({ name, type }) => {\n      return {\n        name,\n        type,\n        isBooted: false,\n        // TODO: Are emulators always authorized?\n        isAuthorized: true,\n      };\n    });\n\n  const allDevices = bootedDevices.concat(offlineEmulators);\n\n  if (!allDevices.length) {\n    const genymotionMessage = `https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select \"Use custom Android SDK tools\", and point it at your Android SDK directory.`;\n    throw new Error(\n      `No Android connected device found, and no emulators could be started automatically.\\nPlease connect a device or create an emulator (https://docs.expo.dev/workflow/android-studio-emulator).\\nThen follow the instructions here to enable USB debugging:\\n${genymotionMessage}`\n    );\n  }\n\n  return allDevices;\n}\n\n/**\n * Returns true when a device's splash screen animation has stopped.\n * This can be used to detect when a device is fully booted and ready to use.\n *\n * @param pid\n */\nasync function isBootAnimationCompleteAsync(pid?: string): Promise<boolean> {\n  try {\n    const props = await getPropertyDataForDeviceAsync({ pid }, PROP_BOOT_ANIMATION_STATE);\n    return !!props[PROP_BOOT_ANIMATION_STATE].match(/stopped/);\n  } catch {\n    return false;\n  }\n}\n\nasync function startEmulatorAsync(device: Pick<Device, 'name'>): Promise<Device> {\n  Logger.global.info(`\\u203A Opening emulator ${chalk.bold(device.name)}`);\n\n  // Start a process to open an emulator\n  const emulatorProcess = child_process.spawn(\n    whichEmulator(),\n    [\n      `@${device.name}`,\n      // disable animation for faster boot -- this might make it harder to detect if it mounted properly tho\n      //'-no-boot-anim'\n      // '-google-maps-key' -- TODO: Use from config\n    ],\n    {\n      stdio: 'ignore',\n      detached: true,\n    }\n  );\n\n  emulatorProcess.unref();\n\n  return new Promise<Device>((resolve, reject) => {\n    const waitTimer = setInterval(async () => {\n      const bootedDevices = await getAttachedDevicesAsync();\n      const connected = bootedDevices.find(({ name }) => name === device.name);\n      if (connected) {\n        const isBooted = await isBootAnimationCompleteAsync(connected.pid);\n        if (isBooted) {\n          stopWaiting();\n          resolve(connected);\n        }\n      }\n    }, 1000);\n\n    // Reject command after timeout\n    const maxTimer = setTimeout(() => {\n      const manualCommand = `${whichEmulator()} @${device.name}`;\n      stopWaitingAndReject(\n        `It took too long to start the Android emulator: ${device.name}. You can try starting the emulator manually from the terminal with: ${manualCommand}`\n      );\n    }, EMULATOR_MAX_WAIT_TIMEOUT);\n\n    const stopWaiting = () => {\n      clearTimeout(maxTimer);\n      clearInterval(waitTimer);\n    };\n\n    const stopWaitingAndReject = (message: string) => {\n      stopWaiting();\n      reject(new Error(message));\n      clearInterval(waitTimer);\n    };\n\n    emulatorProcess.on('error', ({ message }) => stopWaitingAndReject(message));\n\n    emulatorProcess.on('exit', () => {\n      const manualCommand = `${whichEmulator()} @${device.name}`;\n      stopWaitingAndReject(\n        `The emulator (${device.name}) quit before it finished opening. You can try starting the emulator manually from the terminal with: ${manualCommand}`\n      );\n    });\n  });\n}\n\n// TODO: This is very expensive for some operations.\nexport async function getAttachedDevicesAsync(): Promise<Device[]> {\n  const output = await getAdbOutputAsync(['devices', '-l']);\n\n  const splitItems = output.trim().replace(/\\n$/, '').split(os.EOL);\n  // First line is `\"List of devices attached\"`, remove it\n  // @ts-ignore: todo\n  const attachedDevices: {\n    props: string[];\n    type: Device['type'];\n    isAuthorized: Device['isAuthorized'];\n  }[] = splitItems\n    .slice(1, splitItems.length)\n    .map(line => {\n      // unauthorized: ['FA8251A00719', 'unauthorized', 'usb:338690048X', 'transport_id:5']\n      // authorized: ['FA8251A00719', 'device', 'usb:336592896X', 'product:walleye', 'model:Pixel_2', 'device:walleye', 'transport_id:4']\n      // emulator: ['emulator-5554', 'offline', 'transport_id:1']\n      const props = line.split(' ').filter(Boolean);\n\n      const isAuthorized = props[1] !== 'unauthorized';\n      const type = line.includes('emulator') ? 'emulator' : 'device';\n      return { props, type, isAuthorized };\n    })\n    .filter(({ props: [pid] }) => !!pid);\n\n  const devicePromises = attachedDevices.map<Promise<Device>>(async props => {\n    const {\n      type,\n      props: [pid, ...deviceInfo],\n      isAuthorized,\n    } = props;\n\n    let name: string | null = null;\n\n    if (type === 'device') {\n      if (isAuthorized) {\n        // Possibly formatted like `model:Pixel_2`\n        // Transform to `Pixel_2`\n        const modelItem = deviceInfo.find(info => info.includes('model:'));\n        if (modelItem) {\n          name = modelItem.replace('model:', '');\n        }\n      }\n      // unauthorized devices don't have a name available to read\n      if (!name) {\n        // Device FA8251A00719\n        name = `Device ${pid}`;\n      }\n    } else {\n      // Given an emulator pid, get the emulator name which can be used to start the emulator later.\n      name = (await getAbdNameForEmulatorIdAsync(pid)) ?? '';\n    }\n\n    return {\n      pid,\n      name,\n      type,\n      isAuthorized,\n      isBooted: true,\n    };\n  });\n\n  return Promise.all(devicePromises);\n}\n\nexport function isPlatformSupported(): boolean {\n  return (\n    process.platform === 'darwin' || process.platform === 'win32' || process.platform === 'linux'\n  );\n}\n\nasync function adbAlreadyRunning(adb: string): Promise<boolean> {\n  try {\n    const result = await spawnAsync(adb, ['start-server']);\n    const lines = trim(result.stderr).split(/\\r?\\n/);\n    return lines.includes('* daemon started successfully') === false;\n  } catch (e) {\n    let errorMessage = trim(e.stderr || e.stdout);\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    e.message = errorMessage;\n    throw e;\n  }\n}\n\nexport async function getAdbOutputAsync(args: string[]): Promise<string> {\n  await Binaries.addToPathAsync('adb');\n  const adb = whichADB();\n\n  if (_isAdbOwner === null) {\n    const alreadyRunning = await adbAlreadyRunning(adb);\n    _isAdbOwner = alreadyRunning === false;\n  }\n\n  if (Env.isDebug()) {\n    Logger.global.info([adb, ...args].join(' '));\n  }\n  try {\n    const result = await spawnAsync(adb, args);\n    return result.stdout;\n  } catch (e) {\n    // User pressed ctrl+c to cancel the process...\n    if (e.signal === 'SIGINT') {\n      e.isAbortError = true;\n    }\n    // TODO: Support heap corruption for adb 29 (process exits with code -1073740940) (windows and linux)\n    let errorMessage = (e.stderr || e.stdout || e.message).trim();\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    e.message = errorMessage;\n    throw e;\n  }\n}\n\nexport async function getAdbFileOutputAsync(args: string[], encoding?: 'latin1') {\n  await Binaries.addToPathAsync('adb');\n  const adb = whichADB();\n\n  if (_isAdbOwner === null) {\n    const alreadyRunning = await adbAlreadyRunning(adb);\n    _isAdbOwner = alreadyRunning === false;\n  }\n\n  try {\n    return await execFileSync(adb, args, {\n      encoding,\n      stdio: 'pipe',\n    });\n  } catch (e) {\n    let errorMessage = (e.stderr || e.stdout || e.message).trim();\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    e.message = errorMessage;\n    throw e;\n  }\n}\n\nasync function _isDeviceAuthorizedAsync(device: Device): Promise<boolean> {\n  // TODO: Get the latest version of the device in case isAuthorized changes.\n  return device.isAuthorized;\n}\n\nasync function isInstalledAsync(device: Device, androidPackage: string): Promise<boolean> {\n  const packages = await getAdbOutputAsync(\n    adbPidArgs(device.pid, 'shell', 'pm', 'list', 'packages', androidPackage)\n  );\n\n  const lines = packages.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line === `package:${androidPackage}`) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Expo installed\nasync function _isExpoInstalledAsync(device: Device) {\n  return await isInstalledAsync(device, 'host.exp.exponent');\n}\n\nasync function ensureDevClientInstalledAsync(device: Device, applicationId: string): Promise<void> {\n  if (!(await isInstalledAsync(device, applicationId))) {\n    throw new Error(\n      `The development client (${applicationId}) for this project is not installed. ` +\n        `Please build and install the client on the simulator first.\\n${learnMore(\n          'https://docs.expo.dev/clients/distribution-for-android/'\n        )}`\n    );\n  }\n}\n\nasync function getExpoVersionAsync(device: Device): Promise<string | null> {\n  const info = await getAdbOutputAsync(\n    adbPidArgs(device.pid, 'shell', 'dumpsys', 'package', 'host.exp.exponent')\n  );\n\n  const regex = /versionName=([0-9.]+)/;\n  const regexMatch = regex.exec(info);\n  if (!regexMatch || regexMatch.length < 2) {\n    return null;\n  }\n\n  return regexMatch[1];\n}\n\nasync function isClientOutdatedAsync(device: Device, sdkVersion?: string): Promise<boolean> {\n  const versions = await Versions.versionsAsync();\n  const clientForSdk = await getClientForSDK(sdkVersion);\n  const latestVersionForSdk = clientForSdk?.version ?? versions.androidVersion;\n  const installedVersion = await getExpoVersionAsync(device);\n  return !installedVersion || semver.lt(installedVersion, latestVersionForSdk);\n}\n\nexport async function installExpoAsync({\n  device,\n  url,\n  version,\n}: {\n  device: Device;\n  url?: string;\n  version?: string;\n}) {\n  let warningTimer: NodeJS.Timeout;\n  const setWarningTimer = () => {\n    if (warningTimer) {\n      clearTimeout(warningTimer);\n    }\n    return setTimeout(() => {\n      Logger.global.info('');\n      Logger.global.info(\n        'This download is taking longer than expected. You can also try downloading the clients from the website at https://expo.dev/tools'\n      );\n    }, INSTALL_WARNING_TIMEOUT);\n  };\n\n  Logger.notifications.info(\n    { code: NotificationCode.START_PROGRESS_BAR },\n    'Downloading the Expo Go app [:bar] :percent :etas'\n  );\n\n  warningTimer = setWarningTimer();\n  const path = await downloadApkAsync(url, progress => {\n    Logger.notifications.info({ code: NotificationCode.TICK_PROGRESS_BAR }, progress);\n  });\n\n  Logger.notifications.info({ code: NotificationCode.STOP_PROGRESS_BAR });\n\n  const message = version\n    ? `Installing Expo Go ${version} on ${device.name}`\n    : `Installing Expo Go on ${device.name}`;\n\n  Logger.notifications.info({ code: NotificationCode.START_LOADING }, message);\n  warningTimer = setWarningTimer();\n  const result = await installOnDeviceAsync(device, { binaryPath: path });\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n\n  clearTimeout(warningTimer);\n  return result;\n}\n\nexport async function installOnDeviceAsync(\n  device: Pick<Device, 'pid'>,\n  { binaryPath }: { binaryPath: string }\n) {\n  return await getAdbOutputAsync(adbPidArgs(device.pid, 'install', '-r', '-d', binaryPath));\n}\n\nexport async function isDeviceBootedAsync({\n  name,\n}: { name?: string } = {}): Promise<Device | null> {\n  const devices = await getAttachedDevicesAsync();\n\n  if (!name) {\n    return devices[0] ?? null;\n  }\n\n  return devices.find(device => device.name === name) ?? null;\n}\n\nexport async function uninstallExpoAsync(device: Device): Promise<string | undefined> {\n  Logger.global.info('Uninstalling Expo Go from Android device.');\n\n  // we need to check if its installed, else we might bump into \"Failure [DELETE_FAILED_INTERNAL_ERROR]\"\n  const isInstalled = await _isExpoInstalledAsync(device);\n  if (!isInstalled) {\n    return;\n  }\n\n  try {\n    return await getAdbOutputAsync(adbPidArgs(device.pid, 'uninstall', 'host.exp.exponent'));\n  } catch (e) {\n    Logger.global.error(\n      'Could not uninstall Expo Go from your device, please uninstall Expo Go manually and try again.'\n    );\n    throw e;\n  }\n}\n\nexport async function upgradeExpoAsync({\n  url,\n  version,\n  device,\n}: {\n  url?: string;\n  version?: string;\n  device?: Device | null;\n} = {}): Promise<boolean> {\n  try {\n    if (!device) {\n      device = (await getAttachedDevicesAsync())[0];\n      if (!device) {\n        throw new Error('no devices connected');\n      }\n    }\n    device = await attemptToStartEmulatorOrAssertAsync(device);\n    if (!device) {\n      return false;\n    }\n\n    await uninstallExpoAsync(device);\n    await installExpoAsync({ device, url, version });\n    if (_lastUrl) {\n      Logger.global.info(`\\u203A Opening ${_lastUrl} in Expo.`);\n      await getAdbOutputAsync([\n        'shell',\n        'am',\n        'start',\n        '-a',\n        'android.intent.action.VIEW',\n        '-d',\n        _lastUrl,\n      ]);\n      _lastUrl = null;\n    }\n\n    return true;\n  } catch (e) {\n    Logger.global.error(e.message);\n    return false;\n  }\n}\n\nasync function _openUrlAsync({\n  pid,\n  url,\n  applicationId,\n}: {\n  pid: string;\n  url: string;\n  applicationId: string;\n}) {\n  // NOTE(brentvatne): temporary workaround! launch Expo Go first, then\n  // launch the project!\n  // https://github.com/expo/expo/issues/7772\n  // adb shell monkey -p host.exp.exponent -c android.intent.category.LAUNCHER 1\n  // Note: this is not needed in Expo Development Client, it only applies to Expo Go\n  if (applicationId === 'host.exp.exponent') {\n    const openClient = await getAdbOutputAsync(\n      adbPidArgs(\n        pid,\n        'shell',\n        'monkey',\n        '-p',\n        applicationId,\n        '-c',\n        'android.intent.category.LAUNCHER',\n        '1'\n      )\n    );\n    if (openClient.includes(CANT_START_ACTIVITY_ERROR)) {\n      throw new Error(openClient.substring(openClient.indexOf('Error: ')));\n    }\n  }\n\n  const openProject = await getAdbOutputAsync(\n    adbPidArgs(pid, 'shell', 'am', 'start', '-a', 'android.intent.action.VIEW', '-d', url)\n  );\n  if (openProject.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(openProject.substring(openProject.indexOf('Error: ')));\n  }\n\n  return openProject;\n}\n\nfunction getUnixPID(port: number | string) {\n  return execFileSync('lsof', [`-i:${port}`, '-P', '-t', '-sTCP:LISTEN'], {\n    encoding: 'utf8',\n    stdio: ['pipe', 'pipe', 'ignore'],\n  })\n    .split('\\n')[0]\n    .trim();\n}\n\nexport async function activateEmulatorWindowAsync(device: Pick<Device, 'type' | 'pid'>) {\n  if (\n    // only mac is supported for now.\n    process.platform !== 'darwin' ||\n    // can only focus emulators\n    device.type !== 'emulator'\n  ) {\n    return;\n  }\n\n  // Google Emulator ID: `emulator-5554` -> `5554`\n  const androidPid = device.pid!.match(/-(\\d+)/)?.[1];\n  if (!androidPid) {\n    return;\n  }\n  // Unix PID\n  const pid = getUnixPID(androidPid);\n\n  try {\n    await osascript.execAsync(`\n  tell application \"System Events\"\n    set frontmost of the first process whose unix id is ${pid} to true\n  end tell`);\n  } catch {\n    // noop -- this feature is very specific and subject to failure.\n  }\n}\n\n/**\n * @param device Android device to open on\n * @param props.launchActivity Activity to launch `[application identifier]/.[main activity name]`, ex: `com.bacon.app/.MainActivity`\n */\nexport async function openAppAsync(\n  device: Pick<Device, 'pid' | 'type'>,\n  {\n    launchActivity,\n  }: {\n    launchActivity: string;\n  }\n) {\n  const openProject = await getAdbOutputAsync(\n    adbPidArgs(\n      device.pid,\n      'shell',\n      'am',\n      'start',\n      '-a',\n      'android.intent.action.RUN',\n      // FLAG_ACTIVITY_SINGLE_TOP -- If set, the activity will not be launched if it is already running at the top of the history stack.\n      '-f',\n      '0x20000000',\n      // Activity to open first: com.bacon.app/.MainActivity\n      '-n',\n      launchActivity\n    )\n  );\n\n  if (openProject.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(openProject.substring(openProject.indexOf('Error: ')));\n  }\n\n  await activateEmulatorWindowAsync(device);\n\n  return openProject;\n}\n\nexport async function attemptToStartEmulatorOrAssertAsync(device: Device): Promise<Device | null> {\n  // TODO: Add a light-weight method for checking since a device could disconnect.\n\n  if (!(await isDeviceBootedAsync(device))) {\n    device = await startEmulatorAsync(device);\n  }\n\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    logUnauthorized(device);\n    return null;\n  }\n\n  return device;\n}\n\nfunction logUnauthorized(device: Device) {\n  Logger.global.warn(\n    `\\nThis computer is not authorized for developing on ${chalk.bold(device.name)}. ${chalk.dim(\n      learnMore('https://expo.fyi/authorize-android-device')\n    )}`\n  );\n}\n\n// Keep a list of simulator UDIDs so we can prevent asking multiple times if a user wants to upgrade.\n// This can prevent annoying interactions when they don't want to upgrade for whatever reason.\nconst hasPromptedToUpgrade: Record<string, boolean> = {};\n\nasync function isManagedProjectAsync(projectRoot: string) {\n  try {\n    await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n    return false;\n  } catch {\n    return true;\n  }\n}\n\nasync function openUrlAsync({\n  url,\n  device,\n  isDetached = false,\n  sdkVersion,\n  devClient = false,\n  exp,\n  projectRoot,\n}: {\n  url: string;\n  isDetached?: boolean;\n  device: Device;\n  sdkVersion?: string;\n  devClient?: boolean;\n  exp?: ExpoConfig;\n  projectRoot: string;\n}): Promise<void> {\n  try {\n    const bootedDevice = await attemptToStartEmulatorOrAssertAsync(device);\n    if (!bootedDevice) {\n      return;\n    }\n\n    Logger.global.info(\n      `\\u203A Opening ${chalk.underline(url)} on ${chalk.bold(bootedDevice.name)}`\n    );\n\n    await activateEmulatorWindowAsync(bootedDevice);\n\n    device = bootedDevice;\n\n    let installedExpo = false;\n    let clientApplicationId = 'host.exp.exponent';\n    if (devClient) {\n      let applicationId;\n      const isManaged = await isManagedProjectAsync(projectRoot);\n      if (isManaged) {\n        applicationId = exp?.android?.package;\n        if (!applicationId) {\n          throw new Error(\n            `Could not find property android.package in app.config.js/app.json. This setting is required to launch the app.`\n          );\n        }\n      } else {\n        applicationId = await AndroidConfig.Package.getApplicationIdAsync(projectRoot);\n        if (!applicationId) {\n          throw new Error(\n            `Could not find applicationId in ${AndroidConfig.Paths.getAppBuildGradleFilePath(\n              projectRoot\n            )}`\n          );\n        }\n      }\n      clientApplicationId = applicationId;\n      await ensureDevClientInstalledAsync(device, clientApplicationId);\n    } else if (!isDetached) {\n      let shouldInstall = !(await _isExpoInstalledAsync(device));\n      const promptKey = device.pid ?? 'unknown';\n      if (\n        !shouldInstall &&\n        !hasPromptedToUpgrade[promptKey] &&\n        (await isClientOutdatedAsync(device, sdkVersion))\n      ) {\n        // Only prompt once per device, per run.\n        hasPromptedToUpgrade[promptKey] = true;\n        const confirm = await Prompts.confirmAsync({\n          initial: true,\n          message: `Expo Go on ${device.name} (${device.type}) is outdated, would you like to upgrade?`,\n        });\n        if (confirm) {\n          await uninstallExpoAsync(device);\n          shouldInstall = true;\n        }\n      }\n\n      if (shouldInstall) {\n        const androidClient = await getClientForSDK(sdkVersion);\n        await installExpoAsync({ device, ...androidClient });\n        installedExpo = true;\n      }\n\n      _lastUrl = url;\n      // _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    try {\n      await _openUrlAsync({ pid: device.pid!, url, applicationId: clientApplicationId });\n    } catch (e) {\n      if (isDetached) {\n        e.message = `Error running app. Have you installed the app already using Android Studio? Since you are detached you must build manually. ${e.message}`;\n      } else {\n        e.message = `Error running app. ${e.message}`;\n      }\n\n      throw e;\n    }\n\n    if (device.type === 'emulator') {\n      // TODO: Bring the emulator window to the front.\n    }\n\n    Analytics.logEvent('Open Url on Device', {\n      platform: 'android',\n      installedExpo,\n    });\n  } catch (e) {\n    e.message = `Error running adb: ${e.message}`;\n    throw e;\n  }\n}\n\nasync function getClientForSDK(sdkVersionString?: string) {\n  if (!sdkVersionString) {\n    return null;\n  }\n\n  const sdkVersion = (await Versions.sdkVersionsAsync())[sdkVersionString];\n  if (!sdkVersion) {\n    return null;\n  }\n\n  return {\n    url: sdkVersion.androidClientUrl,\n    version: sdkVersion.androidClientVersion,\n  };\n}\n\nexport async function openProjectAsync({\n  projectRoot,\n  shouldPrompt,\n  devClient = false,\n  device,\n  scheme,\n}: {\n  projectRoot: string;\n  shouldPrompt?: boolean;\n  devClient?: boolean;\n  device?: Device;\n  scheme?: string;\n}): Promise<{ success: true; url: string } | { success: false; error: Error | string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    const projectUrl = await UrlUtils.constructDeepLinkAsync(projectRoot, { scheme });\n    const { exp } = getConfig(projectRoot, {\n      skipSDKVersionRequirement: true,\n    });\n\n    if (device) {\n      const booted = await attemptToStartEmulatorOrAssertAsync(device);\n      if (!booted) {\n        return { success: false, error: 'escaped' };\n      }\n      device = booted;\n    } else {\n      const devices = await getAllAvailableDevicesAsync();\n      let booted: Device | null = devices[0];\n      if (shouldPrompt) {\n        booted = await promptForDeviceAsync(devices);\n      }\n      if (!booted) {\n        return { success: false, error: 'escaped' };\n      }\n      device = booted;\n    }\n\n    await openUrlAsync({\n      url: projectUrl,\n      device,\n      isDetached: !!exp.isDetached,\n      sdkVersion: exp.sdkVersion,\n      devClient,\n      exp,\n      projectRoot,\n    });\n    return { success: true, url: projectUrl };\n  } catch (e) {\n    if (e.isAbortError) {\n      // Don't log anything when the user cancelled the process\n      return { success: false, error: 'escaped' };\n    } else {\n      Logger.global.error(`Couldn't start project on Android: ${e.message}`);\n    }\n    return { success: false, error: e };\n  }\n}\n\nexport async function openWebProjectAsync({\n  projectRoot,\n  shouldPrompt,\n}: {\n  projectRoot: string;\n  shouldPrompt?: boolean;\n}): Promise<{ success: true; url: string } | { success: false; error: string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    const projectUrl = await Webpack.getUrlAsync(projectRoot);\n    if (projectUrl === null) {\n      return {\n        success: false,\n        error: `The web project has not been started yet`,\n      };\n    }\n    const devices = await getAllAvailableDevicesAsync();\n    let device: Device | null = devices[0];\n    if (shouldPrompt) {\n      device = await promptForDeviceAsync(devices);\n    }\n    if (!device) {\n      return { success: false, error: 'escaped' };\n    }\n\n    await openUrlAsync({ url: projectUrl, device, isDetached: true, projectRoot });\n    return { success: true, url: projectUrl };\n  } catch (e) {\n    Logger.global.error(`Couldn't open the web project on Android: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\n// Adb reverse\nexport async function startAdbReverseAsync(projectRoot: string): Promise<boolean> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  const adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ].filter(Boolean);\n\n  const devices = await getAttachedDevicesAsync();\n  for (const device of devices) {\n    for (const port of adbReversePorts) {\n      if (!(await adbReverse({ device, port }))) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nexport async function stopAdbReverseAsync(projectRoot: string): Promise<void> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  const adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ].filter(Boolean);\n\n  const devices = await getAttachedDevicesAsync();\n  for (const device of devices) {\n    for (const port of adbReversePorts) {\n      await adbReverseRemove({ device, port });\n    }\n  }\n}\n\nasync function adbReverse({ device, port }: { device: Device; port: number }): Promise<boolean> {\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(adbPidArgs(device.pid, 'reverse', `tcp:${port}`, `tcp:${port}`));\n    return true;\n  } catch (e) {\n    Logger.global.warn(`Couldn't adb reverse: ${e.message}`);\n    return false;\n  }\n}\n\nasync function adbReverseRemove({\n  device,\n  port,\n}: {\n  device: Device;\n  port: number;\n}): Promise<boolean> {\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(adbPidArgs(device.pid, 'reverse', '--remove', `tcp:${port}`));\n    return true;\n  } catch (e) {\n    // Don't send this to warn because we call this preemptively sometimes\n    Logger.global.debug(`Couldn't adb reverse remove: ${e.message}`);\n    return false;\n  }\n}\n\nfunction adbPidArgs(pid: Device['pid'], ...options: string[]): string[] {\n  const args = [];\n  if (pid) {\n    args.push('-s', pid);\n  }\n  return args.concat(options);\n}\n\ntype DPIConstraint = {\n  dpi: 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\n  sizeMultiplier: number;\n};\n\nconst splashScreenDPIConstraints: readonly DPIConstraint[] = [\n  {\n    dpi: 'mdpi',\n    sizeMultiplier: 1,\n  },\n  {\n    dpi: 'hdpi',\n    sizeMultiplier: 1.5,\n  },\n  {\n    dpi: 'xhdpi',\n    sizeMultiplier: 2,\n  },\n  {\n    dpi: 'xxhdpi',\n    sizeMultiplier: 3,\n  },\n  {\n    dpi: 'xxxhdpi',\n    sizeMultiplier: 4,\n  },\n];\n\n/**\n * Checks whether `resizeMode` is set to `native` and if `true` analyzes provided images for splashscreen\n * providing `Logger` feedback upon problems.\n * @param projectRoot - directory of the expo project\n * @since SDK33\n */\nexport async function checkSplashScreenImages(projectRoot: string): Promise<void> {\n  const { exp } = getConfig(projectRoot);\n\n  // return before SDK33\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    return;\n  }\n\n  const splashScreenMode = exp.android?.splash?.resizeMode ?? exp.splash?.resizeMode ?? 'contain';\n\n  // only mode `native` is handled by this check\n  if (splashScreenMode === 'contain' || splashScreenMode === 'cover') {\n    return;\n  }\n\n  const generalSplashImagePath = exp.splash?.image;\n  if (!generalSplashImagePath) {\n    Logger.global.warn(\n      `Couldn't read '${chalk.italic('splash.image')}' from ${chalk.italic(\n        'app.json'\n      )}. Provide asset that would serve as baseline splash image.`\n    );\n    return;\n  }\n  const generalSplashImage = await ImageUtils.getImageDimensionsAsync(\n    projectRoot,\n    generalSplashImagePath\n  );\n  if (!generalSplashImage) {\n    Logger.global.warn(\n      `Couldn't read dimensions of provided splash image '${chalk.italic(\n        generalSplashImagePath\n      )}'. Does the file exist?`\n    );\n    return;\n  }\n\n  const androidSplash = exp.android?.splash;\n  const androidSplashImages = [];\n  for (const { dpi, sizeMultiplier } of splashScreenDPIConstraints) {\n    const imageRelativePath = androidSplash?.[dpi];\n    if (imageRelativePath) {\n      const splashImage = await ImageUtils.getImageDimensionsAsync(projectRoot, imageRelativePath);\n      if (!splashImage) {\n        Logger.global.warn(\n          `Couldn't read dimensions of provided splash image '${chalk.italic(\n            imageRelativePath\n          )}'. Does the file exist?`\n        );\n        continue;\n      }\n      const { width, height } = splashImage;\n      const expectedWidth = sizeMultiplier * generalSplashImage.width;\n      const expectedHeight = sizeMultiplier * generalSplashImage.height;\n      androidSplashImages.push({\n        dpi,\n        width,\n        height,\n        expectedWidth,\n        expectedHeight,\n        sizeMatches: width === expectedWidth && height === expectedHeight,\n      });\n    }\n  }\n\n  if (androidSplashImages.length === 0) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native', but you haven't provided any images for different DPIs.\nBe aware that your splash image will be used as xxxhdpi asset and its ${chalk.bold(\n      'actual size will be different'\n    )} depending on device's DPI.\nSee https://docs.expo.dev/guides/splash-screens/#splash-screen-api-limitations-on-android for more information`);\n    return;\n  }\n\n  if (androidSplashImages.some(({ sizeMatches }) => !sizeMatches)) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native' and you've provided different images for different DPIs,\nbut their sizes mismatch expected ones: [dpi: provided (expected)] ${androidSplashImages\n      .map(\n        ({ dpi, width, height, expectedWidth, expectedHeight }) =>\n          `${dpi}: ${width}x${height} (${expectedWidth}x${expectedHeight})`\n      )\n      .join(', ')}\nSee https://docs.expo.dev/guides/splash-screens/#splash-screen-api-limitations-on-android for more information`);\n  }\n}\n\nexport async function maybeStopAdbDaemonAsync() {\n  if (_isAdbOwner !== true) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(['kill-server']);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction nameStyleForDevice(device: Device) {\n  const isActive = device.isBooted;\n  if (!isActive) {\n    // Use no style changes for a disconnected device that is available to be opened.\n    return (text: string) => text;\n  }\n  // A device that is connected and ready to be used should be bolded to match iOS.\n  if (device.isAuthorized) {\n    return chalk.bold;\n  }\n  // Devices that are unauthorized and connected cannot be used, but they are connected so gray them out.\n  return (text: string) => chalk.bold(chalk.gray(text));\n}\n\nexport async function promptForDeviceAsync(devices: Device[]): Promise<Device | null> {\n  // TODO: provide an option to add or download more simulators\n\n  // Pause interactions on the TerminalUI\n  Prompts.pauseInteractions();\n\n  const { value } = await prompts({\n    type: 'autocomplete',\n    name: 'value',\n    limit: 11,\n    message: 'Select a device/emulator',\n    choices: devices.map(item => {\n      const format = nameStyleForDevice(item);\n      const type = item.isAuthorized ? item.type : 'unauthorized';\n      return {\n        title: `${format(item.name)} ${chalk.dim(`(${type})`)}`,\n        value: item.name,\n      };\n    }),\n    suggest: (input: any, choices: any) => {\n      const regex = new RegExp(input, 'i');\n      return choices.filter((choice: any) => regex.test(choice.title));\n    },\n  });\n\n  // Resume interactions on the TerminalUI\n  Prompts.resumeInteractions();\n\n  const device = value ? devices.find(({ name }) => name === value)! : null;\n\n  if (device?.isAuthorized === false) {\n    logUnauthorized(device);\n    return null;\n  }\n\n  return device;\n}\n\nexport enum DeviceABI {\n  // The arch specific android target platforms are soft-deprecated.\n  // Instead of using TargetPlatform as a combination arch + platform\n  // the code will be updated to carry arch information in [DarwinArch]\n  // and [AndroidArch].\n  arm = 'arm',\n  arm64 = 'arm64',\n  x64 = 'x64',\n  x86 = 'x86',\n  armeabiV7a = 'armeabi-v7a',\n  armeabi = 'armeabi',\n  universal = 'universal',\n}\n\ntype DeviceProperties = Record<string, string>;\nconst deviceProperties: Record<string, DeviceProperties> = {};\n\nconst PROP_SDK_VERSION = 'ro.build.version.release';\n// Can sometimes be null\nconst PROP_API_VERSION = 'ro.build.version.sdk';\n// http://developer.android.com/ndk/guides/abis.html\nconst PROP_CPU_NAME = 'ro.product.cpu.abi';\nconst PROP_CPU_ABILIST_NAME = 'ro.product.cpu.abilist';\nconst PROP_BOOT_ANIMATION_STATE = 'init.svc.bootanim';\n\nconst LOWEST_SUPPORTED_EXPO_API_VERSION = 21;\n\n/**\n * @returns string like '11' (i.e. Android 11)\n */\nexport async function getDeviceSDKVersionAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<string> {\n  return await getPropertyForDeviceAsync(device, PROP_SDK_VERSION);\n}\n\n/**\n * @returns number like `30` (i.e. API 30)\n */\nexport async function getDeviceAPIVersionAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<number> {\n  const sdkVersion =\n    (await getPropertyForDeviceAsync(device, PROP_API_VERSION)) ??\n    LOWEST_SUPPORTED_EXPO_API_VERSION;\n  return parseInt(sdkVersion, 10);\n}\n\n/**\n *\n * @returns app/android/app/build/outputs/apk\n */\nexport function getAPKDirectory(projectRoot: string): string {\n  return path.join(projectRoot, 'android', 'app', 'build', 'outputs', 'apk');\n}\n\nexport async function getDeviceABIsAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<DeviceABI[]> {\n  const cpuAbilist = await getPropertyForDeviceAsync(device, PROP_CPU_ABILIST_NAME);\n\n  if (cpuAbilist) {\n    return cpuAbilist.trim().split(',') as DeviceABI[];\n  }\n\n  const abi = (await getPropertyForDeviceAsync(device, PROP_CPU_NAME)) as DeviceABI;\n  return [abi];\n}\n\nexport async function getPropertyForDeviceAsync(\n  device: Pick<Device, 'name' | 'pid'>,\n  name: string,\n  shouldRefresh?: boolean\n): Promise<string> {\n  if (shouldRefresh) {\n    delete deviceProperties[device.name];\n  }\n\n  if (deviceProperties[device.name] == null) {\n    try {\n      deviceProperties[device.name] = await getPropertyDataForDeviceAsync(device);\n    } catch (error) {\n      // TODO: Ensure error has message and not stderr\n      Logger.global.error(\n        `Failed to get properties for device \"${device.name}\" (${device.pid}): ${error.message}`\n      );\n    }\n  }\n  return deviceProperties[device.name][name];\n}\n\nasync function getPropertyDataForDeviceAsync(\n  device: Pick<Device, 'pid'>,\n  prop?: string\n): Promise<DeviceProperties> {\n  // @ts-ignore\n  const propCommand = adbPidArgs(...[device.pid, 'shell', 'getprop', prop].filter(Boolean));\n  try {\n    // Prevent reading as UTF8.\n    const results = (await getAdbFileOutputAsync(propCommand, 'latin1')).toString('latin1');\n    // Like:\n    // [wifi.direct.interface]: [p2p-dev-wlan0]\n    // [wifi.interface]: [wlan0]\n\n    if (prop) {\n      return {\n        [prop]: results,\n      };\n    }\n    return parseAdbDeviceProperties(results);\n  } catch (error) {\n    // TODO: Ensure error has message and not stderr\n    throw new Error(`Failed to get properties for device (${device.pid}): ${error.message}`);\n  }\n}\n\nexport function parseAdbDeviceProperties(devicePropertiesString: string) {\n  const properties: DeviceProperties = {};\n  const propertyExp = /\\[(.*?)\\]: \\[(.*?)\\]/gm;\n  for (const match of devicePropertiesString.matchAll(propertyExp)) {\n    properties[match[1]] = match[2];\n  }\n  return properties;\n}\n"],"file":"Android.js"}