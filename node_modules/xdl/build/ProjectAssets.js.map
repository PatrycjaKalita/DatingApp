{"version":3,"sources":["../src/ProjectAssets.ts"],"names":["EXPO_CDN","resolveGoogleServicesFile","projectRoot","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","ios","getAssetFieldPathsForManifestAsync","sdkAssetFieldPaths","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","assetSchema","resolveExpoUpdatesManifestAssets","assetKeyResolver","assetSchemas","assetInfos","Promise","all","map","manifestField","pathOrURL","test","assetKey","rawUrl","existsSync","ProjectUtils","logError","err","Error","localAssetPath","forEach","index","resolveManifestAssets","resolver","strict","urls","e","logMethod","logWarning","message","_configureExpForAssets","exp","assets","assetBundlePatterns","fullPatterns","p","join","logger","global","info","bundledAssets","Set","asset","file","files","shouldBundle","__packager_asset","some","logDebug","fileHashes","hash","add","type","publishAssetsAsync","options","exportAssetsAsync","hostedUrl","assetPath","outputDir","bundles","experimentalBundle","assetCdnPath","collectAssets","length","saveAssetsAsync","uploadAssetsAsync","quiet","fetchMissingAssetsAsync","paths","user","UserManager","ensureLoggedInAsync","api","ApiV2","clientForUser","result","postAsync","keys","metas","metadata","missing","key","exists","logAssetTask","action","pathName","relativePath","replace","collectAssetPaths","Object","keyChunks","formData","FormData","append","createReadStream","uploadFormDataAsync","promises","push","copy","hostedAssetPrefix","manifestAssets","absolutePath","resolveAndCollectExpoUpdatesManifestAssets","urlResolver","crypto","createHash","update","digest","url","contentType","mime","getType"],"mappings":"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","sourcesContent":["import { ExpoAppManifest, ExpoConfig } from '@expo/config';\nimport { BundleAssetWithFileHashes, BundleOutput } from '@expo/dev-server';\nimport assert from 'assert';\nimport crypto from 'crypto';\nimport FormData from 'form-data';\nimport fs from 'fs-extra';\nimport chunk from 'lodash/chunk';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport uniqBy from 'lodash/uniqBy';\nimport md5hex from 'md5hex';\nimport mime from 'mime';\nimport minimatch from 'minimatch';\nimport path from 'path';\nimport urljoin from 'url-join';\n\nimport { ApiV2, ExpSchema, Logger as logger, ProjectUtils, UserManager } from './internal';\n\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\n\ntype ManifestAsset = { fileHashes: string[]; files: string[]; hash: string };\n\nexport type Asset = ManifestAsset | BundleAssetWithFileHashes;\n\ntype ManifestResolutionError = Error & {\n  localAssetPath?: string;\n  manifestField?: string;\n};\n\ntype BundlesByPlatform = { android: BundleOutput; ios: BundleOutput };\n\ntype ExportAssetsOptions = {\n  projectRoot: string;\n  exp: ExpoAppManifest;\n  hostedUrl: string;\n  assetPath: string;\n  bundles: BundlesByPlatform;\n  outputDir?: string;\n  experimentalBundle?: boolean;\n};\n\nexport async function resolveGoogleServicesFile(projectRoot: string, manifest: ExpoConfig) {\n  if (manifest.android?.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n  if (manifest.ios?.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.ios.googleServicesFile),\n      'base64'\n    );\n    manifest.ios.googleServicesFile = contents;\n  }\n}\n\n/**\n * Get all fields in the manifest that match assets, then filter the ones that aren't set.\n *\n * @param manifest\n * @returns Asset fields that the user has set like [\"icon\", \"splash.image\", ...]\n */\nasync function getAssetFieldPathsForManifestAsync(manifest: ExpoConfig): Promise<string[]> {\n  // String array like [\"icon\", \"notification.icon\", \"loading.icon\", \"loading.backgroundImage\", \"ios.icon\", ...]\n  const sdkAssetFieldPaths = await ExpSchema.getAssetSchemasAsync(manifest.sdkVersion);\n  return sdkAssetFieldPaths.filter(assetSchema => get(manifest, assetSchema));\n}\n\nasync function resolveExpoUpdatesManifestAssets({\n  projectRoot,\n  manifest,\n  assetKeyResolver,\n}: {\n  projectRoot: string;\n  manifest: ExpoConfig;\n  assetKeyResolver: (assetPath: string) => Promise<string>;\n}): Promise<void> {\n  const assetSchemas = await getAssetFieldPathsForManifestAsync(manifest);\n  // Get the URLs\n  const assetInfos = await Promise.all(\n    assetSchemas.map(async manifestField => {\n      const pathOrURL = get(manifest, manifestField);\n      if (/^https?:\\/\\//.test(pathOrURL)) {\n        // It's a remote URL\n        return {\n          assetKey: null,\n          rawUrl: pathOrURL,\n        };\n      } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n        const assetKey = await assetKeyResolver(pathOrURL);\n        return {\n          assetKey,\n          rawUrl: null,\n        };\n      } else {\n        ProjectUtils.logError(\n          projectRoot,\n          'expo',\n          `Unable to resolve asset \"${pathOrURL}\" from \"${manifestField}\" in your app.json or app.config.js`\n        );\n        const err: ManifestResolutionError = new Error('Could not resolve local asset.');\n        err.localAssetPath = pathOrURL;\n        err.manifestField = manifestField;\n        throw err;\n      }\n    })\n  );\n\n  assetSchemas.forEach((manifestField, index: number) =>\n    set(manifest, `${manifestField}Asset`, assetInfos[index])\n  );\n}\n\nexport async function resolveManifestAssets({\n  projectRoot,\n  manifest,\n  resolver,\n  strict = false,\n}: {\n  projectRoot: string;\n  manifest: ExpoConfig;\n  resolver: (assetPath: string) => Promise<string>;\n  strict?: boolean;\n}) {\n  try {\n    // Asset fields that the user has set like [\"icon\", \"splash.image\"]\n    const assetSchemas = await getAssetFieldPathsForManifestAsync(manifest);\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async manifestField => {\n        const pathOrURL = get(manifest, manifestField);\n        if (/^https?:\\/\\//.test(pathOrURL)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err: ManifestResolutionError = new Error('Could not resolve local asset.');\n          err.localAssetPath = pathOrURL;\n          err.manifestField = manifestField;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach((manifestField, index: number) =>\n      set(manifest, `${manifestField}Url`, urls[index])\n    );\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app.json or app.config.js`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot: string, exp: ExpoAppManifest, assets: Asset[]) {\n  // Add google services file if it exists\n  await resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns: string[] = exp.assetBundlePatterns.map((p: string) =>\n      path.join(projectRoot, p)\n    );\n    // Only log the patterns in debug mode, if they aren't already defined in the app.json, then all files will be targeted.\n    logger.global.info('\\nProcessing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set<string>();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        '__packager_asset' in asset &&\n        asset.__packager_asset &&\n        file &&\n        fullPatterns.some((p: string) => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add(\n            'asset_' + hash + ('type' in asset && asset.type ? '.' + asset.type : '')\n          )\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nexport async function publishAssetsAsync(\n  options: Pick<ExportAssetsOptions, 'projectRoot' | 'exp' | 'bundles'>\n) {\n  return exportAssetsAsync({\n    ...options,\n    hostedUrl: EXPO_CDN,\n    assetPath: '~assets',\n  });\n}\n\nexport async function exportAssetsAsync({\n  projectRoot,\n  exp,\n  hostedUrl,\n  assetPath,\n  outputDir,\n  bundles,\n  experimentalBundle,\n}: ExportAssetsOptions) {\n  logger.global.info('Analyzing assets');\n\n  let assets: Asset[];\n  if (experimentalBundle) {\n    assert(outputDir, 'outputDir must be specified when exporting to EAS');\n    assets = uniqBy([...bundles.android.assets, ...bundles.ios.assets], asset => asset.hash);\n  } else {\n    const assetCdnPath = urljoin(hostedUrl, assetPath);\n    assets = await collectAssets(projectRoot, exp, assetCdnPath, bundles);\n  }\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    if (outputDir) {\n      await saveAssetsAsync(projectRoot, assets, outputDir);\n    } else {\n      // No output directory defined, use remote url.\n      await uploadAssetsAsync(projectRoot, assets);\n    }\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\n/**\n * Collect list of assets missing on host\n *\n * @param paths asset paths found locally that need to be uploaded.\n */\nasync function fetchMissingAssetsAsync(paths: string[]): Promise<string[]> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n  const result = await api.postAsync('assets/metadata', { keys: paths });\n\n  const metas = result.metadata;\n  const missing = paths.filter(key => !metas[key].exists);\n  return missing;\n}\n\nfunction logAssetTask(projectRoot: string, action: 'uploading' | 'saving', pathName: string) {\n  ProjectUtils.logDebug(projectRoot, 'expo', `${action} ${pathName}`);\n\n  const relativePath = pathName.replace(projectRoot, '');\n  logger.global.info({ quiet: true }, `${action} ${relativePath}`);\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot: string, assets: Asset[]) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = collectAssetPaths(assets);\n\n  const missing = await fetchMissingAssetsAsync(Object.keys(paths));\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n    return;\n  }\n\n  const keyChunks = chunk(missing, 5);\n\n  // Upload them in chunks of 5 to prevent network and system issues.\n  for (const keys of keyChunks) {\n    const formData = new FormData();\n    for (const key of keys) {\n      const pathName = paths[key];\n\n      logAssetTask(projectRoot, 'uploading', pathName);\n\n      formData.append(key, fs.createReadStream(pathName), pathName);\n    }\n\n    // TODO: Document what's going on\n    const user = await UserManager.ensureLoggedInAsync();\n    const api = ApiV2.clientForUser(user);\n    await api.uploadFormDataAsync('assets/upload', formData);\n  }\n}\n\nfunction collectAssetPaths(assets: Asset[]): Record<string, string> {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths: { [fileHash: string]: string } = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path: string, index: number) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n  return paths;\n}\n\nasync function saveAssetsAsync(projectRoot: string, assets: Asset[], outputDir: string) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = collectAssetPaths(assets);\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      const pathName = paths[key];\n\n      logAssetTask(projectRoot, 'saving', pathName);\n\n      const assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      promises.push(fs.copy(pathName, assetPath));\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function collectAssets(\n  projectRoot: string,\n  exp: ExpoAppManifest,\n  hostedAssetPrefix: string,\n  bundles: BundlesByPlatform\n): Promise<Asset[]> {\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets: Asset[] = [];\n  await resolveManifestAssets({\n    projectRoot,\n    manifest: exp,\n    async resolver(assetPath) {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    strict: true,\n  });\n\n  return [...bundles.ios.assets, ...bundles.android.assets, ...manifestAssets];\n}\n\nexport async function resolveAndCollectExpoUpdatesManifestAssets(\n  projectRoot: string,\n  exp: ExpoConfig,\n  urlResolver: (path: string) => string\n): Promise<{ url: string; hash: string; key: string; contentType: string }[]> {\n  const manifestAssets: { url: string; hash: string; key: string; contentType: string }[] = [];\n  await resolveExpoUpdatesManifestAssets({\n    projectRoot,\n    manifest: exp,\n    async assetKeyResolver(assetPath) {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      // Expo Updates spec dictates that this hash is sha256\n      const hash = crypto.createHash('sha256').update(contents).digest('hex');\n      manifestAssets.push({\n        url: urlResolver(assetPath),\n        hash,\n        key: assetPath,\n        contentType: mime.getType(absolutePath) ?? 'application/octet-stream',\n      });\n      return assetPath;\n    },\n  });\n  return manifestAssets;\n}\n"],"file":"ProjectAssets.js"}