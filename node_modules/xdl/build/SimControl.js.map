{"version":3,"sources":["../src/SimControl.ts"],"names":["getDefaultSimulatorDeviceUDIDAsync","stdout","defaultDeviceUDID","trim","e","getContainerPathAsync","udid","bundleIdentifier","CoreSimulator","isEnabled","xcrunAsync","deviceUDIDOrBooted","error","stderr","match","waitForDeviceToBootAsync","action","bootAsync","openURLAsync","options","url","runBootAsync","openBundleIdAsync","simctlAsync","device","getDeviceInfoAsync","catch","state","isSimulatorBootedAsync","getBootedSimulatorsAsync","simulatorDeviceInfo","listAsync","Object","values","devices","reduce","prev","runtime","concat","filter","find","bootedDevice","installAsync","dir","uninstallAsync","parseSimControlJSONResults","input","JSON","parse","message","Logger","global","type","query","result","info","keys","runtimeSuffix","split","pop","osType","osVersionComponents","osVersion","join","sims","windowName","name","listSimulatorDevicesAsync","listDevicesAsync","output","text","includes","lines","line","metadata","deviceType","push","shutdownAsync","updatePermissionsAsync","permission","setAppearanceAsync","theme","eraseAsync","eraseAllAsync","addMediaAsync","mediaPath","captureScreenAsync","captureType","outputFilePath","path","extname","deleteUnavailableAsync","command","args","xcrunWithLogging","Boolean","isLicenseOutOfDate","lower","toLowerCase","isXcrunInstalledAsync","stdio","debug","parseXcrunError","XDLError","chalk","bold","Array","isArray"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAoFO,eAAeA,kCAAf,GAAoD;AACzD,MAAI;AACF,UAAM;AAAEC,MAAAA,MAAM,EAAEC;AAAV,QAAgC,MAAM,2BAAW,UAAX,EAAuB,CACjE,MADiE,EAEjE,2BAFiE,EAGjE,mBAHiE,CAAvB,CAA5C;AAKA,WAAOA,iBAAiB,CAACC,IAAlB,EAAP;AACD,GAPD,CAOE,OAAOC,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,eAAeC,qBAAf,CAAqC;AAC1CC,EAAAA,IAD0C;AAE1CC,EAAAA;AAF0C,CAArC,EAMoB;AACzB,MAAIC,0BAAcC,SAAd,EAAJ,EAA+B;AAC7B,WAAOD,0BAAcH,qBAAd,CAAoC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAApC,CAAP;AACD;;AACD,MAAI;AACF,UAAM;AAAEN,MAAAA;AAAF,QAAa,MAAMS,UAAU,CAAC,CAClC,QADkC,EAElC,mBAFkC,EAGlCC,kBAAkB,CAACL,IAAD,CAHgB,EAIlCC,gBAJkC,CAAD,CAAnC;AAMA,WAAON,MAAM,CAACE,IAAP,EAAP;AACD,GARD,CAQE,OAAOS,KAAP,EAAc;AAAA;;AACd,yBAAIA,KAAK,CAACC,MAAV,0CAAI,cAAcC,KAAd,CAAoB,2BAApB,CAAJ,EAAsD;AACpD,aAAO,IAAP;AACD;;AACD,UAAMF,KAAN;AACD;AACF;;AAEM,eAAeG,wBAAf,CAAwC;AAC7CT,EAAAA;AAD6C,CAAxC,EAE4D;AACjE,SAAO,8CAA2C;AAChDU,IAAAA,MAAM,EAAE,MAAMC,SAAS,CAAC;AAAEX,MAAAA;AAAF,KAAD;AADyB,GAA3C,CAAP;AAGD;;AAEM,eAAeY,YAAf,CAA4BC,OAA5B,EAAoF;AACzF,MAAI;AACF;AACA,UAAMT,UAAU,CAAC,CAAC,QAAD,EAAW,SAAX,EAAsBC,kBAAkB,CAACQ,OAAO,CAACb,IAAT,CAAxC,EAAwDa,OAAO,CAACC,GAAhE,CAAD,CAAhB;AACD,GAHD,CAGE,OAAOR,KAAP,EAAc;AAAA;;AACd,QAAI,oBAACA,KAAK,CAACC,MAAP,2CAAC,eAAcC,KAAd,CAAoB,yCAApB,CAAD,CAAJ,EAAqE;AACnE,YAAMF,KAAN;AACD,KAHa,CAId;AACA;AAEA;;;AACA,UAAMS,YAAY,CAAC;AAAEf,MAAAA,IAAI,EAAEK,kBAAkB,CAACQ,OAAO,CAACb,IAAT;AAA1B,KAAD,CAAlB,CARc,CAUd;;AACA,WAAO,MAAMY,YAAY,CAACC,OAAD,CAAzB;AACD;AACF;;AAEM,eAAeG,iBAAf,CAAiCH,OAAjC,EAGkB;AACvB,SAAOI,WAAW,CAAC,CAAC,QAAD,EAAWZ,kBAAkB,CAACQ,OAAO,CAACb,IAAT,CAA7B,EAA6Ca,OAAO,CAACZ,gBAArD,CAAD,CAAlB;AACD,C,CAED;;;AACO,eAAeU,SAAf,CAAyB;AAAEX,EAAAA;AAAF,CAAzB,EAAsF;AAC3F,MAAIE,0BAAcC,SAAd,EAAJ,EAA+B;AAC7B,UAAMe,MAAM,GAAG,MAAMhB,0BAAciB,kBAAd,CAAiC;AAAEnB,MAAAA;AAAF,KAAjC,EAA2CoB,KAA3C,CAAiD,MAAM,IAAvD,CAArB;;AACA,QAAI,CAAAF,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,KAAR,MAAkB,QAAtB,EAAgC;AAC9B,aAAOH,MAAP;AACD;;AACD,UAAMH,YAAY,CAAC;AAAEf,MAAAA;AAAF,KAAD,CAAlB;AACA,WAAO,MAAM,oCAAcE,0BAAciB,kBAA5B,EAAgD;AAAEnB,MAAAA;AAAF,KAAhD,CAAb;AACD,GAR0F,CAU3F;;;AACA,QAAMe,YAAY,CAAC;AAAEf,IAAAA;AAAF,GAAD,CAAlB;AACA,SAAO,MAAMsB,sBAAsB,CAAC;AAAEtB,IAAAA;AAAF,GAAD,CAAnC;AACD;;AAED,eAAeuB,wBAAf,GAAsE;AACpE,QAAMC,mBAAmB,GAAG,MAAMC,SAAS,CAAC,SAAD,CAA3C;AACA,SAAOC,MAAM,CAACC,MAAP,CAAcH,mBAAmB,CAACI,OAAlC,EAA2CC,MAA3C,CAAkD,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAC1E,WAAOD,IAAI,CAACE,MAAL,CAAYD,OAAO,CAACE,MAAR,CAAef,MAAM,IAAIA,MAAM,CAACG,KAAP,KAAiB,QAA1C,CAAZ,CAAP;AACD,GAFM,EAEJ,EAFI,CAAP;AAGD;;AAED,eAAeC,sBAAf,CAAsC;AACpCtB,EAAAA;AADoC,CAAtC,EAIoC;AAClC;AACA,QAAM4B,OAAO,GAAG,MAAML,wBAAwB,EAA9C;;AACA,MAAIvB,IAAJ,EAAU;AAAA;;AACR,4BAAO4B,OAAO,CAACM,IAAR,CAAaC,YAAY,IAAIA,YAAY,CAACnC,IAAb,KAAsBA,IAAnD,CAAP,yDAAmE,IAAnE;AACD,GAFD,MAEO;AAAA;;AACL,wBAAO4B,OAAO,CAAC,CAAD,CAAd,iDAAqB,IAArB;AACD;AACF;;AAEM,eAAeb,YAAf,CAA4B;AAAEf,EAAAA;AAAF,CAA5B,EAAwD;AAC7D,MAAI;AACF;AACA,UAAMI,UAAU,CAAC,CAAC,QAAD,EAAW,MAAX,EAAmBJ,IAAnB,CAAD,CAAhB;AACD,GAHD,CAGE,OAAOM,KAAP,EAAc;AAAA;;AACd,QAAI,oBAACA,KAAK,CAACC,MAAP,2CAAC,eAAcC,KAAd,CAAoB,gDAApB,CAAD,CAAJ,EAA4E;AAC1E,YAAMF,KAAN;AACD;AACF;AACF;;AAEM,eAAe8B,YAAf,CAA4BvB,OAA5B,EAAkF;AACvF,SAAOI,WAAW,CAAC,CAAC,SAAD,EAAYZ,kBAAkB,CAACQ,OAAO,CAACb,IAAT,CAA9B,EAA8Ca,OAAO,CAACwB,GAAtD,CAAD,CAAlB;AACD;;AAEM,eAAeC,cAAf,CAA8BzB,OAA9B,EAGU;AACf,SAAOI,WAAW,CAAC,CAAC,WAAD,EAAcZ,kBAAkB,CAACQ,OAAO,CAACb,IAAT,CAAhC,EAAgDa,OAAO,CAACZ,gBAAxD,CAAD,CAAlB;AACD;;AAED,SAASsC,0BAAT,CAAoCC,KAApC,EAAwD;AACtD,MAAI;AACF,WAAOC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAP;AACD,GAFD,CAEE,OAAOlC,KAAP,EAAc;AACd;AACA;AACA,QAAIA,KAAK,CAACqC,OAAN,CAAcnC,KAAd,CAAoB,kBAApB,CAAJ,EAA6C;AAC3CoC,yBAAOC,MAAP,CAAcvC,KAAd,CAAqB,4CAA2CkC,KAAM,EAAtE;AACD;;AACD,UAAMlC,KAAN;AACD;AACF,C,CAED;AACA;;;AACO,eAAemB,SAAf,CACLqB,IADK,EAELC,KAFK,EAGyB;AAC9B,QAAMC,MAAM,GAAG,MAAM/B,WAAW,CAAC,CAAC,MAAD,EAAS6B,IAAT,EAAe,QAAf,EAAyBC,KAAzB,CAAD,CAAhC;AACA,QAAME,IAAI,GAAGV,0BAA0B,CAACS,MAAM,CAACrD,MAAR,CAAvC;;AAEA,OAAK,MAAMoC,OAAX,IAAsBL,MAAM,CAACwB,IAAP,CAAYD,IAAI,CAACrB,OAAjB,CAAtB,EAAiD;AAC/C;AACA,UAAMuB,aAAa,GAAGpB,OAAO,CAACqB,KAAR,CAAc,qCAAd,EAAqDC,GAArD,EAAtB,CAF+C,CAG/C;;AACA,UAAM,CAACC,MAAD,EAAS,GAAGC,mBAAZ,IAAmCJ,aAAa,CAACC,KAAd,CAAoB,GAApB,CAAzC,CAJ+C,CAK/C;;AACA,UAAMI,SAAS,GAAGD,mBAAmB,CAACE,IAApB,CAAyB,GAAzB,CAAlB;AACA,UAAMC,IAAI,GAAGT,IAAI,CAACrB,OAAL,CAAaG,OAAb,CAAb;;AACA,SAAK,MAAMb,MAAX,IAAqBwC,IAArB,EAA2B;AACzBxC,MAAAA,MAAM,CAACa,OAAP,GAAiBA,OAAjB;AACAb,MAAAA,MAAM,CAACsC,SAAP,GAAmBA,SAAnB;AACAtC,MAAAA,MAAM,CAACyC,UAAP,GAAqB,GAAEzC,MAAM,CAAC0C,IAAK,KAAIJ,SAAU,GAAjD;AACAtC,MAAAA,MAAM,CAACoC,MAAP,GAAgBA,MAAhB;AACD;AACF;;AACD,SAAOL,IAAP;AACD;;AAEM,eAAeY,yBAAf,GAA2C;AAChD,MAAI3D,0BAAcC,SAAd,EAAJ,EAA+B;AAC7B,WAAOD,0BAAc4D,gBAAd,EAAP;AACD;;AACD,QAAMtC,mBAAmB,GAAG,MAAMC,SAAS,CAAC,SAAD,CAA3C;AACA,SAAOC,MAAM,CAACC,MAAP,CAAcH,mBAAmB,CAACI,OAAlC,EAA2CC,MAA3C,CAAkD,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAC1E,WAAOD,IAAI,CAACE,MAAL,CAAYD,OAAZ,CAAP;AACD,GAFM,EAEJ,EAFI,CAAP;AAGD;AAED;AACA;AACA;;;AACO,eAAe+B,gBAAf,GAA4D;AACjE,QAAM;AAAEC,IAAAA;AAAF,MAAa,MAAM3D,UAAU,CAAC,CAAC,SAAD,EAAY,MAAZ,EAAoB,SAApB,CAAD,CAAnC;AAEA,QAAM4D,IAAI,GAAGD,MAAM,CAACN,IAAP,CAAY,EAAZ,CAAb;AACA,QAAM7B,OAAwB,GAAG,EAAjC;;AACA,MAAI,CAACoC,IAAI,CAACC,QAAL,CAAc,kBAAd,CAAL,EAAwC;AACtC,WAAO,EAAP;AACD;;AAED,QAAMC,KAAK,GAAGF,IAAI,CAACZ,KAAL,CAAW,IAAX,CAAd;;AACA,OAAK,MAAMe,IAAX,IAAmBD,KAAnB,EAA0B;AACxB,QAAIC,IAAI,KAAK,kBAAb,EAAiC;AAC/B;AACD;;AACD,UAAMjD,MAAM,GAAGiD,IAAI,CAAC3D,KAAL,CAAW,0CAAX,CAAf;;AACA,QAAIU,MAAJ,EAAY;AACV,YAAM,GAAG0C,IAAH,GAAWJ,SAAX,EAAsBxD,IAAtB,IAA8BkB,MAApC;AACA,YAAMkD,QAAuB,GAAG;AAC9BR,QAAAA,IAD8B;AAE9B5D,QAAAA,IAF8B;AAG9BwD,QAAAA,SAAS,EAAEA,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAe,IAHM;AAI9Ba,QAAAA,UAAU,EAAEb,SAAS,GAAG,QAAH,GAAc;AAJL,OAAhC;AAOA5B,MAAAA,OAAO,CAAC0C,IAAR,CAAaF,QAAb;AACD;AACF;;AAED,SAAOxC,OAAP;AACD;;AAEM,eAAe2C,aAAf,CAA6BvE,IAA7B,EAA4C;AACjD,MAAI;AACF,WAAOiB,WAAW,CAAC,CAAC,UAAD,EAAaZ,kBAAkB,CAACL,IAAD,CAA/B,CAAD,CAAlB;AACD,GAFD,CAEE,OAAOF,CAAP,EAAU;AAAA;;AACV,QAAI,gBAACA,CAAC,CAAC6C,OAAH,uCAAC,WAAWsB,QAAX,CAAoB,wBAApB,CAAD,CAAJ,EAAoD;AAClD,YAAMnE,CAAN;AACD;AACF;;AACD,SAAO,IAAP;AACD,C,CAED;;;AACO,eAAe0E,sBAAf,CACLxE,IADK,EAELU,MAFK,EAGL+D,UAHK,EAILxE,gBAJK,EAKL;AACA,SAAOgB,WAAW,CAAC,CAAC,SAAD,EAAYZ,kBAAkB,CAACL,IAAD,CAA9B,EAAsCU,MAAtC,EAA8C+D,UAA9C,EAA0DxE,gBAA1D,CAAD,CAAlB;AACD;;AAEM,eAAeyE,kBAAf,CAAkC1E,IAAlC,EAAgD2E,KAAhD,EAAyE;AAC9E,SAAO1D,WAAW,CAAC,CAAC,IAAD,EAAOZ,kBAAkB,CAACL,IAAD,CAAzB,EAAiC2E,KAAjC,CAAD,CAAlB;AACD,C,CAED;;;AACO,eAAeC,UAAf,CAA0B5E,IAA1B,EAAwC;AAC7C,SAAOiB,WAAW,CAAC,CAAC,OAAD,EAAUZ,kBAAkB,CAACL,IAAD,CAA5B,CAAD,CAAlB;AACD;;AAEM,eAAe6E,aAAf,GAA+B;AACpC,SAAO5D,WAAW,CAAC,CAAC,OAAD,EAAU,KAAV,CAAD,CAAlB;AACD,C,CAED;;;AACO,eAAe6D,aAAf,CAA6B9E,IAA7B,EAA2C+E,SAA3C,EAA8D;AACnE,SAAO9D,WAAW,CAAC,CAAC,UAAD,EAAaZ,kBAAkB,CAACL,IAAD,CAA/B,EAAuC+E,SAAvC,CAAD,CAAlB;AACD;;AAEM,eAAeC,kBAAf,CACLhF,IADK,EAELiF,WAFK,EAGLC,cAHK,EAIL;AACA,SAAOjE,WAAW,CAAC,CACjB,IADiB,EAEjBZ,kBAAkB,CAACL,IAAD,CAFD,EAGjBiF,WAHiB,EAIhB,SAAQE,gBAAKC,OAAL,CAAaF,cAAb,CAA6B,EAJrB,EAKjBA,cALiB,CAAD,CAAlB;AAOD,C,CAED;;;AACO,eAAeG,sBAAf,GAAwC;AAC7C,SAAOpE,WAAW,CAAC,CAAC,QAAD,EAAW,aAAX,CAAD,CAAlB;AACD;;AAEM,eAAeA,WAAf,CACL,CAACqE,OAAD,EAAU,GAAGC,IAAb,CADK,EAEL1E,OAFK,EAGiB;AACtB,SAAO2E,gBAAgB,EACrB;AACA,GAAC,QAAD,EAAWF,OAAX,EAAoB,GAAGC,IAAI,CAACtD,MAAL,CAAYwD,OAAZ,CAAvB,CAFqB,EAGrB5E,OAHqB,CAAvB;AAKD;;AAED,SAASR,kBAAT,CAA4BL,IAA5B,EAAmD;AACjD,SAAOA,IAAI,GAAGA,IAAH,GAAU,QAArB;AACD;;AAEM,SAAS0F,kBAAT,CAA4B1B,IAA5B,EAA0C;AAC/C,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,KAAP;AACD;;AAED,QAAM2B,KAAK,GAAG3B,IAAI,CAAC4B,WAAL,EAAd;AACA,SAAOD,KAAK,CAAC1B,QAAN,CAAe,OAAf,KAA2B0B,KAAK,CAAC1B,QAAN,CAAe,SAAf,CAAlC;AACD;;AAEM,eAAe4B,qBAAf,GAAuC;AAC5C,MAAI;AACF,mCAAS,iBAAT,EAA4B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA5B;AACA,WAAO,IAAP;AACD,GAHD,CAGE,MAAM;AACN,WAAO,KAAP;AACD;AACF;;AAEM,eAAe1F,UAAf,CAA0BmF,IAA1B,EAA0C1E,OAA1C,EAAkE;AACvE+B,qBAAOC,MAAP,CAAckD,KAAd,CAAoB,oBAAoBR,IAAI,CAAC9B,IAAL,CAAU,GAAV,CAAxC;;AACA,MAAI;AACF,WAAO,MAAM,2BAAW,OAAX,EAAoB8B,IAApB,EAA0B1E,OAA1B,CAAb;AACD,GAFD,CAEE,OAAOf,CAAP,EAAU;AACV,UAAMkG,eAAe,CAAClG,CAAD,CAArB;AACD;AACF;;AAEM,SAASkG,eAAT,CAAyBlG,CAAzB,EAAwC;AAAA;;AAC7C,MAAI4F,kBAAkB,CAAC5F,CAAC,CAACH,MAAH,CAAlB,IAAgC+F,kBAAkB,CAAC5F,CAAC,CAACS,MAAH,CAAtD,EAAkE;AAChE,WAAO,KAAI0F,oBAAJ,EACL,4BADK,EAEL,uEAFK,CAAP;AAID,GALD,MAKO,iBAAInG,CAAC,CAACS,MAAN,sCAAI,UAAU0D,QAAV,CAAmB,iCAAnB,CAAJ,EAA2D;AAChE,WAAO,KAAIgC,oBAAJ,EACL,sBADK,EAEJ,uBAAsBC,iBAAMC,IAAN,CACrB,8CADqB,CAErB,iBAJG,CAAP;AAMD,GAb4C,CAc7C;;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcvG,CAAC,CAACiE,MAAhB,CAAJ,EAA6B;AAC3BjE,IAAAA,CAAC,CAAC6C,OAAF,IAAa,OAAO7C,CAAC,CAACiE,MAAF,CAASN,IAAT,CAAc,IAAd,EAAoB5D,IAApB,EAApB;AACD,GAFD,MAEO,IAAIC,CAAC,CAACS,MAAN,EAAc;AACnBT,IAAAA,CAAC,CAAC6C,OAAF,IAAa,OAAO7C,CAAC,CAACS,MAAtB;AACD;;AACD,SAAOT,CAAP;AACD;;AAEM,eAAe0F,gBAAf,CACLD,IADK,EAEL1E,OAFK,EAGiB;AACtB,MAAI;AACF,WAAO,MAAMT,UAAU,CAACmF,IAAD,EAAO1E,OAAP,CAAvB;AACD,GAFD,CAEE,OAAOf,CAAP,EAAU;AACV8C,uBAAOC,MAAP,CAAcvC,KAAd,CAAqB,yBAAwBiF,IAAI,CAAC9B,IAAL,CAAU,GAAV,CAAe,OAAM3D,CAAC,CAACS,MAAF,IAAYT,CAAC,CAAC6C,OAAQ,EAAxF;;AACA,UAAM7C,CAAN;AACD;AACF","sourcesContent":["import spawnAsync, { SpawnOptions, SpawnResult } from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport { execSync } from 'child_process';\nimport path from 'path';\n\nimport { waitForActionAsync } from './apple/utils/waitForActionAsync';\nimport { CoreSimulator, Logger, XDLError } from './internal';\nimport { profileMethod } from './utils/profileMethod';\n\ntype DeviceState = 'Shutdown' | 'Booted';\n\nexport type SimulatorDevice = {\n  availabilityError: 'runtime profile not found';\n  /**\n   * '/Users/name/Library/Developer/CoreSimulator/Devices/00E55DC0-0364-49DF-9EC6-77BE587137D4/data'\n   */\n  dataPath: string;\n  /**\n   * '/Users/name/Library/Logs/CoreSimulator/00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  logPath: string;\n  /**\n   * '00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  udid: string;\n  /**\n   * com.apple.CoreSimulator.SimRuntime.tvOS-13-4\n   */\n  runtime: string;\n  isAvailable: boolean;\n  /**\n   * 'com.apple.CoreSimulator.SimDeviceType.Apple-TV-1080p'\n   */\n  deviceTypeIdentifier: string;\n  state: DeviceState;\n  /**\n   * 'Apple TV'\n   */\n  name: string;\n\n  osType: OSType;\n  /**\n   * '13.4'\n   */\n  osVersion: string;\n  /**\n   * 'iPhone 11 (13.6)'\n   */\n  windowName: string;\n};\n\nexport type XCTraceDevice = {\n  /**\n   * '00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  udid: string;\n  /**\n   * 'Apple TV'\n   */\n  name: string;\n\n  deviceType: 'device' | 'catalyst';\n  /**\n   * '13.4'\n   */\n  osVersion: string;\n};\n\ntype OSType = 'iOS' | 'tvOS' | 'watchOS' | 'macOS';\n\ntype PermissionName =\n  | 'all'\n  | 'calendar'\n  | 'contacts-limited'\n  | 'contacts'\n  | 'location'\n  | 'location-always'\n  | 'photos-add'\n  | 'photos'\n  | 'media-library'\n  | 'microphone'\n  | 'motion'\n  | 'reminders'\n  | 'siri';\n\ntype SimulatorDeviceList = {\n  devices: {\n    [runtime: string]: SimulatorDevice[];\n  };\n};\n\nexport async function getDefaultSimulatorDeviceUDIDAsync() {\n  try {\n    const { stdout: defaultDeviceUDID } = await spawnAsync('defaults', [\n      'read',\n      'com.apple.iphonesimulator',\n      'CurrentDeviceUDID',\n    ]);\n    return defaultDeviceUDID.trim();\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Returns the local path for the installed tar.app. Returns null when the app isn't installed.\n *\n * @param props.udid device udid.\n * @param props.bundleIdentifier bundle identifier for app\n * @returns local file path to installed app binary, e.g. '/Users/evanbacon/Library/Developer/CoreSimulator/Devices/EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE/data/Containers/Bundle/Application/FA43A0C6-C2AD-442D-B8B1-EAF3E88CF3BF/Exponent-2.21.3.tar.app'\n */\nexport async function getContainerPathAsync({\n  udid,\n  bundleIdentifier,\n}: {\n  udid: string;\n  bundleIdentifier: string;\n}): Promise<string | null> {\n  if (CoreSimulator.isEnabled()) {\n    return CoreSimulator.getContainerPathAsync({ udid, bundleIdentifier });\n  }\n  try {\n    const { stdout } = await xcrunAsync([\n      'simctl',\n      'get_app_container',\n      deviceUDIDOrBooted(udid),\n      bundleIdentifier,\n    ]);\n    return stdout.trim();\n  } catch (error) {\n    if (error.stderr?.match(/No such file or directory/)) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nexport async function waitForDeviceToBootAsync({\n  udid,\n}: Pick<SimulatorDevice, 'udid'>): Promise<SimulatorDevice | null> {\n  return waitForActionAsync<SimulatorDevice | null>({\n    action: () => bootAsync({ udid }),\n  });\n}\n\nexport async function openURLAsync(options: { udid?: string; url: string }): Promise<void> {\n  try {\n    // Skip logging since this is likely to fail.\n    await xcrunAsync(['simctl', 'openurl', deviceUDIDOrBooted(options.udid), options.url]);\n  } catch (error) {\n    if (!error.stderr?.match(/Unable to lookup in current state: Shut/)) {\n      throw error;\n    }\n    // If the device was in a weird in-between state (\"Shutting Down\" or \"Shutdown\"), then attempt to reboot it and try again.\n    // This can happen when quitting the Simulator app, and immediately pressing `i` to reopen the project.\n\n    // First boot the simulator\n    await runBootAsync({ udid: deviceUDIDOrBooted(options.udid) });\n\n    // Finally, try again...\n    return await openURLAsync(options);\n  }\n}\n\nexport async function openBundleIdAsync(options: {\n  udid?: string;\n  bundleIdentifier: string;\n}): Promise<SpawnResult> {\n  return simctlAsync(['launch', deviceUDIDOrBooted(options.udid), options.bundleIdentifier]);\n}\n\n// This will only boot in headless mode if the Simulator app is not running.\nexport async function bootAsync({ udid }: { udid: string }): Promise<SimulatorDevice | null> {\n  if (CoreSimulator.isEnabled()) {\n    const device = await CoreSimulator.getDeviceInfoAsync({ udid }).catch(() => null);\n    if (device?.state === 'Booted') {\n      return device;\n    }\n    await runBootAsync({ udid });\n    return await profileMethod(CoreSimulator.getDeviceInfoAsync)({ udid });\n  }\n\n  // TODO: Deprecate\n  await runBootAsync({ udid });\n  return await isSimulatorBootedAsync({ udid });\n}\n\nasync function getBootedSimulatorsAsync(): Promise<SimulatorDevice[]> {\n  const simulatorDeviceInfo = await listAsync('devices');\n  return Object.values(simulatorDeviceInfo.devices).reduce((prev, runtime) => {\n    return prev.concat(runtime.filter(device => device.state === 'Booted'));\n  }, []);\n}\n\nasync function isSimulatorBootedAsync({\n  udid,\n}: {\n  udid?: string;\n}): Promise<SimulatorDevice | null> {\n  // Simulators can be booted even if the app isn't running :(\n  const devices = await getBootedSimulatorsAsync();\n  if (udid) {\n    return devices.find(bootedDevice => bootedDevice.udid === udid) ?? null;\n  } else {\n    return devices[0] ?? null;\n  }\n}\n\nexport async function runBootAsync({ udid }: { udid: string }) {\n  try {\n    // Skip logging since this is likely to fail.\n    await xcrunAsync(['simctl', 'boot', udid]);\n  } catch (error) {\n    if (!error.stderr?.match(/Unable to boot device in current state: Booted/)) {\n      throw error;\n    }\n  }\n}\n\nexport async function installAsync(options: { udid: string; dir: string }): Promise<any> {\n  return simctlAsync(['install', deviceUDIDOrBooted(options.udid), options.dir]);\n}\n\nexport async function uninstallAsync(options: {\n  udid?: string;\n  bundleIdentifier: string;\n}): Promise<any> {\n  return simctlAsync(['uninstall', deviceUDIDOrBooted(options.udid), options.bundleIdentifier]);\n}\n\nfunction parseSimControlJSONResults(input: string): any {\n  try {\n    return JSON.parse(input);\n  } catch (error) {\n    // Nov 15, 2020: Observed this can happen when opening the simulator and the simulator prompts the user to update the XC command line tools.\n    // Unexpected token I in JSON at position 0\n    if (error.message.match('Unexpected token')) {\n      Logger.global.error(`Apple's simctl returned malformed JSON:\\n${input}`);\n    }\n    throw error;\n  }\n}\n\n// TODO: Compare with\n// const results = await SimControl.xcrunAsync(['instruments', '-s']);\nexport async function listAsync(\n  type: 'devices' | 'devicetypes' | 'runtimes' | 'pairs',\n  query?: string | 'available'\n): Promise<SimulatorDeviceList> {\n  const result = await simctlAsync(['list', type, '--json', query]);\n  const info = parseSimControlJSONResults(result.stdout) as SimulatorDeviceList;\n\n  for (const runtime of Object.keys(info.devices)) {\n    // Given a string like 'com.apple.CoreSimulator.SimRuntime.tvOS-13-4'\n    const runtimeSuffix = runtime.split('com.apple.CoreSimulator.SimRuntime.').pop()!;\n    // Create an array [tvOS, 13, 4]\n    const [osType, ...osVersionComponents] = runtimeSuffix.split('-');\n    // Join the end components [13, 4] -> '13.4'\n    const osVersion = osVersionComponents.join('.');\n    const sims = info.devices[runtime];\n    for (const device of sims) {\n      device.runtime = runtime;\n      device.osVersion = osVersion;\n      device.windowName = `${device.name} (${osVersion})`;\n      device.osType = osType as OSType;\n    }\n  }\n  return info;\n}\n\nexport async function listSimulatorDevicesAsync() {\n  if (CoreSimulator.isEnabled()) {\n    return CoreSimulator.listDevicesAsync();\n  }\n  const simulatorDeviceInfo = await listAsync('devices');\n  return Object.values(simulatorDeviceInfo.devices).reduce((prev, runtime) => {\n    return prev.concat(runtime);\n  }, []);\n}\n\n/**\n * Get a list of all connected devices.\n */\nexport async function listDevicesAsync(): Promise<XCTraceDevice[]> {\n  const { output } = await xcrunAsync(['xctrace', 'list', 'devices']);\n\n  const text = output.join('');\n  const devices: XCTraceDevice[] = [];\n  if (!text.includes('== Simulators ==')) {\n    return [];\n  }\n\n  const lines = text.split('\\n');\n  for (const line of lines) {\n    if (line === '== Simulators ==') {\n      break;\n    }\n    const device = line.match(/(.*?) (\\(([0-9.]+)\\) )?\\(([0-9A-F-]+)\\)/i);\n    if (device) {\n      const [, name, , osVersion, udid] = device;\n      const metadata: XCTraceDevice = {\n        name,\n        udid,\n        osVersion: osVersion ?? '??',\n        deviceType: osVersion ? 'device' : 'catalyst',\n      };\n\n      devices.push(metadata);\n    }\n  }\n\n  return devices;\n}\n\nexport async function shutdownAsync(udid?: string) {\n  try {\n    return simctlAsync(['shutdown', deviceUDIDOrBooted(udid)]);\n  } catch (e) {\n    if (!e.message?.includes('No devices are booted.')) {\n      throw e;\n    }\n  }\n  return null;\n}\n\n// Some permission changes will terminate the application if running\nexport async function updatePermissionsAsync(\n  udid: string,\n  action: 'grant' | 'revoke' | 'reset',\n  permission: PermissionName,\n  bundleIdentifier?: string\n) {\n  return simctlAsync(['privacy', deviceUDIDOrBooted(udid), action, permission, bundleIdentifier]);\n}\n\nexport async function setAppearanceAsync(udid: string, theme: 'light' | 'dark') {\n  return simctlAsync(['ui', deviceUDIDOrBooted(udid), theme]);\n}\n\n// Cannot be invoked unless the simulator is `shutdown`\nexport async function eraseAsync(udid: string) {\n  return simctlAsync(['erase', deviceUDIDOrBooted(udid)]);\n}\n\nexport async function eraseAllAsync() {\n  return simctlAsync(['erase', 'all']);\n}\n\n// Add photos and videos to the simulator's gallery\nexport async function addMediaAsync(udid: string, mediaPath: string) {\n  return simctlAsync(['addmedia', deviceUDIDOrBooted(udid), mediaPath]);\n}\n\nexport async function captureScreenAsync(\n  udid: string,\n  captureType: 'screenshot' | 'recordVideo',\n  outputFilePath: string\n) {\n  return simctlAsync([\n    'io',\n    deviceUDIDOrBooted(udid),\n    captureType,\n    `—type=${path.extname(outputFilePath)}`,\n    outputFilePath,\n  ]);\n}\n\n// Clear all unused simulators\nexport async function deleteUnavailableAsync() {\n  return simctlAsync(['delete', 'unavailable']);\n}\n\nexport async function simctlAsync(\n  [command, ...args]: (string | undefined)[],\n  options?: SpawnOptions\n): Promise<SpawnResult> {\n  return xcrunWithLogging(\n    // @ts-ignore\n    ['simctl', command, ...args.filter(Boolean)],\n    options\n  );\n}\n\nfunction deviceUDIDOrBooted(udid?: string): string {\n  return udid ? udid : 'booted';\n}\n\nexport function isLicenseOutOfDate(text: string) {\n  if (!text) {\n    return false;\n  }\n\n  const lower = text.toLowerCase();\n  return lower.includes('xcode') && lower.includes('license');\n}\n\nexport async function isXcrunInstalledAsync() {\n  try {\n    execSync('xcrun --version', { stdio: 'ignore' });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport async function xcrunAsync(args: string[], options?: SpawnOptions) {\n  Logger.global.debug('Running: xcrun ' + args.join(' '));\n  try {\n    return await spawnAsync('xcrun', args, options);\n  } catch (e) {\n    throw parseXcrunError(e);\n  }\n}\n\nexport function parseXcrunError(e: any): Error {\n  if (isLicenseOutOfDate(e.stdout) || isLicenseOutOfDate(e.stderr)) {\n    return new XDLError(\n      'XCODE_LICENSE_NOT_ACCEPTED',\n      'Xcode license is not accepted. Please run `sudo xcodebuild -license`.'\n    );\n  } else if (e.stderr?.includes('not a developer tool or in PATH')) {\n    return new XDLError(\n      'SIMCTL_NOT_AVAILABLE',\n      `You may need to run ${chalk.bold(\n        'sudo xcode-select -s /Applications/Xcode.app'\n      )} and try again.`\n    );\n  }\n  // Attempt to craft a better error message...\n  if (Array.isArray(e.output)) {\n    e.message += '\\n' + e.output.join('\\n').trim();\n  } else if (e.stderr) {\n    e.message += '\\n' + e.stderr;\n  }\n  return e;\n}\n\nexport async function xcrunWithLogging(\n  args: string[],\n  options?: SpawnOptions\n): Promise<SpawnResult> {\n  try {\n    return await xcrunAsync(args, options);\n  } catch (e) {\n    Logger.global.error(`Error running \\`xcrun ${args.join(' ')}\\`: ${e.stderr || e.message}`);\n    throw e;\n  }\n}\n"],"file":"SimControl.js"}